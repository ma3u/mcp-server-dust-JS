import axios from 'axios';
import { createParser } from 'eventsource-parser';
import http from 'http';
import https from 'https';
import moment from 'moment-timezone';
import { z } from 'zod';

function _OverloadYield(e, d) {
  this.v = e, this.k = d;
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _asyncIterator(r) {
  var n,
    t,
    o,
    e = 2;
  for ("undefined" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) {
    if (t && null != (n = r[t])) return n.call(r);
    if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r));
    t = "@@asyncIterator", o = "@@iterator";
  }
  throw new TypeError("Object is not async iterable");
}
function AsyncFromSyncIterator(r) {
  function AsyncFromSyncIteratorContinuation(r) {
    if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object."));
    var n = r.done;
    return Promise.resolve(r.value).then(function (r) {
      return {
        value: r,
        done: n
      };
    });
  }
  return AsyncFromSyncIterator = function (r) {
    this.s = r, this.n = r.next;
  }, AsyncFromSyncIterator.prototype = {
    s: null,
    n: null,
    next: function () {
      return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));
    },
    return: function (r) {
      var n = this.s.return;
      return void 0 === n ? Promise.resolve({
        value: r,
        done: !0
      }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));
    },
    throw: function (r) {
      var n = this.s.return;
      return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));
    }
  }, new AsyncFromSyncIterator(r);
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}
function _awaitAsyncGenerator(e) {
  return new _OverloadYield(e, 0);
}
function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function () {
      return o >= r.length ? {
        done: !0
      } : {
        done: !1,
        value: r[o++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _wrapAsyncGenerator(e) {
  return function () {
    return new AsyncGenerator(e.apply(this, arguments));
  };
}
function AsyncGenerator(e) {
  var r, t;
  function resume(r, t) {
    try {
      var n = e[r](t),
        o = n.value,
        u = o instanceof _OverloadYield;
      Promise.resolve(u ? o.v : o).then(function (t) {
        if (u) {
          var i = "return" === r ? "return" : "next";
          if (!o.k || t.done) return resume(i, t);
          t = e[i](t).value;
        }
        settle(n.done ? "return" : "normal", t);
      }, function (e) {
        resume("throw", e);
      });
    } catch (e) {
      settle("throw", e);
    }
  }
  function settle(e, n) {
    switch (e) {
      case "return":
        r.resolve({
          value: n,
          done: !0
        });
        break;
      case "throw":
        r.reject(n);
        break;
      default:
        r.resolve({
          value: n,
          done: !1
        });
    }
    (r = r.next) ? resume(r.key, r.arg) : t = null;
  }
  this._invoke = function (e, n) {
    return new Promise(function (o, u) {
      var i = {
        key: e,
        arg: n,
        resolve: o,
        reject: u,
        next: null
      };
      t ? t = t.next = i : (r = t = i, resume(e, n));
    });
  }, "function" != typeof e.return && (this.return = void 0);
}
AsyncGenerator.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
}, AsyncGenerator.prototype.next = function (e) {
  return this._invoke("next", e);
}, AsyncGenerator.prototype.throw = function (e) {
  return this._invoke("throw", e);
}, AsyncGenerator.prototype.return = function (e) {
  return this._invoke("return", e);
};

// Custom schema to get a string literal type and yet allow any string when parsing
var FlexibleEnumSchema = function FlexibleEnumSchema() {
  return z.custom(function (val) {
    return typeof val === "string";
  });
};
var ModelProviderIdSchema = /*#__PURE__*/FlexibleEnumSchema();
var ModelLLMIdSchema = /*#__PURE__*/FlexibleEnumSchema();
var EmbeddingProviderIdSchema = /*#__PURE__*/FlexibleEnumSchema();
var ConnectorsAPIErrorTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var ConnectorsAPIErrorSchema = /*#__PURE__*/z.object({
  type: ConnectorsAPIErrorTypeSchema,
  message: /*#__PURE__*/z.string()
});
var ModelIdSchema = /*#__PURE__*/z.number();
function isConnectorsAPIError(obj) {
  return typeof obj === "object" && obj !== null && "message" in obj && typeof obj.message === "string" && "type" in obj && typeof obj.type === "string" && ConnectorsAPIErrorSchema.safeParse(obj).success;
}
// Supported content types that are plain text and can be sent as file-less content fragment.
var supportedOtherFileFormats = {
  "application/msword": [".doc", ".docx"],
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": [".doc", ".docx"],
  "application/vnd.ms-powerpoint": [".ppt", ".pptx"],
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": [".ppt", ".pptx"],
  "application/vnd.google-apps.document": [],
  "application/vnd.google-apps.presentation": [],
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [".xlsx"],
  "application/vnd.google-apps.spreadsheet": [],
  "application/vnd.ms-excel": [".xls"],
  "application/pdf": [".pdf"],
  "application/vnd.dust.section.json": [".json"],
  "text/comma-separated-values": [".csv"],
  "text/csv": [".csv"],
  "text/markdown": [".md", ".markdown"],
  "text/plain": [".txt", ".log", ".cfg", ".conf"],
  "text/tab-separated-values": [".tsv"],
  "text/tsv": [".tsv"],
  "text/vnd.dust.attachment.slack.thread": [".txt"],
  "text/html": [".html", ".htm", ".xhtml", ".xhtml+xml"],
  "text/xml": [".xml"],
  "text/calendar": [".ics"],
  "text/css": [".css"],
  "text/javascript": [".js", ".mjs", ".jsx"],
  "text/typescript": [".ts", ".tsx"],
  "application/json": [".json"],
  "application/xml": [".xml"],
  "application/x-sh": [".sh"],
  "text/x-sh": [".sh"],
  "text/x-python": [".py"],
  "text/x-python-script": [".py"],
  "application/x-yaml": [".yaml", ".yml"],
  "text/yaml": [".yaml", ".yml"],
  "text/vnd.yaml": [".yaml", ".yml"],
  "text/x-c": [".c", ".cc", ".cpp", ".cxx", ".dic", ".h", ".hh"],
  "text/x-csharp": [".cs"],
  "text/x-java-source": [".java"],
  "text/x-php": [".php"],
  "text/x-ruby": [".rb"],
  "text/x-sql": [".sql"],
  "text/x-swift": [".swift"],
  "text/x-rust": [".rs"],
  "text/x-go": [".go"],
  "text/x-kotlin": [".kt", ".kts"],
  "text/x-scala": [".scala"],
  "text/x-groovy": [".groovy"],
  "text/x-perl": [".pl", ".pm"],
  "text/x-perl-script": [".pl", ".pm"]
};
// Supported content types for images.
var supportedImageFileFormats = {
  "image/jpeg": [".jpg", ".jpeg"],
  "image/png": [".png"],
  "image/gif": [".gif"],
  "image/webp": [".webp"]
};
var supportedOtherContentTypes = /*#__PURE__*/Object.keys(supportedOtherFileFormats);
var supportedImageContentTypes = /*#__PURE__*/Object.keys(supportedImageFileFormats);
var supportedFileExtensions = /*#__PURE__*/[].concat(/*#__PURE__*/Object.keys(supportedOtherFileFormats), /*#__PURE__*/Object.keys(supportedImageFileFormats));
var supportedUploadableContentType = /*#__PURE__*/[].concat(supportedOtherContentTypes, supportedImageContentTypes);
var SupportedContentFragmentTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var SupportedFileContentFragmentTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
function isSupportedFileContentType(contentType) {
  return supportedUploadableContentType.includes(contentType);
}
function isSupportedPlainTextContentType(contentType) {
  return supportedOtherContentTypes.includes(contentType);
}
function isSupportedImageContentType(contentType) {
  return supportedImageContentTypes.includes(contentType);
}
var UserMessageOriginSchema = /*#__PURE__*/FlexibleEnumSchema().or(z["null"]()).or(/*#__PURE__*/z.undefined());
var VisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();
var Ok = /*#__PURE__*/function () {
  function Ok(value) {
    this.value = void 0;
    this.value = value;
  }
  var _proto = Ok.prototype;
  _proto.isOk = function isOk() {
    return true;
  };
  _proto.isErr = function isErr() {
    return false;
  };
  return Ok;
}();
var Err = /*#__PURE__*/function () {
  function Err(error) {
    this.error = void 0;
    this.error = error;
  }
  var _proto2 = Err.prototype;
  _proto2.isOk = function isOk() {
    return false;
  };
  _proto2.isErr = function isErr() {
    return true;
  };
  return Err;
}();
// Custom codec to validate the timezone
var Timezone = /*#__PURE__*/z.string().refine(function (s) {
  return moment.tz.names().includes(s);
}, {
  message: "Invalid timezone"
});
var ConnectorProvidersSchema = /*#__PURE__*/FlexibleEnumSchema();
var isConnectorProvider = function isConnectorProvider(provider) {
  return ConnectorProvidersSchema.safeParse(provider).success;
};
var EditedByUserSchema = /*#__PURE__*/z.object({
  editedAt: /*#__PURE__*/z.number().nullable(),
  fullName: /*#__PURE__*/z.string().nullable(),
  imageUrl: /*#__PURE__*/z.string().nullable(),
  email: /*#__PURE__*/z.string().nullable(),
  userId: /*#__PURE__*/z.string().nullable()
});
var DataSourceTypeSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  sId: /*#__PURE__*/z.string(),
  createdAt: /*#__PURE__*/z.number(),
  name: /*#__PURE__*/z.string(),
  description: /*#__PURE__*/z.string().nullable(),
  assistantDefaultSelected: /*#__PURE__*/z["boolean"](),
  dustAPIProjectId: /*#__PURE__*/z.string(),
  dustAPIDataSourceId: /*#__PURE__*/z.string(),
  connectorId: /*#__PURE__*/z.string().nullable(),
  connectorProvider: /*#__PURE__*/ConnectorProvidersSchema.nullable(),
  editedByUser: /*#__PURE__*/EditedByUserSchema.nullable().optional()
});
function isFolder(ds) {
  // If there is no connectorProvider, it's a folder.
  return !ds.connectorProvider;
}
function isWebsite(ds) {
  return ds.connectorProvider === "webcrawler";
}
var DataSourceViewCategoriesSchema = /*#__PURE__*/FlexibleEnumSchema();
var BlockTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var StatusSchema = /*#__PURE__*/z["enum"](["running", "succeeded", "errored"]);
var BlockRunConfigSchema = /*#__PURE__*/z.record(/*#__PURE__*/z.any());
var BlockStatusSchema = /*#__PURE__*/z.object({
  block_type: BlockTypeSchema,
  name: /*#__PURE__*/z.string(),
  status: StatusSchema,
  success_count: /*#__PURE__*/z.number(),
  error_count: /*#__PURE__*/z.number()
});
var RunConfigSchema = /*#__PURE__*/z.object({
  blocks: BlockRunConfigSchema
});
var TraceTypeSchema = /*#__PURE__*/z.object({
  value: /*#__PURE__*/z.unknown().nullable(),
  error: /*#__PURE__*/z.string().nullable(),
  meta: /*#__PURE__*/z.unknown().nullable()
});
var RunStatusSchema = /*#__PURE__*/z.object({
  run: StatusSchema,
  blocks: /*#__PURE__*/z.array(BlockStatusSchema)
});
var RunTypeSchema = /*#__PURE__*/z.object({
  run_id: /*#__PURE__*/z.string(),
  created: /*#__PURE__*/z.number(),
  run_type: /*#__PURE__*/z["enum"](["deploy", "local", "execute"]),
  app_hash: /*#__PURE__*/z.string().nullable().optional(),
  specification_hash: /*#__PURE__*/z.string().nullable().optional(),
  config: RunConfigSchema,
  status: RunStatusSchema,
  traces: /*#__PURE__*/z.array(/*#__PURE__*/z.tuple([/*#__PURE__*/z.tuple([BlockTypeSchema, /*#__PURE__*/z.string()]), /*#__PURE__*/z.array(/*#__PURE__*/z.array(TraceTypeSchema))])),
  results: /*#__PURE__*/z.array(z.array(z.object({
    value: z.unknown().nullable().optional(),
    error: z.string().nullable().optional()
  }))).nullable().optional()
});
var TokensClassificationSchema = /*#__PURE__*/FlexibleEnumSchema();
var GenerationTokensEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("generation_tokens"),
  created: /*#__PURE__*/z.number(),
  configurationId: /*#__PURE__*/z.string(),
  messageId: /*#__PURE__*/z.string(),
  text: /*#__PURE__*/z.string(),
  classification: /*#__PURE__*/z.union([TokensClassificationSchema, /*#__PURE__*/z["enum"](["opening_delimiter", "closing_delimiter"])]),
  delimiterClassification: /*#__PURE__*/TokensClassificationSchema.nullable().optional()
});
var BaseActionTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var BaseActionSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  type: BaseActionTypeSchema
});
var BrowseActionOutputSchema = /*#__PURE__*/z.object({
  results: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
    requestedUrl: /*#__PURE__*/z.string(),
    browsedUrl: /*#__PURE__*/z.string(),
    content: /*#__PURE__*/z.string(),
    responseCode: /*#__PURE__*/z.string(),
    errorMessage: /*#__PURE__*/z.string()
  }))
});
var BrowseActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  urls: /*#__PURE__*/z.array(/*#__PURE__*/z.string()),
  output: /*#__PURE__*/BrowseActionOutputSchema.nullable(),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("browse_action")
});
var SearchLabelsActionOutputSchema = /*#__PURE__*/z.object({
  tags: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
    tag: /*#__PURE__*/z.string(),
    match_count: /*#__PURE__*/z.number(),
    data_sources: /*#__PURE__*/z.array(/*#__PURE__*/z.string())
  }))
});
var SearchLabelsActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  output: /*#__PURE__*/SearchLabelsActionOutputSchema.nullable(),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("search_labels_action")
});
var ReasoningActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  output: /*#__PURE__*/z.string().nullable(),
  thinking: /*#__PURE__*/z.string().nullable(),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("reasoning_action")
});
var ConversationIncludeFileActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  params: /*#__PURE__*/z.object({
    fileId: /*#__PURE__*/z.string()
  }),
  tokensCount: /*#__PURE__*/z.number().nullable(),
  fileTitle: /*#__PURE__*/z.string().nullable(),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("conversation_include_file_action")
});
var ConversationAttachmentTypeSchema = /*#__PURE__*/z.union([
/*#__PURE__*/
// File case
z.object({
  fileId: /*#__PURE__*/z.string(),
  contentFragmentId: /*#__PURE__*/z.undefined(),
  nodeDataSourceViewId: /*#__PURE__*/z.undefined(),
  title: /*#__PURE__*/z.string(),
  contentType: SupportedContentFragmentTypeSchema
}),
/*#__PURE__*/
// Node case
z.object({
  fileId: /*#__PURE__*/z.undefined(),
  contentFragmentId: /*#__PURE__*/z.string(),
  nodeDataSourceViewId: /*#__PURE__*/z.string(),
  title: /*#__PURE__*/z.string(),
  contentType: SupportedContentFragmentTypeSchema
})]);
var ConversationListFilesActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  files: /*#__PURE__*/z.array(ConversationAttachmentTypeSchema),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  agentMessageId: ModelIdSchema,
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("conversation_list_files_action")
});
var DustAppParametersSchema = /*#__PURE__*/z.record(/*#__PURE__*/z.union([/*#__PURE__*/z.string(), /*#__PURE__*/z.number(), /*#__PURE__*/z["boolean"]()]));
var DustAppRunActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  appWorkspaceId: z.string(),
  appId: z.string(),
  appName: z.string(),
  params: DustAppParametersSchema,
  runningBlock: z.object({
    type: z.string(),
    name: z.string(),
    status: z["enum"](["running", "succeeded", "errored"])
  }).nullable(),
  output: z.unknown().nullable(),
  functionCallId: z.string().nullable(),
  functionCallName: z.string().nullable(),
  step: z.number(),
  type: z.literal("dust_app_run_action")
}).transform(function (o) {
  return _extends({}, o, {
    output: o.output
  });
});
var DataSourceViewKindSchema = /*#__PURE__*/FlexibleEnumSchema();
var DataSourceViewSchema = /*#__PURE__*/z.object({
  category: DataSourceViewCategoriesSchema,
  createdAt: /*#__PURE__*/z.number(),
  dataSource: DataSourceTypeSchema,
  editedByUser: /*#__PURE__*/EditedByUserSchema.nullable().optional(),
  id: ModelIdSchema,
  kind: DataSourceViewKindSchema,
  parentsIn: /*#__PURE__*/z.array(z.string()).nullable(),
  sId: /*#__PURE__*/z.string(),
  updatedAt: /*#__PURE__*/z.number(),
  spaceId: /*#__PURE__*/z.string()
});
var TIME_FRAME_UNITS = ["hour", "day", "week", "month", "year"];
var TimeframeUnitSchema = /*#__PURE__*/z["enum"](TIME_FRAME_UNITS);
var TimeFrameSchema = /*#__PURE__*/z.object({
  duration: /*#__PURE__*/z.number(),
  unit: TimeframeUnitSchema
});
var RetrievalDocumentChunkTypeSchema = /*#__PURE__*/z.object({
  offset: /*#__PURE__*/z.number(),
  score: /*#__PURE__*/z.number().nullable(),
  text: /*#__PURE__*/z.string()
});
var RetrievalDocumentTypeSchema = /*#__PURE__*/z.object({
  chunks: /*#__PURE__*/z.array(RetrievalDocumentChunkTypeSchema),
  documentId: /*#__PURE__*/z.string(),
  dataSourceView: /*#__PURE__*/DataSourceViewSchema.nullable(),
  id: ModelIdSchema,
  reference: /*#__PURE__*/z.string(),
  score: /*#__PURE__*/z.number().nullable(),
  sourceUrl: /*#__PURE__*/z.string().nullable(),
  tags: /*#__PURE__*/z.array(/*#__PURE__*/z.string()),
  timestamp: /*#__PURE__*/z.number()
});
var RetrievalActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  params: /*#__PURE__*/z.object({
    relativeTimeFrame: /*#__PURE__*/TimeFrameSchema.nullable(),
    query: /*#__PURE__*/z.string().nullable(),
    topK: /*#__PURE__*/z.number()
  }),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  documents: /*#__PURE__*/z.array(RetrievalDocumentTypeSchema).nullable(),
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("retrieval_action")
});
var ProcessSchemaAllowedTypesSchema = /*#__PURE__*/z["enum"](["string", "number", "boolean"]);
var ProcessSchemaPropertySchema = /*#__PURE__*/z.object({
  name: /*#__PURE__*/z.string(),
  type: ProcessSchemaAllowedTypesSchema,
  description: /*#__PURE__*/z.string()
});
var ProcessActionOutputsSchema = /*#__PURE__*/z.object({
  data: /*#__PURE__*/z.array(/*#__PURE__*/z.unknown()),
  min_timestamp: /*#__PURE__*/z.number(),
  total_documents: /*#__PURE__*/z.number(),
  total_chunks: /*#__PURE__*/z.number(),
  total_tokens: /*#__PURE__*/z.number()
});
var ProcessActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  params: /*#__PURE__*/z.object({
    relativeTimeFrame: /*#__PURE__*/TimeFrameSchema.nullable()
  }),
  schema: /*#__PURE__*/z.array(ProcessSchemaPropertySchema),
  outputs: /*#__PURE__*/ProcessActionOutputsSchema.nullable(),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("process_action")
});
var TablesQueryActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  params: DustAppParametersSchema,
  output: /*#__PURE__*/z.record(z.union([z.string(), z.number(), z["boolean"]()])).nullable(),
  resultsFileId: /*#__PURE__*/z.string().nullable(),
  resultsFileSnippet: /*#__PURE__*/z.string().nullable(),
  sectionFileId: /*#__PURE__*/z.string().nullable(),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  agentMessageId: ModelIdSchema,
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("tables_query_action")
});
var WhitelistableFeaturesSchema = /*#__PURE__*/FlexibleEnumSchema();
var WorkspaceSegmentationSchema = /*#__PURE__*/FlexibleEnumSchema().nullable();
var RoleSchema = /*#__PURE__*/z["enum"](["admin", "builder", "user", "none"]);
var LightWorkspaceSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  sId: /*#__PURE__*/z.string(),
  name: /*#__PURE__*/z.string(),
  role: RoleSchema,
  segmentation: WorkspaceSegmentationSchema,
  whiteListedProviders: /*#__PURE__*/ModelProviderIdSchema.array().nullable(),
  defaultEmbeddingProvider: /*#__PURE__*/EmbeddingProviderIdSchema.nullable()
});
var WorkspaceSchema = /*#__PURE__*/LightWorkspaceSchema.extend({
  ssoEnforced: /*#__PURE__*/z["boolean"]().optional()
});
var ExtensionWorkspaceSchema = /*#__PURE__*/WorkspaceSchema.extend({
  blacklistedDomains: /*#__PURE__*/z.array(z.string()).nullable()
});
var UserProviderSchema = /*#__PURE__*/FlexibleEnumSchema().nullable();
var UserSchema = /*#__PURE__*/z.object({
  sId: /*#__PURE__*/z.string(),
  id: ModelIdSchema,
  createdAt: /*#__PURE__*/z.number(),
  provider: UserProviderSchema,
  username: /*#__PURE__*/z.string(),
  email: /*#__PURE__*/z.string(),
  firstName: /*#__PURE__*/z.string(),
  lastName: /*#__PURE__*/z.string().nullable(),
  fullName: /*#__PURE__*/z.string(),
  image: /*#__PURE__*/z.string().nullable()
});
var WebsearchResultSchema = /*#__PURE__*/z.object({
  title: /*#__PURE__*/z.string(),
  snippet: /*#__PURE__*/z.string(),
  link: /*#__PURE__*/z.string(),
  reference: /*#__PURE__*/z.string()
});
var WebsearchActionOutputSchema = /*#__PURE__*/z.union([/*#__PURE__*/z.object({
  results: /*#__PURE__*/z.array(WebsearchResultSchema)
}), /*#__PURE__*/z.object({
  results: /*#__PURE__*/z.array(WebsearchResultSchema),
  error: /*#__PURE__*/z.string()
})]);
var WebsearchActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  query: /*#__PURE__*/z.string(),
  output: /*#__PURE__*/WebsearchActionOutputSchema.nullable(),
  functionCallId: /*#__PURE__*/z.string().nullable(),
  functionCallName: /*#__PURE__*/z.string().nullable(),
  step: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("websearch_action")
});
var MCPActionTypeSchema = /*#__PURE__*/BaseActionSchema.extend({
  agentMessageId: ModelIdSchema,
  params: /*#__PURE__*/z.unknown(),
  type: /*#__PURE__*/z.literal("tool_action")
});
var GlobalAgentStatusSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentStatusSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentConfigurationStatusSchema = /*#__PURE__*/z.union([AgentStatusSchema, GlobalAgentStatusSchema]);
var AgentConfigurationScopeSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentConfigurationViewSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentUsageTypeSchema = /*#__PURE__*/z.object({
  messageCount: /*#__PURE__*/z.number(),
  conversationCount: /*#__PURE__*/z.number(),
  userCount: /*#__PURE__*/z.number(),
  timePeriodSec: /*#__PURE__*/z.number()
});
var AgentRecentAuthorsSchema = /*#__PURE__*/z.array(z.string()).readonly();
var AgentModelConfigurationSchema = /*#__PURE__*/z.object({
  providerId: ModelProviderIdSchema,
  modelId: ModelLLMIdSchema,
  temperature: /*#__PURE__*/z.number()
});
var LightAgentConfigurationSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  versionCreatedAt: /*#__PURE__*/z.string().nullable(),
  sId: /*#__PURE__*/z.string(),
  version: /*#__PURE__*/z.number(),
  versionAuthorId: /*#__PURE__*/ModelIdSchema.nullable(),
  instructions: /*#__PURE__*/z.string().nullable(),
  model: AgentModelConfigurationSchema,
  status: AgentConfigurationStatusSchema,
  scope: AgentConfigurationScopeSchema,
  userFavorite: /*#__PURE__*/z["boolean"](),
  name: /*#__PURE__*/z.string(),
  description: /*#__PURE__*/z.string(),
  pictureUrl: /*#__PURE__*/z.string(),
  lastAuthors: /*#__PURE__*/AgentRecentAuthorsSchema.optional(),
  usage: /*#__PURE__*/AgentUsageTypeSchema.optional(),
  maxStepsPerRun: /*#__PURE__*/z.number(),
  visualizationEnabled: /*#__PURE__*/z["boolean"](),
  templateId: /*#__PURE__*/z.string().nullable(),
  groupIds: /*#__PURE__*/z.array(z.string()).optional(),
  requestedGroupIds: /*#__PURE__*/z.array(/*#__PURE__*/z.array(/*#__PURE__*/z.string()))
});
var ContentFragmentContextSchema = /*#__PURE__*/z.object({
  username: /*#__PURE__*/z.string().optional().nullable(),
  fullName: /*#__PURE__*/z.string().optional().nullable(),
  email: /*#__PURE__*/z.string().optional().nullable(),
  profilePictureUrl: /*#__PURE__*/z.string().optional().nullable()
});
var ContentFragmentSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  sId: /*#__PURE__*/z.string(),
  fileId: /*#__PURE__*/z.string().nullable(),
  created: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("content_fragment"),
  visibility: VisibilitySchema,
  version: /*#__PURE__*/z.number(),
  sourceUrl: /*#__PURE__*/z.string().nullable(),
  textUrl: /*#__PURE__*/z.string(),
  textBytes: /*#__PURE__*/z.number().nullable(),
  title: /*#__PURE__*/z.string(),
  contentType: SupportedContentFragmentTypeSchema,
  context: ContentFragmentContextSchema,
  contentFragmentId: /*#__PURE__*/z.string(),
  contentFragmentVersion: /*#__PURE__*/z.union([/*#__PURE__*/z.literal("latest"), /*#__PURE__*/z.literal("superseded")])
});
var AgentMentionSchema = /*#__PURE__*/z.object({
  configurationId: /*#__PURE__*/z.string()
});
var UserMessageContextSchema = /*#__PURE__*/z.object({
  username: /*#__PURE__*/z.string(),
  timezone: Timezone,
  fullName: /*#__PURE__*/z.string().optional().nullable(),
  email: /*#__PURE__*/z.string().optional().nullable(),
  profilePictureUrl: /*#__PURE__*/z.string().optional().nullable(),
  origin: UserMessageOriginSchema
});
var UserMessageSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  created: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("user_message"),
  sId: /*#__PURE__*/z.string(),
  visibility: VisibilitySchema,
  version: /*#__PURE__*/z.number(),
  user: /*#__PURE__*/UserSchema.nullable(),
  mentions: /*#__PURE__*/z.array(AgentMentionSchema),
  content: /*#__PURE__*/z.string(),
  context: UserMessageContextSchema
});
var AgentActionTypeSchema = /*#__PURE__*/z.union([RetrievalActionTypeSchema, DustAppRunActionTypeSchema, TablesQueryActionTypeSchema, ProcessActionTypeSchema, WebsearchActionTypeSchema, BrowseActionTypeSchema, ConversationListFilesActionTypeSchema, ConversationIncludeFileActionTypeSchema, ReasoningActionTypeSchema, SearchLabelsActionTypeSchema, MCPActionTypeSchema]);
var AgentMessageStatusSchema = /*#__PURE__*/FlexibleEnumSchema();
var AgentMessageTypeSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  agentMessageId: ModelIdSchema,
  created: /*#__PURE__*/z.number(),
  type: /*#__PURE__*/z.literal("agent_message"),
  sId: /*#__PURE__*/z.string(),
  visibility: VisibilitySchema,
  version: /*#__PURE__*/z.number(),
  parentMessageId: /*#__PURE__*/z.string().nullable(),
  configuration: LightAgentConfigurationSchema,
  status: AgentMessageStatusSchema,
  actions: /*#__PURE__*/z.array(AgentActionTypeSchema),
  content: /*#__PURE__*/z.string().nullable(),
  chainOfThought: /*#__PURE__*/z.string().nullable(),
  rawContents: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
    step: /*#__PURE__*/z.number(),
    content: /*#__PURE__*/z.string()
  })),
  error: /*#__PURE__*/z.object({
    code: z.string(),
    message: z.string()
  }).nullable()
});
var AgentMesssageFeedbackSchema = /*#__PURE__*/z.object({
  messageId: /*#__PURE__*/z.string(),
  agentMessageId: /*#__PURE__*/z.number(),
  userId: /*#__PURE__*/z.number(),
  thumbDirection: /*#__PURE__*/z.union([/*#__PURE__*/z.literal("up"), /*#__PURE__*/z.literal("down")]),
  content: /*#__PURE__*/z.string().nullable(),
  createdAt: /*#__PURE__*/z.number(),
  agentConfigurationId: /*#__PURE__*/z.string(),
  agentConfigurationVersion: /*#__PURE__*/z.number(),
  isConversationShared: /*#__PURE__*/z["boolean"]()
});
var ConversationVisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();
var ConversationWithoutContentSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  created: /*#__PURE__*/z.number(),
  updated: /*#__PURE__*/z.number().optional(),
  owner: WorkspaceSchema,
  sId: /*#__PURE__*/z.string(),
  title: /*#__PURE__*/z.string().nullable(),
  visibility: ConversationVisibilitySchema,
  groupIds: /*#__PURE__*/z.array(z.string()).optional(),
  requestedGroupIds: /*#__PURE__*/z.array(/*#__PURE__*/z.array(/*#__PURE__*/z.string()))
});
var ConversationSchema = /*#__PURE__*/ConversationWithoutContentSchema.extend({
  content: /*#__PURE__*/z.array(/*#__PURE__*/z.union([/*#__PURE__*/z.array(UserMessageSchema), /*#__PURE__*/z.array(AgentMessageTypeSchema), /*#__PURE__*/z.array(ContentFragmentSchema)]))
});
var CoreAPIErrorSchema = /*#__PURE__*/z.object({
  message: /*#__PURE__*/z.string(),
  code: /*#__PURE__*/z.string()
});
var CoreAPITokenTypeSchema = /*#__PURE__*/z.tuple([/*#__PURE__*/z.number(), /*#__PURE__*/z.string()]);
var APIErrorTypeSchema = /*#__PURE__*/FlexibleEnumSchema();
var APIErrorSchema = /*#__PURE__*/z.object({
  type: APIErrorTypeSchema,
  message: /*#__PURE__*/z.string(),
  data_source_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),
  run_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),
  app_error: /*#__PURE__*/CoreAPIErrorSchema.optional(),
  connectors_error: /*#__PURE__*/ConnectorsAPIErrorSchema.optional()
});
var WorkspaceDomainSchema = /*#__PURE__*/z.object({
  domain: /*#__PURE__*/z.string(),
  domainAutoJoinEnabled: /*#__PURE__*/z["boolean"]()
});
var DustAppTypeSchema = /*#__PURE__*/z.object({
  appHash: /*#__PURE__*/z.string(),
  appId: /*#__PURE__*/z.string(),
  workspaceId: /*#__PURE__*/z.string()
});
var DustAppConfigTypeSchema = /*#__PURE__*/z.record(/*#__PURE__*/z.unknown());
var DustAppRunErroredEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("error"),
  content: /*#__PURE__*/z.object({
    code: /*#__PURE__*/z.string(),
    message: /*#__PURE__*/z.string()
  })
});
var DustAppRunRunStatusEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("run_status"),
  content: /*#__PURE__*/z.object({
    status: /*#__PURE__*/z["enum"](["running", "succeeded", "errored"]),
    run_id: /*#__PURE__*/z.string()
  })
});
var DustAppRunBlockStatusEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("block_status"),
  content: /*#__PURE__*/z.object({
    block_type: BlockTypeSchema,
    name: /*#__PURE__*/z.string(),
    status: StatusSchema,
    success_count: /*#__PURE__*/z.number(),
    error_count: /*#__PURE__*/z.number()
  })
});
var DustAppRunBlockExecutionEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("block_execution"),
  content: /*#__PURE__*/z.object({
    block_type: BlockTypeSchema,
    block_name: /*#__PURE__*/z.string(),
    execution: /*#__PURE__*/z.array(/*#__PURE__*/z.array(/*#__PURE__*/z.object({
      value: /*#__PURE__*/z.unknown().nullable(),
      error: /*#__PURE__*/z.string().nullable(),
      meta: /*#__PURE__*/z.unknown().nullable()
    })))
  })
});
var DustAppRunFinalEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("final")
});
var DustAppRunTokensEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("tokens"),
  content: /*#__PURE__*/z.object({
    block_type: /*#__PURE__*/z.string(),
    block_name: /*#__PURE__*/z.string(),
    input_index: /*#__PURE__*/z.number(),
    map: /*#__PURE__*/z.object({
      name: z.string(),
      iteration: z.number()
    }).nullable(),
    tokens: /*#__PURE__*/z.object({
      text: /*#__PURE__*/z.string(),
      tokens: /*#__PURE__*/z.array(z.string()).optional(),
      logprobs: /*#__PURE__*/z.array(z.number()).optional()
    })
  })
});
var DustAppRunFunctionCallEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("function_call"),
  content: /*#__PURE__*/z.object({
    block_type: /*#__PURE__*/z.string(),
    block_name: /*#__PURE__*/z.string(),
    input_index: /*#__PURE__*/z.number(),
    map: /*#__PURE__*/z.object({
      name: z.string(),
      iteration: z.number()
    }).nullable(),
    function_call: /*#__PURE__*/z.object({
      name: /*#__PURE__*/z.string()
    })
  })
});
var DustAppRunFunctionCallArgumentsTokensEventSchema = /*#__PURE__*/z.object({
  type: /*#__PURE__*/z.literal("function_call_arguments_tokens"),
  content: /*#__PURE__*/z.object({
    block_type: /*#__PURE__*/z.string(),
    block_name: /*#__PURE__*/z.string(),
    input_index: /*#__PURE__*/z.number(),
    map: /*#__PURE__*/z.object({
      name: z.string(),
      iteration: z.number()
    }).nullable(),
    tokens: /*#__PURE__*/z.object({
      text: /*#__PURE__*/z.string()
    })
  })
});
var SpaceKindSchema = /*#__PURE__*/FlexibleEnumSchema();
var SpaceTypeSchema = /*#__PURE__*/z.object({
  createdAt: /*#__PURE__*/z.number(),
  groupIds: /*#__PURE__*/z.array(/*#__PURE__*/z.string()),
  isRestricted: /*#__PURE__*/z["boolean"](),
  kind: SpaceKindSchema,
  name: /*#__PURE__*/z.string(),
  sId: /*#__PURE__*/z.string(),
  updatedAt: /*#__PURE__*/z.number()
});
var DatasetSchemaEntryType = /*#__PURE__*/FlexibleEnumSchema();
var DatasetSchema = /*#__PURE__*/z.object({
  name: /*#__PURE__*/z.string(),
  description: /*#__PURE__*/z.string().nullable(),
  data: /*#__PURE__*/z.array(z.record(z.any())).nullable().optional(),
  schema: /*#__PURE__*/z.array(z.object({
    key: z.string(),
    type: DatasetSchemaEntryType,
    description: z.string().nullable()
  })).nullable().optional()
});
var AppTypeSchema = /*#__PURE__*/z.object({
  id: ModelIdSchema,
  sId: /*#__PURE__*/z.string(),
  name: /*#__PURE__*/z.string(),
  description: /*#__PURE__*/z.string().nullable(),
  savedSpecification: /*#__PURE__*/z.string().nullable(),
  savedConfig: /*#__PURE__*/z.string().nullable(),
  savedRun: /*#__PURE__*/z.string().nullable(),
  dustAPIProjectId: /*#__PURE__*/z.string(),
  space: SpaceTypeSchema,
  datasets: /*#__PURE__*/z.array(DatasetSchema).optional(),
  coreSpecifications: /*#__PURE__*/z.record(z.string()).optional()
});
var RunAppResponseSchema = /*#__PURE__*/z.object({
  run: RunTypeSchema
});
var GetDataSourcesResponseSchema = /*#__PURE__*/z.object({
  data_sources: /*#__PURE__*/DataSourceTypeSchema.array()
});
var GetOrPatchAgentConfigurationResponseSchema = /*#__PURE__*/z.object({
  agentConfiguration: LightAgentConfigurationSchema
});
var PatchAgentConfigurationRequestSchema = /*#__PURE__*/z.object({
  userFavorite: /*#__PURE__*/z["boolean"]().optional()
});
var GetAgentConfigurationsResponseSchema = /*#__PURE__*/z.object({
  agentConfigurations: /*#__PURE__*/LightAgentConfigurationSchema.array()
});
var PostContentFragmentResponseSchema = /*#__PURE__*/z.object({
  contentFragment: ContentFragmentSchema
});
var CreateConversationResponseSchema = /*#__PURE__*/z.object({
  conversation: ConversationSchema,
  message: UserMessageSchema
});
var GetFeedbacksResponseSchema = /*#__PURE__*/z.object({
  feedbacks: /*#__PURE__*/z.array(AgentMesssageFeedbackSchema)
});
var PublicPostMessageFeedbackRequestBodySchema = /*#__PURE__*/z.object({
  thumbDirection: /*#__PURE__*/z.string(),
  feedbackContent: /*#__PURE__*/z.string().nullable().optional(),
  isConversationShared: /*#__PURE__*/z["boolean"]().optional()
});
var PostMessageFeedbackResponseSchema = /*#__PURE__*/z.object({
  success: /*#__PURE__*/z.literal(true)
});
var PostUserMessageResponseSchema = /*#__PURE__*/z.object({
  message: UserMessageSchema
});
var GetConversationResponseSchema = /*#__PURE__*/z.object({
  conversation: ConversationSchema
});
var TokenizeResponseSchema = /*#__PURE__*/z.object({
  tokens: /*#__PURE__*/CoreAPITokenTypeSchema.array()
});
var GetActiveMemberEmailsInWorkspaceResponseSchema = /*#__PURE__*/z.object({
  emails: /*#__PURE__*/z.array(/*#__PURE__*/z.string())
});
var GetWorkspaceVerifiedDomainsResponseSchema = /*#__PURE__*/z.object({
  verified_domains: /*#__PURE__*/WorkspaceDomainSchema.array()
});
var GetWorkspaceFeatureFlagsResponseSchema = /*#__PURE__*/z.object({
  feature_flags: /*#__PURE__*/WhitelistableFeaturesSchema.array()
});
var PublicPostMessagesRequestBodySchema = /*#__PURE__*/z.intersection(/*#__PURE__*/z.object({
  content: /*#__PURE__*/z.string().min(1),
  mentions: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
    configurationId: /*#__PURE__*/z.string()
  })),
  context: UserMessageContextSchema
}), /*#__PURE__*/z.object({
  blocking: z["boolean"]().optional()
}).partial());
var PublicPostEditMessagesRequestBodySchema = /*#__PURE__*/z.object({
  content: /*#__PURE__*/z.string(),
  mentions: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
    configurationId: /*#__PURE__*/z.string()
  }))
});
var PublicContentFragmentWithContentSchema = /*#__PURE__*/z.object({
  title: /*#__PURE__*/z.string(),
  url: /*#__PURE__*/z.string().optional().nullable(),
  content: /*#__PURE__*/z.string(),
  contentType: /*#__PURE__*/z.string(),
  fileId: /*#__PURE__*/z.undefined().nullable(),
  nodeId: /*#__PURE__*/z.undefined().nullable(),
  nodeDataSourceViewId: /*#__PURE__*/z.undefined().nullable(),
  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),
  // Undocumented for now -- allows to supersede an existing content fragment.
  supersededContentFragmentId: /*#__PURE__*/z.string().optional().nullable()
});
var PublicContentFragmentWithFileIdSchema = /*#__PURE__*/z.object({
  title: /*#__PURE__*/z.string(),
  fileId: /*#__PURE__*/z.string(),
  url: /*#__PURE__*/z.string().optional().nullable(),
  content: /*#__PURE__*/z.undefined().nullable(),
  contentType: /*#__PURE__*/z.undefined().nullable(),
  nodeId: /*#__PURE__*/z.undefined().nullable(),
  nodeDataSourceViewId: /*#__PURE__*/z.undefined().nullable(),
  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),
  // Undocumented for now -- allows to supersede an existing content fragment.
  supersededContentFragmentId: /*#__PURE__*/z.string().optional().nullable()
});
var PublicContentFragmentWithContentNodeSchema = /*#__PURE__*/z.object({
  title: /*#__PURE__*/z.string(),
  nodeId: /*#__PURE__*/z.string(),
  nodeDataSourceViewId: /*#__PURE__*/z.string(),
  url: /*#__PURE__*/z.undefined().nullable(),
  content: /*#__PURE__*/z.undefined().nullable(),
  contentType: /*#__PURE__*/z.undefined().nullable(),
  fileId: /*#__PURE__*/z.undefined().nullable(),
  context: /*#__PURE__*/ContentFragmentContextSchema.optional().nullable(),
  supersededContentFragmentId: /*#__PURE__*/z.string().optional().nullable()
});
var PublicPostContentFragmentRequestBodySchema = /*#__PURE__*/z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema]);
var PublicPostConversationsRequestBodySchema = /*#__PURE__*/z.intersection(/*#__PURE__*/z.object({
  title: /*#__PURE__*/z.string().nullable().optional(),
  visibility: /*#__PURE__*/z["enum"](["unlisted", "workspace", "deleted", "test"]).optional()["default"]("unlisted"),
  message: /*#__PURE__*/z.union([/*#__PURE__*/z.intersection(/*#__PURE__*/z.object({
    content: /*#__PURE__*/z.string().min(1),
    mentions: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
      configurationId: /*#__PURE__*/z.string()
    })),
    context: UserMessageContextSchema
  }), /*#__PURE__*/z.object({
    blocking: z["boolean"]().optional()
  }).partial()), /*#__PURE__*/z.undefined()]),
  contentFragment: /*#__PURE__*/z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema, /*#__PURE__*/z.undefined()]),
  contentFragments: /*#__PURE__*/z.union([/*#__PURE__*/z.union([PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicContentFragmentWithContentNodeSchema]).array(), /*#__PURE__*/z.undefined()])
}), /*#__PURE__*/z.object({
  blocking: z["boolean"]().optional()
}).partial());
var PostConversationsResponseSchema = /*#__PURE__*/z.object({
  conversation: ConversationSchema,
  message: /*#__PURE__*/UserMessageSchema.optional(),
  contentFragment: /*#__PURE__*/ContentFragmentSchema.optional()
});
var GetConversationsResponseSchema = /*#__PURE__*/z.object({
  conversations: /*#__PURE__*/ConversationWithoutContentSchema.array()
});
var SearchDataSourceViewsRequestSchema = /*#__PURE__*/z.object({
  dataSourceId: /*#__PURE__*/z.string().optional(),
  kind: /*#__PURE__*/z.string().optional(),
  vaultId: /*#__PURE__*/z.string().optional(),
  vaultKind: /*#__PURE__*/z.string().optional()
});
var SearchDataSourceViewsResponseSchema = /*#__PURE__*/z.object({
  data_source_views: /*#__PURE__*/DataSourceViewSchema.array()
});
var ValidateMemberRequestSchema = /*#__PURE__*/z.object({
  email: /*#__PURE__*/z.string()
});
var GetAppsResponseSchema = /*#__PURE__*/z.object({
  apps: /*#__PURE__*/AppTypeSchema.array()
});
var PostAppsRequestSchema = /*#__PURE__*/z.object({
  apps: /*#__PURE__*/AppTypeSchema.array()
});
var ImportAppsResponseSchema = /*#__PURE__*/z.object({
  apps: /*#__PURE__*/z.object({
    sId: z.string(),
    name: z.string(),
    error: z.string().optional()
  }).array()
});
var DataSourceViewResponseSchema = /*#__PURE__*/z.object({
  dataSourceView: DataSourceViewSchema
});
var PatchDataSourceViewRequestSchema = /*#__PURE__*/z.union([/*#__PURE__*/z.object({
  parentsToAdd: z.union([z.array(z.string()), z.undefined()]),
  parentsToRemove: z.array(z.string()).optional()
})
// For the fields to be not optional, see https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field
.transform(function (o) {
  return {
    parentsToAdd: o.parentsToAdd,
    parentsToRemove: o.parentsToRemove
  };
}), /*#__PURE__*/z.object({
  parentsIn: /*#__PURE__*/z.array(/*#__PURE__*/z.string())
})]);
var DataSourceSearchQuerySchema = /*#__PURE__*/z.object({
  query: /*#__PURE__*/z.string(),
  top_k: /*#__PURE__*/z.coerce.number(),
  full_text: /*#__PURE__*/z.coerce["boolean"](),
  target_document_tokens: /*#__PURE__*/z.coerce.number().optional(),
  timestamp_gt: /*#__PURE__*/z.coerce.number().optional(),
  timestamp_lt: /*#__PURE__*/z.coerce.number().optional(),
  tags_in: /*#__PURE__*/z.array(z.string()).optional(),
  tags_not: /*#__PURE__*/z.array(z.string()).optional(),
  parents_in: /*#__PURE__*/z.array(z.string()).optional(),
  parents_not: /*#__PURE__*/z.array(z.string()).optional()
});
var FrontDataSourceDocumentSectionSchema = /*#__PURE__*/z.lazy(function () {
  return z.object({
    prefix: z.string().nullable(),
    content: z.string().nullable(),
    sections: z.array(FrontDataSourceDocumentSectionSchema)
  });
});
var PostDataSourceDocumentRequestSchema = /*#__PURE__*/z.object({
  timestamp: /*#__PURE__*/z.number().nullable().optional(),
  tags: /*#__PURE__*/z.array(z.string()).nullable().optional(),
  parent_id: /*#__PURE__*/z.string().nullable().optional(),
  parents: /*#__PURE__*/z.array(z.string()).nullable().optional(),
  source_url: /*#__PURE__*/z.string().nullable().optional(),
  upsert_context: /*#__PURE__*/z.object({
    sync_type: z.union([z["enum"](["batch", "incremental"]), z.undefined()])
  }) // For the fields to be not optional, see https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field
  .transform(function (o) {
    return {
      sync_type: o.sync_type
    };
  }).optional(),
  text: /*#__PURE__*/z.string().nullable().optional(),
  section: /*#__PURE__*/FrontDataSourceDocumentSectionSchema.nullable().optional(),
  light_document_output: /*#__PURE__*/z["boolean"]().optional(),
  async: /*#__PURE__*/z["boolean"]().nullable().optional(),
  mime_type: /*#__PURE__*/z.string().nullable().optional(),
  title: /*#__PURE__*/z.string().nullable().optional()
});
var UpsertTableRowsRequestSchema = /*#__PURE__*/z.object({
  rows: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
    row_id: /*#__PURE__*/z.string(),
    value: /*#__PURE__*/z.record(/*#__PURE__*/z.union([z.string(), z.number(), z["boolean"](), z.object({
      type: z.literal("datetime"),
      epoch: z.number()
    })]).nullable())
  })),
  truncate: /*#__PURE__*/z["boolean"]().optional()
});
var PostTableParentsRequestSchema = /*#__PURE__*/z.object({
  parent_id: /*#__PURE__*/z.string().nullable().optional(),
  parents: /*#__PURE__*/z.array(/*#__PURE__*/z.string())
});
var UpsertTableFromCsvRequestSchema = /*#__PURE__*/z.object({
  name: /*#__PURE__*/z.string(),
  description: /*#__PURE__*/z.string(),
  timestamp: /*#__PURE__*/z.number().nullable().optional(),
  tags: /*#__PURE__*/z.array(z.string()).nullable().optional(),
  parentId: /*#__PURE__*/z.string().nullable().optional(),
  parents: /*#__PURE__*/z.array(z.string()).nullable().optional(),
  truncate: /*#__PURE__*/z["boolean"](),
  async: /*#__PURE__*/z["boolean"]().optional(),
  title: /*#__PURE__*/z.string(),
  mimeType: /*#__PURE__*/z.string(),
  sourceUrl: /*#__PURE__*/z.string().nullable().optional(),
  tableId: /*#__PURE__*/z.string(),
  fileId: /*#__PURE__*/z.string()
});
var UpsertDatabaseTableRequestSchema = /*#__PURE__*/z.object({
  table_id: /*#__PURE__*/z.string().optional(),
  name: /*#__PURE__*/z.string(),
  description: /*#__PURE__*/z.string(),
  timestamp: /*#__PURE__*/z.number().nullable().optional(),
  tags: /*#__PURE__*/z.array(z.string()).nullable().optional(),
  parent_id: /*#__PURE__*/z.string().nullable().optional(),
  parents: /*#__PURE__*/z.array(z.string()).nullable().optional(),
  remote_database_table_id: /*#__PURE__*/z.string().nullable().optional(),
  remote_database_secret_id: /*#__PURE__*/z.string().nullable().optional(),
  title: /*#__PURE__*/z.string(),
  mime_type: /*#__PURE__*/z.string().nullable().optional(),
  source_url: /*#__PURE__*/z.string().nullable().optional()
});
var SupportedUsageTablesSchema = /*#__PURE__*/FlexibleEnumSchema();
// Folders
var CoreAPIFolderSchema = /*#__PURE__*/z.object({
  data_source_id: /*#__PURE__*/z.string(),
  folder_id: /*#__PURE__*/z.string(),
  title: /*#__PURE__*/z.string(),
  parents: /*#__PURE__*/z.array(/*#__PURE__*/z.string()),
  timestamp: /*#__PURE__*/z.number()
});
var GetFoldersResponseSchema = /*#__PURE__*/z.object({
  folders: /*#__PURE__*/z.array(CoreAPIFolderSchema),
  total: /*#__PURE__*/z.number()
});
var GetFolderResponseSchema = /*#__PURE__*/z.object({
  folder: CoreAPIFolderSchema
});
var DeleteFolderResponseSchema = /*#__PURE__*/z.object({
  folder: /*#__PURE__*/z.object({
    folder_id: /*#__PURE__*/z.string()
  })
});
var UpsertFolderResponseSchema = /*#__PURE__*/z.object({
  folder: CoreAPIFolderSchema,
  data_source: DataSourceTypeSchema
});
var ProviderVisibilitySchema = /*#__PURE__*/FlexibleEnumSchema();
var UpsertDataSourceFolderRequestSchema = /*#__PURE__*/z.object({
  timestamp: /*#__PURE__*/z.number(),
  parents: /*#__PURE__*/z.array(z.string()).nullable().optional(),
  parent_id: /*#__PURE__*/z.string().nullable().optional(),
  title: /*#__PURE__*/z.string(),
  mime_type: /*#__PURE__*/z.string(),
  source_url: /*#__PURE__*/z.string().nullable().optional(),
  provider_visibility: /*#__PURE__*/ProviderVisibilitySchema.nullable().optional()
});
var DateSchema = /*#__PURE__*/z.string().refine(function (s) {
  return /^\d{4}-(0[1-9]|1[0-2])(-([0-2]\d|3[01]))?$/.test(s);
}, "YYYY-MM or YYYY-MM-DD");
var GetWorkspaceUsageRequestSchema = /*#__PURE__*/z.union([/*#__PURE__*/z.object({
  start: DateSchema,
  end: /*#__PURE__*/z.undefined(),
  mode: /*#__PURE__*/z.literal("month"),
  table: SupportedUsageTablesSchema,
  format: /*#__PURE__*/z["enum"](["csv", "json"]).optional()["default"]("csv")
}), /*#__PURE__*/z.object({
  start: DateSchema,
  end: DateSchema,
  mode: /*#__PURE__*/z.literal("range"),
  table: SupportedUsageTablesSchema,
  format: /*#__PURE__*/z["enum"](["csv", "json"]).optional()["default"]("csv")
})]);
var FileUploadUrlRequestSchema = /*#__PURE__*/z.object({
  contentType: SupportedFileContentFragmentTypeSchema,
  fileName: /*#__PURE__*/z.string().max(4096, "File name must be less than 4096 characters"),
  fileSize: /*#__PURE__*/z.number(),
  useCase: /*#__PURE__*/z.union([/*#__PURE__*/z.literal("conversation"), /*#__PURE__*/z.literal("upsert_table")]),
  useCaseMetadata: /*#__PURE__*/z.object({
    conversationId: z.string()
  }).optional()
});
var FileTypeStatusSchema = /*#__PURE__*/FlexibleEnumSchema();
var FileTypeUseCaseSchema = /*#__PURE__*/FlexibleEnumSchema();
var FileTypeSchema = /*#__PURE__*/z.object({
  // TODO(spolu): move this to ModelIdSchema
  id: /*#__PURE__*/z.string(),
  sId: /*#__PURE__*/z.string(),
  contentType: /*#__PURE__*/z.string(),
  downloadUrl: /*#__PURE__*/z.string().optional(),
  fileName: /*#__PURE__*/z.string(),
  fileSize: /*#__PURE__*/z.number(),
  status: FileTypeStatusSchema,
  uploadUrl: /*#__PURE__*/z.string().optional(),
  publicUrl: /*#__PURE__*/z.string().optional(),
  useCase: FileTypeUseCaseSchema
});
var FileTypeWithUploadUrlSchema = /*#__PURE__*/FileTypeSchema.extend({
  uploadUrl: /*#__PURE__*/z.string()
});
var FileUploadRequestResponseSchema = /*#__PURE__*/z.object({
  file: FileTypeWithUploadUrlSchema
});
var FileUploadedRequestResponseSchema = /*#__PURE__*/z.object({
  file: FileTypeSchema
});
var MeResponseSchema = /*#__PURE__*/z.object({
  user: /*#__PURE__*/UserSchema.and(/*#__PURE__*/z.object({
    workspaces: /*#__PURE__*/WorkspaceSchema.array().or(/*#__PURE__*/ExtensionWorkspaceSchema.array())
  }))
});
var CancelMessageGenerationResponseSchema = /*#__PURE__*/z.object({
  success: /*#__PURE__*/z.literal(true)
});
var CancelMessageGenerationRequestSchema = /*#__PURE__*/z.object({
  messageIds: /*#__PURE__*/z.array(/*#__PURE__*/z.string())
});
// Typeguards.
function isRetrievalActionType(action) {
  return action.type === "retrieval_action";
}
function isWebsearchActionType(action) {
  return action.type === "websearch_action";
}
function isTablesQueryActionType(action) {
  return action.type === "tables_query_action";
}
function isDustAppRunActionType(action) {
  return action.type === "dust_app_run_action";
}
function isProcessActionType(action) {
  return action.type === "process_action";
}
function BrowseActionPublicType(action) {
  return action.type === "browse_action";
}
function isReasoningActionType(action) {
  return action.type === "reasoning_action";
}
function isSearchLabelsActionType(action) {
  return action.type === "search_labels_action";
}
function isAgentMention(arg) {
  return arg.configurationId !== undefined;
}
function assertNever(x) {
  throw new Error((typeof x === "object" ? JSON.stringify(x) : x) + " is not of type never. This should never happen.");
}
function removeNulls(arr) {
  return arr.filter(function (v) {
    return v !== null && v !== undefined;
  });
}
function getProviderFromRetrievedDocument(document) {
  if (document.dataSourceView) {
    if (document.dataSourceView.dataSource.connectorProvider === "webcrawler") {
      return "document";
    }
    return document.dataSourceView.dataSource.connectorProvider || "document";
  }
  return "document";
}
function getTitleFromRetrievedDocument(document) {
  var provider = getProviderFromRetrievedDocument(document);
  if (provider === "slack") {
    for (var _iterator = _createForOfIteratorHelperLoose(document.tags), _step; !(_step = _iterator()).done;) {
      var t = _step.value;
      if (t.startsWith("channelName:")) {
        return "#" + t.substring(12);
      }
    }
  }
  for (var _iterator2 = _createForOfIteratorHelperLoose(document.tags), _step2; !(_step2 = _iterator2()).done;) {
    var _t = _step2.value;
    if (_t.startsWith("title:")) {
      return _t.substring(6);
    }
  }
  return document.documentId;
}
var AppsCheckRequestSchema = /*#__PURE__*/z.object({
  apps: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
    appId: /*#__PURE__*/z.string(),
    appHash: /*#__PURE__*/z.string()
  }))
});
var AppsCheckResponseSchema = /*#__PURE__*/z.object({
  apps: /*#__PURE__*/z.array(/*#__PURE__*/z.object({
    appId: /*#__PURE__*/z.string(),
    appHash: /*#__PURE__*/z.string(),
    deployed: /*#__PURE__*/z["boolean"]()
  }))
});
var GetSpacesResponseSchema = /*#__PURE__*/z.object({
  spaces: /*#__PURE__*/z.array(SpaceTypeSchema)
});
var ContentNodeTypeSchema = /*#__PURE__*/z.union([/*#__PURE__*/z.literal("document"), /*#__PURE__*/z.literal("table"), /*#__PURE__*/z.literal("folder")]);
var ContentNodesViewTypeSchema = /*#__PURE__*/z.union([/*#__PURE__*/z.literal("table"), /*#__PURE__*/z.literal("document"), /*#__PURE__*/z.literal("all")]);
var BaseSearchBodySchema = /*#__PURE__*/z.object({
  viewType: ContentNodesViewTypeSchema,
  spaceIds: /*#__PURE__*/z.array(/*#__PURE__*/z.string()),
  includeDataSources: /*#__PURE__*/z["boolean"](),
  limit: /*#__PURE__*/z.number()
});
var TextSearchBodySchema = /*#__PURE__*/z.intersection(BaseSearchBodySchema, /*#__PURE__*/z.object({
  query: /*#__PURE__*/z.string(),
  nodeIds: /*#__PURE__*/z.undefined().optional()
}));
var NodeIdSearchBodySchema = /*#__PURE__*/z.intersection(BaseSearchBodySchema, /*#__PURE__*/z.object({
  nodeIds: /*#__PURE__*/z.array(/*#__PURE__*/z.string()),
  query: /*#__PURE__*/z.undefined().optional()
}));
var SearchRequestBodySchema = /*#__PURE__*/z.union([TextSearchBodySchema, NodeIdSearchBodySchema]);
var ContentNodeSchema = /*#__PURE__*/z.object({
  expandable: /*#__PURE__*/z["boolean"](),
  internalId: /*#__PURE__*/z.string(),
  lastUpdatedAt: /*#__PURE__*/z.number().nullable(),
  mimeType: /*#__PURE__*/z.string(),
  // The direct parent ID of this content node
  parentInternalId: /*#__PURE__*/z.string().nullable(),
  // permission: ConnectorPermissionSchema,
  preventSelection: /*#__PURE__*/z["boolean"]().optional(),
  providerVisibility: /*#__PURE__*/ProviderVisibilitySchema.nullable().optional(),
  sourceUrl: /*#__PURE__*/z.string().nullable().optional(),
  title: /*#__PURE__*/z.string(),
  type: ContentNodeTypeSchema
});
var ContentNodeWithParentSchema = /*#__PURE__*/z.intersection(ContentNodeSchema, /*#__PURE__*/z.object({
  parentsInternalIds: /*#__PURE__*/z.array(z.string()).optional(),
  parentTitle: /*#__PURE__*/z.string().optional().nullable()
}));
var DataSourceContentNodeSchema = /*#__PURE__*/z.intersection(ContentNodeWithParentSchema, /*#__PURE__*/z.object({
  dataSource: DataSourceTypeSchema,
  dataSourceViews: /*#__PURE__*/DataSourceViewSchema.array()
}));
var DataSourceViewContentNodeSchema = /*#__PURE__*/z.intersection(ContentNodeWithParentSchema, /*#__PURE__*/z.object({
  dataSourceView: DataSourceViewSchema
}));
var SearchWarningCodeSchema = /*#__PURE__*/z.literal("truncated-query-clauses");
var PostWorkspaceSearchResponseBodySchema = /*#__PURE__*/z.object({
  nodes: /*#__PURE__*/DataSourceContentNodeSchema.array(),
  warningCode: /*#__PURE__*/SearchWarningCodeSchema.optional().nullable()
});
// TODO(mcp) move somewhere else as we'll need dynamic labels for MCP.
var ACTION_RUNNING_LABELS = {
  browse_action: "Browsing page",
  conversation_include_file_action: "Reading file",
  conversation_list_files_action: "Listing files",
  dust_app_run_action: "Running App",
  process_action: "Extracting data",
  reasoning_action: "Reasoning",
  retrieval_action: "Searching data",
  search_labels_action: "Searching labels",
  tables_query_action: "Querying tables",
  websearch_action: "Searching the web",
  tool_action: "Calling MCP Server"
};

/**
 * This function generates mime types for a given provider and resource types.
 * The mime types are in the format `application/vnd.dust.PROVIDER.RESOURCE_TYPE`.
 * Notes:
 * - The underscores in the provider name are stripped in the generated mime type.
 * - The underscores in the resource type are replaced with dashes in the generated mime type.
 */
function generateConnectorRelativeMimeTypes(_ref) {
  var provider = _ref.provider,
    resourceTypes = _ref.resourceTypes;
  return resourceTypes.reduce(function (acc, s) {
    var _extends2;
    return _extends({}, acc, (_extends2 = {}, _extends2[s] = "application/vnd.dust." + provider.replace("_", "") + "." + s.replace("_", "-").toLowerCase(), _extends2));
  }, {});
}
var CONTENT_NODE_MIME_TYPES = {
  CONFLUENCE: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "confluence",
    resourceTypes: ["SPACE", "PAGE"]
  }),
  GITHUB: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "github",
    resourceTypes: ["REPOSITORY", "CODE_ROOT", "CODE_DIRECTORY", "CODE_FILE",
    // ISSUES is the folder containing all issues.
    "ISSUES",
    // ISSUE is a single issue.
    "ISSUE",
    // DISCUSSIONS is the folder containing all discussions.
    "DISCUSSIONS",
    // DISCUSSION is a single discussion.
    "DISCUSSION"]
  }),
  GOOGLE_DRIVE: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "google_drive",
    // Spreadsheets may contain many sheets, thus resemble folders and are stored as such, but with
    // the special mimeType below.  For files and sheets, we keep Google's mime types.
    resourceTypes: ["SHARED_WITH_ME", "FOLDER", "SPREADSHEET"]
  }),
  INTERCOM: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "intercom",
    resourceTypes: ["COLLECTION", "TEAMS_FOLDER", "CONVERSATION", "TEAM", "ARTICLE", "HELP_CENTER"]
  }),
  MICROSOFT: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "microsoft",
    // Spreadsheets may contain many sheets, thus resemble folders and are
    // stored as such, but with the special mimeType below.
    // For files and sheets, we keep Microsoft's mime types.
    resourceTypes: ["FOLDER", "SPREADSHEET"]
  }),
  NOTION: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "notion",
    resourceTypes: ["UNKNOWN_FOLDER", "SYNCING_FOLDER", "DATABASE", "PAGE"]
  }),
  SLACK: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "slack",
    resourceTypes: ["CHANNEL", "THREAD", "MESSAGES"]
  }),
  SNOWFLAKE: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "snowflake",
    resourceTypes: ["DATABASE", "SCHEMA", "TABLE"]
  }),
  WEBCRAWLER: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "webcrawler",
    resourceTypes: ["FOLDER"] // pages are upserted as text/html, not an internal mime type
  }),
  ZENDESK: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "zendesk",
    resourceTypes: ["BRAND", "HELP_CENTER", "CATEGORY", "ARTICLE",
    // TICKETS is the folder containing all tickets.
    "TICKETS",
    // TICKET is a single ticket.
    "TICKET"]
  }),
  BIGQUERY: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "bigquery",
    resourceTypes: ["DATABASE", "SCHEMA", "TABLE"]
  }),
  SALESFORCE: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "salesforce",
    resourceTypes: ["DATABASE", "SCHEMA", "TABLE"]
  }),
  GONG: /*#__PURE__*/generateConnectorRelativeMimeTypes({
    provider: "gong",
    resourceTypes: ["TRANSCRIPT", "TRANSCRIPT_FOLDER"]
  })
};
var TOOL_INPUT_MIME_TYPES = {
  // If we get other similar mime types we'll add an util function just like above.
  CONFIGURATION: {
    DATA_SOURCE: "application/vnd.dust.data-source-configuration"
  }
};
var INTERNAL_MIME_TYPES = /*#__PURE__*/_extends({}, CONTENT_NODE_MIME_TYPES, TOOL_INPUT_MIME_TYPES);
var INTERNAL_MIME_TYPES_VALUES = /*#__PURE__*/Object.values(CONTENT_NODE_MIME_TYPES).flatMap(function (value) {
  return Object.values(value).map(function (v) {
    return v;
  });
});
function isDustMimeType(mimeType) {
  return INTERNAL_MIME_TYPES_VALUES.includes(mimeType);
}

var textFromResponse = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {
    var stream;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(typeof response.body === "string")) {
            _context.next = 2;
            break;
          }
          return _context.abrupt("return", response.body);
        case 2:
          stream = response.body;
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            var chunks = [];
            stream.on("data", function (chunk) {
              return chunks.push(Buffer.from(chunk));
            });
            stream.on("end", function () {
              return resolve(Buffer.concat(chunks).toString("utf-8"));
            });
            stream.on("error", reject);
          }));
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function textFromResponse(_x) {
    return _ref3.apply(this, arguments);
  };
}();
var axiosNoKeepAlive = /*#__PURE__*/axios.create({
  httpAgent: /*#__PURE__*/new http.Agent({
    keepAlive: false
  }),
  httpsAgent: /*#__PURE__*/new https.Agent({
    keepAlive: false
  })
});
var sanitizedError = function sanitizedError(e) {
  if (axios.isAxiosError(e)) {
    return _extends({}, e, {
      config: undefined
    });
  }
  return e;
};
var DustAPI = /*#__PURE__*/function () {
  /**
   * @param credentials DustAPICrededentials
   */
  function DustAPI(config, credentials, logger, urlOverride) {
    this._url = void 0;
    this._credentials = void 0;
    this._logger = void 0;
    this._urlOverride = void 0;
    this._url = config.url;
    this._credentials = credentials;
    this._logger = logger;
    this._urlOverride = urlOverride;
  }
  var _proto = DustAPI.prototype;
  _proto.workspaceId = function workspaceId() {
    return this._credentials.workspaceId;
  };
  _proto.setWorkspaceId = function setWorkspaceId(workspaceId) {
    this._credentials.workspaceId = workspaceId;
  };
  _proto.apiUrl = function apiUrl() {
    return this._urlOverride ? this._urlOverride : this._url;
  };
  _proto.getApiKey = /*#__PURE__*/function () {
    var _getApiKey = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof this._credentials.apiKey === "function")) {
              _context2.next = 2;
              break;
            }
            return _context2.abrupt("return", this._credentials.apiKey());
          case 2:
            return _context2.abrupt("return", this._credentials.apiKey);
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function getApiKey() {
      return _getApiKey.apply(this, arguments);
    }
    return getApiKey;
  }();
  _proto.baseHeaders = /*#__PURE__*/function () {
    var _baseHeaders = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var headers;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return this.getApiKey();
          case 2:
            _context3.t0 = _context3.sent;
            _context3.t1 = "Bearer " + _context3.t0;
            headers = {
              Authorization: _context3.t1
            };
            if (this._credentials.extraHeaders) {
              Object.assign(headers, this._credentials.extraHeaders);
            }
            return _context3.abrupt("return", headers);
          case 7:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this);
    }));
    function baseHeaders() {
      return _baseHeaders.apply(this, arguments);
    }
    return baseHeaders;
  }()
  /**
   * Fetches the current user's information from the API.
   *
   * This method sends a GET request to the `/api/v1/me` endpoint with the necessary authorization
   * headers. It then processes the response to extract the user information.  Note that this will
   * only work if you are using an OAuth2 token. It will always fail with a workspace API key.
   *
   * @returns {Promise<Result<User, Error>>} A promise that resolves to a Result object containing
   * either the user information or an error.
   */
  ;
  _proto.me =
  /*#__PURE__*/
  function () {
    var _me = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var headers, res, r;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return this.getApiKey();
          case 2:
            _context4.t0 = _context4.sent;
            _context4.t1 = "Bearer " + _context4.t0;
            headers = {
              "Content-Type": "application/json",
              Authorization: _context4.t1
            };
            _context4.next = 7;
            return this._fetchWithError(this.apiUrl() + "/api/v1/me", {
              method: "GET",
              headers: headers
            });
          case 7:
            res = _context4.sent;
            _context4.next = 10;
            return this._resultFromResponse(MeResponseSchema, res);
          case 10:
            r = _context4.sent;
            if (!r.isErr()) {
              _context4.next = 13;
              break;
            }
            return _context4.abrupt("return", r);
          case 13:
            return _context4.abrupt("return", new Ok(r.value.user));
          case 14:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this);
    }));
    function me() {
      return _me.apply(this, arguments);
    }
    return me;
  }();
  _proto.request = /*#__PURE__*/function () {
    var _request = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(args) {
      var _args$overrideWorkspa;
      var url, headers, res;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            // Conveniently clean path from any leading "/" just in case
            args.path = args.path.replace(/^\/+/, "");
            url = this.apiUrl() + "/api/v1/w/" + ((_args$overrideWorkspa = args.overrideWorkspaceId) != null ? _args$overrideWorkspa : this.workspaceId()) + "/" + args.path;
            if (args.query) {
              url += "?" + args.query.toString();
            }
            _context5.next = 5;
            return this.baseHeaders();
          case 5:
            headers = _context5.sent;
            headers["Content-Type"] = "application/json";
            _context5.next = 9;
            return this._fetchWithError(url, {
              method: args.method,
              headers: headers,
              data: args.body ? JSON.stringify(args.body) : undefined,
              signal: args.signal
            });
          case 9:
            res = _context5.sent;
            return _context5.abrupt("return", res);
          case 11:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
    function request(_x2) {
      return _request.apply(this, arguments);
    }
    return request;
  }()
  /**
   * This functions talks directly to the Dust production API to create a run.
   *
   * @param app DustAppType the app to run streamed
   * @param config DustAppConfigType the app config
   * @param inputs any[] the app inputs
   */
  ;
  _proto.runApp =
  /*#__PURE__*/
  function () {
    var _runApp = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref4, config, inputs, _temp) {
      var workspaceId, appId, appHash, appSpaceId, _ref5, useWorkspaceCredentials, res, r;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            workspaceId = _ref4.workspaceId, appId = _ref4.appId, appHash = _ref4.appHash, appSpaceId = _ref4.appSpaceId;
            _ref5 = _temp === void 0 ? {
              useWorkspaceCredentials: false
            } : _temp, useWorkspaceCredentials = _ref5.useWorkspaceCredentials;
            _context6.next = 4;
            return this.request({
              overrideWorkspaceId: workspaceId,
              path: "spaces/" + appSpaceId + "/apps/" + appId + "/runs",
              query: new URLSearchParams({
                use_workspace_credentials: useWorkspaceCredentials ? "true" : "false"
              }),
              method: "POST",
              body: {
                specification_hash: appHash,
                config: config,
                stream: false,
                blocking: true,
                inputs: inputs
              }
            });
          case 4:
            res = _context6.sent;
            _context6.next = 7;
            return this._resultFromResponse(RunAppResponseSchema, res);
          case 7:
            r = _context6.sent;
            if (!r.isErr()) {
              _context6.next = 10;
              break;
            }
            return _context6.abrupt("return", r);
          case 10:
            return _context6.abrupt("return", new Ok(r.value.run));
          case 11:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
    function runApp(_x3, _x4, _x5, _x6) {
      return _runApp.apply(this, arguments);
    }
    return runApp;
  }()
  /**
   * This functions talks directly to the Dust production API to create a streamed run.
   *
   * @param app DustAppType the app to run streamed
   * @param config DustAppConfigType the app config
   * @param inputs any[] the app inputs
   */
  ;
  _proto.runAppStreamed =
  /*#__PURE__*/
  function () {
    var _runAppStreamed = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref6, config,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    inputs, _temp2) {
      var workspaceId, appId, appHash, appSpaceId, _ref7, useWorkspaceCredentials, res, processStreamedRunResponse, _processStreamedRunResponse;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            _processStreamedRunResponse = function _processStreamedRunRe2() {
              _processStreamedRunResponse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(res, logger) {
                var hasRunId, rejectDustRunIdPromise, resolveDustRunIdPromise, dustRunIdPromise, pendingEvents, parser, reader, streamEvents;
                return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                  while (1) switch (_context8.prev = _context8.next) {
                    case 0:
                      if (!(!res.ok || !res.body)) {
                        _context8.next = 2;
                        break;
                      }
                      return _context8.abrupt("return", new Err({
                        type: "dust_api_error",
                        message: "Error running streamed app: status_code=" + res.status
                      }));
                    case 2:
                      hasRunId = false;
                      dustRunIdPromise = new Promise(function (resolve, reject) {
                        rejectDustRunIdPromise = reject;
                        resolveDustRunIdPromise = resolve;
                      });
                      pendingEvents = [];
                      parser = createParser(function (event) {
                        if (event.type === "event") {
                          if (event.data) {
                            try {
                              var _data$content;
                              var data = JSON.parse(event.data);
                              switch (data.type) {
                                case "error":
                                  {
                                    pendingEvents.push({
                                      type: "error",
                                      content: {
                                        code: data.content.code,
                                        message: data.content.message
                                      }
                                    });
                                    break;
                                  }
                                case "run_status":
                                  {
                                    pendingEvents.push({
                                      type: data.type,
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "block_status":
                                  {
                                    pendingEvents.push({
                                      type: data.type,
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "block_execution":
                                  {
                                    pendingEvents.push({
                                      type: data.type,
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "tokens":
                                  {
                                    pendingEvents.push({
                                      type: "tokens",
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "function_call":
                                  {
                                    pendingEvents.push({
                                      type: "function_call",
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "function_call_arguments_tokens":
                                  {
                                    pendingEvents.push({
                                      type: "function_call_arguments_tokens",
                                      content: data.content
                                    });
                                    break;
                                  }
                                case "final":
                                  {
                                    pendingEvents.push({
                                      type: "final"
                                    });
                                  }
                              }
                              if ((_data$content = data.content) != null && _data$content.run_id && !hasRunId) {
                                hasRunId = true;
                                resolveDustRunIdPromise(data.content.run_id);
                              }
                            } catch (err) {
                              logger.error({
                                error: err
                              }, "Failed parsing chunk from Dust API");
                            }
                          }
                        }
                      });
                      reader = res.body;
                      streamEvents = /*#__PURE__*/function () {
                        var _ref = _wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
                          var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, _i, _pendingEvents, event;
                          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                            while (1) switch (_context7.prev = _context7.next) {
                              case 0:
                                _context7.prev = 0;
                                _iteratorAbruptCompletion = false;
                                _didIteratorError = false;
                                _context7.prev = 3;
                                _iterator = _asyncIterator(reader);
                              case 5:
                                _context7.next = 7;
                                return _awaitAsyncGenerator(_iterator.next());
                              case 7:
                                if (!(_iteratorAbruptCompletion = !(_step = _context7.sent).done)) {
                                  _context7.next = 22;
                                  break;
                                }
                                chunk = _step.value;
                                parser.feed(new TextDecoder().decode(chunk));
                                _i = 0, _pendingEvents = pendingEvents;
                              case 11:
                                if (!(_i < _pendingEvents.length)) {
                                  _context7.next = 18;
                                  break;
                                }
                                event = _pendingEvents[_i];
                                _context7.next = 15;
                                return event;
                              case 15:
                                _i++;
                                _context7.next = 11;
                                break;
                              case 18:
                                pendingEvents = [];
                              case 19:
                                _iteratorAbruptCompletion = false;
                                _context7.next = 5;
                                break;
                              case 22:
                                _context7.next = 28;
                                break;
                              case 24:
                                _context7.prev = 24;
                                _context7.t0 = _context7["catch"](3);
                                _didIteratorError = true;
                                _iteratorError = _context7.t0;
                              case 28:
                                _context7.prev = 28;
                                _context7.prev = 29;
                                if (!(_iteratorAbruptCompletion && _iterator["return"] != null)) {
                                  _context7.next = 33;
                                  break;
                                }
                                _context7.next = 33;
                                return _awaitAsyncGenerator(_iterator["return"]());
                              case 33:
                                _context7.prev = 33;
                                if (!_didIteratorError) {
                                  _context7.next = 36;
                                  break;
                                }
                                throw _iteratorError;
                              case 36:
                                return _context7.finish(33);
                              case 37:
                                return _context7.finish(28);
                              case 38:
                                // while (true) {
                                //   const { done, value } = await reader.read();
                                //   if (done) {
                                //     break;
                                //   }
                                //   parser.feed(new TextDecoder().decode(value));
                                //   for (const event of pendingEvents) {
                                //     yield event;
                                //   }
                                //   pendingEvents = [];
                                // }
                                if (!hasRunId) {
                                  // Once the stream is entirely consumed, if we haven't received a run id, reject the
                                  // promise.
                                  setImmediate(function () {
                                    logger.error({}, "No run id received.");
                                    rejectDustRunIdPromise(new Error("No run id received"));
                                  });
                                }
                                _context7.next = 46;
                                break;
                              case 41:
                                _context7.prev = 41;
                                _context7.t1 = _context7["catch"](0);
                                logger.error({
                                  error: _context7.t1,
                                  errorStr: JSON.stringify(_context7.t1),
                                  errorSource: "processStreamedRunResponse"
                                }, "DustAPI error: streaming chunks");
                                _context7.next = 46;
                                return {
                                  type: "error",
                                  content: {
                                    code: "stream_error",
                                    message: "Error streaming chunks"
                                  }
                                };
                              case 46:
                              case "end":
                                return _context7.stop();
                            }
                          }, _callee7, null, [[0, 41], [3, 24, 28, 38], [29,, 33, 37]]);
                        }));
                        return function streamEvents() {
                          return _ref.apply(this, arguments);
                        };
                      }();
                      return _context8.abrupt("return", new Ok({
                        eventStream: streamEvents(),
                        dustRunId: dustRunIdPromise
                      }));
                    case 9:
                    case "end":
                      return _context8.stop();
                  }
                }, _callee8);
              }));
              return _processStreamedRunResponse.apply(this, arguments);
            };
            processStreamedRunResponse = function _processStreamedRunRe(_x11, _x12) {
              return _processStreamedRunResponse.apply(this, arguments);
            };
            workspaceId = _ref6.workspaceId, appId = _ref6.appId, appHash = _ref6.appHash, appSpaceId = _ref6.appSpaceId;
            _ref7 = _temp2 === void 0 ? {
              useWorkspaceCredentials: false
            } : _temp2, useWorkspaceCredentials = _ref7.useWorkspaceCredentials;
            _context9.next = 6;
            return this.request({
              overrideWorkspaceId: workspaceId,
              path: "spaces/" + appSpaceId + "/apps/" + appId + "/runs",
              query: new URLSearchParams({
                use_workspace_credentials: useWorkspaceCredentials ? "true" : "false"
              }),
              method: "POST",
              body: {
                specification_hash: appHash,
                config: config,
                stream: true,
                blocking: false,
                inputs: inputs
              }
            });
          case 6:
            res = _context9.sent;
            if (!res.isErr()) {
              _context9.next = 9;
              break;
            }
            return _context9.abrupt("return", res);
          case 9:
            return _context9.abrupt("return", processStreamedRunResponse(res.value.response, this._logger));
          case 10:
          case "end":
            return _context9.stop();
        }
      }, _callee9, this);
    }));
    function runAppStreamed(_x7, _x8, _x9, _x10) {
      return _runAppStreamed.apply(this, arguments);
    }
    return runAppStreamed;
  }()
  /**
   * This actions talks to the Dust production API to retrieve the list of data sources of the
   * current workspace.
   */
  ;
  _proto.getDataSources =
  /*#__PURE__*/
  function () {
    var _getDataSources = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return this.request({
              method: "GET",
              path: "data_sources"
            });
          case 2:
            res = _context10.sent;
            _context10.next = 5;
            return this._resultFromResponse(GetDataSourcesResponseSchema, res);
          case 5:
            r = _context10.sent;
            if (!r.isErr()) {
              _context10.next = 8;
              break;
            }
            return _context10.abrupt("return", r);
          case 8:
            return _context10.abrupt("return", new Ok(r.value.data_sources));
          case 9:
          case "end":
            return _context10.stop();
        }
      }, _callee10, this);
    }));
    function getDataSources() {
      return _getDataSources.apply(this, arguments);
    }
    return getDataSources;
  }();
  _proto.getAgentConfigurations = /*#__PURE__*/function () {
    var _getAgentConfigurations = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(_ref8) {
      var view, _ref8$includes, includes, getQueryString, queryString, path, res, r;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            getQueryString = function _getQueryString() {
              var params = new URLSearchParams();
              if (typeof view === "string") {
                params.append("view", view);
              }
              if (includes.includes("authors")) {
                params.append("withAuthors", "true");
              }
              return params.toString();
            };
            view = _ref8.view, _ref8$includes = _ref8.includes, includes = _ref8$includes === void 0 ? [] : _ref8$includes; // Function to generate query parameters.
            queryString = view || includes.length > 0 ? getQueryString() : null;
            path = queryString ? "assistant/agent_configurations?" + queryString : "assistant/agent_configurations";
            _context11.next = 6;
            return this.request({
              path: path,
              method: "GET"
            });
          case 6:
            res = _context11.sent;
            _context11.next = 9;
            return this._resultFromResponse(GetAgentConfigurationsResponseSchema, res);
          case 9:
            r = _context11.sent;
            if (!r.isErr()) {
              _context11.next = 12;
              break;
            }
            return _context11.abrupt("return", r);
          case 12:
            return _context11.abrupt("return", new Ok(r.value.agentConfigurations));
          case 13:
          case "end":
            return _context11.stop();
        }
      }, _callee11, this);
    }));
    function getAgentConfigurations(_x13) {
      return _getAgentConfigurations.apply(this, arguments);
    }
    return getAgentConfigurations;
  }();
  _proto.postContentFragment = /*#__PURE__*/function () {
    var _postContentFragment = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref9) {
      var conversationId, contentFragment, res, r;
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            conversationId = _ref9.conversationId, contentFragment = _ref9.contentFragment;
            _context12.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/content_fragments",
              body: _extends({}, contentFragment)
            });
          case 3:
            res = _context12.sent;
            _context12.next = 6;
            return this._resultFromResponse(PostContentFragmentResponseSchema, res);
          case 6:
            r = _context12.sent;
            if (!r.isErr()) {
              _context12.next = 9;
              break;
            }
            return _context12.abrupt("return", r);
          case 9:
            return _context12.abrupt("return", new Ok(r.value.contentFragment));
          case 10:
          case "end":
            return _context12.stop();
        }
      }, _callee12, this);
    }));
    function postContentFragment(_x14) {
      return _postContentFragment.apply(this, arguments);
    }
    return postContentFragment;
  }() // When creating a conversation with a user message, the API returns only after the user message
  // was created (and if applicable the associated agent messages).
  ;
  _proto.createConversation =
  /*#__PURE__*/
  function () {
    var _createConversation = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(_ref10) {
      var title, visibility, message, contentFragment, contentFragments, _ref10$blocking, blocking, res;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            title = _ref10.title, visibility = _ref10.visibility, message = _ref10.message, contentFragment = _ref10.contentFragment, contentFragments = _ref10.contentFragments, _ref10$blocking = _ref10.blocking, blocking = _ref10$blocking === void 0 ? false : _ref10$blocking;
            _context13.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/conversations",
              body: {
                title: title,
                visibility: visibility,
                message: message,
                contentFragment: contentFragment,
                contentFragments: contentFragments,
                blocking: blocking
              }
            });
          case 3:
            res = _context13.sent;
            return _context13.abrupt("return", this._resultFromResponse(CreateConversationResponseSchema, res));
          case 5:
          case "end":
            return _context13.stop();
        }
      }, _callee13, this);
    }));
    function createConversation(_x15) {
      return _createConversation.apply(this, arguments);
    }
    return createConversation;
  }();
  _proto.postUserMessage = /*#__PURE__*/function () {
    var _postUserMessage = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref11) {
      var conversationId, message, res, r;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            conversationId = _ref11.conversationId, message = _ref11.message;
            _context14.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/messages",
              body: _extends({}, message)
            });
          case 3:
            res = _context14.sent;
            _context14.next = 6;
            return this._resultFromResponse(PostUserMessageResponseSchema, res);
          case 6:
            r = _context14.sent;
            if (!r.isErr()) {
              _context14.next = 9;
              break;
            }
            return _context14.abrupt("return", r);
          case 9:
            return _context14.abrupt("return", new Ok(r.value.message));
          case 10:
          case "end":
            return _context14.stop();
        }
      }, _callee14, this);
    }));
    function postUserMessage(_x16) {
      return _postUserMessage.apply(this, arguments);
    }
    return postUserMessage;
  }();
  _proto.streamAgentAnswerEvents = /*#__PURE__*/function () {
    var _streamAgentAnswerEvents = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(_ref12) {
      var conversation, userMessageId, signal, agentMessages, agentMessage;
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            conversation = _ref12.conversation, userMessageId = _ref12.userMessageId, signal = _ref12.signal;
            // find the agent message with the parentMessageId equal to the user message id
            agentMessages = conversation.content.map(function (versions) {
              var m = versions[versions.length - 1];
              return m;
            }).filter(function (m) {
              return m && m.type === "agent_message" && m.parentMessageId === userMessageId;
            });
            if (!(agentMessages.length === 0)) {
              _context15.next = 4;
              break;
            }
            return _context15.abrupt("return", new Err(new Error("Failed to retrieve agent message")));
          case 4:
            agentMessage = agentMessages[0];
            return _context15.abrupt("return", this.streamAgentMessageEvents({
              conversation: conversation,
              agentMessage: agentMessage,
              signal: signal
            }));
          case 6:
          case "end":
            return _context15.stop();
        }
      }, _callee15, this);
    }));
    function streamAgentAnswerEvents(_x17) {
      return _streamAgentAnswerEvents.apply(this, arguments);
    }
    return streamAgentAnswerEvents;
  }();
  _proto.streamAgentMessageEvents = /*#__PURE__*/function () {
    var _streamAgentMessageEvents = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17(_ref13) {
      var _this = this;
      var conversation, agentMessage, signal, res, pendingEvents, parser, reader, logger, streamEvents;
      return _regeneratorRuntime().wrap(function _callee17$(_context17) {
        while (1) switch (_context17.prev = _context17.next) {
          case 0:
            conversation = _ref13.conversation, agentMessage = _ref13.agentMessage, signal = _ref13.signal;
            _context17.next = 3;
            return this.request({
              method: "GET",
              path: "assistant/conversations/" + conversation.sId + "/messages/" + agentMessage.sId + "/events",
              signal: signal
            });
          case 3:
            res = _context17.sent;
            if (!res.isErr()) {
              _context17.next = 6;
              break;
            }
            return _context17.abrupt("return", res);
          case 6:
            if (!(!res.value.response.ok || !res.value.response.body)) {
              _context17.next = 15;
              break;
            }
            _context17.t0 = Err;
            _context17.t1 = "Error running streamed app: status_code=" + res.value.response.status + "  - message=";
            _context17.next = 11;
            return textFromResponse(res.value.response);
          case 11:
            _context17.t2 = _context17.sent;
            _context17.t3 = _context17.t1 + _context17.t2;
            _context17.t4 = {
              type: "dust_api_error",
              message: _context17.t3
            };
            return _context17.abrupt("return", new _context17.t0(_context17.t4));
          case 15:
            pendingEvents = [];
            parser = createParser(function (event) {
              if (event.type === "event") {
                if (event.data) {
                  try {
                    var data = JSON.parse(event.data).data;
                    // TODO: shall we use the schema to validate the data?
                    switch (data.type) {
                      case "user_message_error":
                        {
                          pendingEvents.push(data);
                          break;
                        }
                      case "agent_error":
                        {
                          pendingEvents.push(data);
                          break;
                        }
                      case "agent_action_success":
                        {
                          pendingEvents.push(data);
                          break;
                        }
                      case "generation_tokens":
                        {
                          pendingEvents.push(data);
                          break;
                        }
                      case "agent_message_success":
                        {
                          pendingEvents.push(data);
                          break;
                        }
                      case "browse_params":
                      case "dust_app_run_block":
                      case "dust_app_run_params":
                      case "process_params":
                      case "retrieval_params":
                      case "search_labels_params":
                      case "tables_query_output":
                      case "tables_query_params":
                      case "websearch_params":
                        pendingEvents.push(data);
                        break;
                    }
                  } catch (err) {
                    _this._logger.error({
                      error: err
                    }, "Failed parsing chunk from Dust API");
                  }
                }
              }
            });
            reader = res.value.response.body;
            logger = this._logger;
            streamEvents = /*#__PURE__*/function () {
              var _ref2 = _wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
                var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, chunk, _i2, _pendingEvents2, event;
                return _regeneratorRuntime().wrap(function _callee16$(_context16) {
                  while (1) switch (_context16.prev = _context16.next) {
                    case 0:
                      _context16.prev = 0;
                      _iteratorAbruptCompletion2 = false;
                      _didIteratorError2 = false;
                      _context16.prev = 3;
                      _iterator2 = _asyncIterator(reader);
                    case 5:
                      _context16.next = 7;
                      return _awaitAsyncGenerator(_iterator2.next());
                    case 7:
                      if (!(_iteratorAbruptCompletion2 = !(_step2 = _context16.sent).done)) {
                        _context16.next = 22;
                        break;
                      }
                      chunk = _step2.value;
                      parser.feed(new TextDecoder().decode(chunk));
                      _i2 = 0, _pendingEvents2 = pendingEvents;
                    case 11:
                      if (!(_i2 < _pendingEvents2.length)) {
                        _context16.next = 18;
                        break;
                      }
                      event = _pendingEvents2[_i2];
                      _context16.next = 15;
                      return event;
                    case 15:
                      _i2++;
                      _context16.next = 11;
                      break;
                    case 18:
                      pendingEvents = [];
                    case 19:
                      _iteratorAbruptCompletion2 = false;
                      _context16.next = 5;
                      break;
                    case 22:
                      _context16.next = 28;
                      break;
                    case 24:
                      _context16.prev = 24;
                      _context16.t0 = _context16["catch"](3);
                      _didIteratorError2 = true;
                      _iteratorError2 = _context16.t0;
                    case 28:
                      _context16.prev = 28;
                      _context16.prev = 29;
                      if (!(_iteratorAbruptCompletion2 && _iterator2["return"] != null)) {
                        _context16.next = 33;
                        break;
                      }
                      _context16.next = 33;
                      return _awaitAsyncGenerator(_iterator2["return"]());
                    case 33:
                      _context16.prev = 33;
                      if (!_didIteratorError2) {
                        _context16.next = 36;
                        break;
                      }
                      throw _iteratorError2;
                    case 36:
                      return _context16.finish(33);
                    case 37:
                      return _context16.finish(28);
                    case 38:
                      _context16.next = 45;
                      break;
                    case 40:
                      _context16.prev = 40;
                      _context16.t1 = _context16["catch"](0);
                      logger.error({
                        error: _context16.t1,
                        errorStr: JSON.stringify(_context16.t1),
                        errorSource: "streamAgentAnswerEvents"
                      }, "DustAPI error: streaming chunks");
                      _context16.next = 45;
                      return {
                        type: "error",
                        content: {
                          code: "stream_error",
                          message: "Error streaming chunks"
                        }
                      };
                    case 45:
                    case "end":
                      return _context16.stop();
                  }
                }, _callee16, null, [[0, 40], [3, 24, 28, 38], [29,, 33, 37]]);
              }));
              return function streamEvents() {
                return _ref2.apply(this, arguments);
              };
            }();
            return _context17.abrupt("return", new Ok({
              eventStream: streamEvents()
            }));
          case 21:
          case "end":
            return _context17.stop();
        }
      }, _callee17, this);
    }));
    function streamAgentMessageEvents(_x18) {
      return _streamAgentMessageEvents.apply(this, arguments);
    }
    return streamAgentMessageEvents;
  }();
  _proto.cancelMessageGeneration = /*#__PURE__*/function () {
    var _cancelMessageGeneration = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18(_ref14) {
      var conversationId, messageIds, res, r;
      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
        while (1) switch (_context18.prev = _context18.next) {
          case 0:
            conversationId = _ref14.conversationId, messageIds = _ref14.messageIds;
            _context18.next = 3;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/cancel",
              body: {
                messageIds: messageIds
              }
            });
          case 3:
            res = _context18.sent;
            _context18.next = 6;
            return this._resultFromResponse(CancelMessageGenerationResponseSchema, res);
          case 6:
            r = _context18.sent;
            if (!r.isErr()) {
              _context18.next = 11;
              break;
            }
            return _context18.abrupt("return", r);
          case 11:
            return _context18.abrupt("return", new Ok(r.value));
          case 12:
          case "end":
            return _context18.stop();
        }
      }, _callee18, this);
    }));
    function cancelMessageGeneration(_x19) {
      return _cancelMessageGeneration.apply(this, arguments);
    }
    return cancelMessageGeneration;
  }();
  _proto.getConversations = /*#__PURE__*/function () {
    var _getConversations = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee19$(_context19) {
        while (1) switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return this.request({
              method: "GET",
              path: "assistant/conversations"
            });
          case 2:
            res = _context19.sent;
            _context19.next = 5;
            return this._resultFromResponse(GetConversationsResponseSchema, res);
          case 5:
            r = _context19.sent;
            if (!r.isErr()) {
              _context19.next = 8;
              break;
            }
            return _context19.abrupt("return", r);
          case 8:
            return _context19.abrupt("return", new Ok(r.value.conversations));
          case 9:
          case "end":
            return _context19.stop();
        }
      }, _callee19, this);
    }));
    function getConversations() {
      return _getConversations.apply(this, arguments);
    }
    return getConversations;
  }();
  _proto.getConversation = /*#__PURE__*/function () {
    var _getConversation = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee20(_ref15) {
      var conversationId, res, r;
      return _regeneratorRuntime().wrap(function _callee20$(_context20) {
        while (1) switch (_context20.prev = _context20.next) {
          case 0:
            conversationId = _ref15.conversationId;
            _context20.next = 3;
            return this.request({
              method: "GET",
              path: "assistant/conversations/" + conversationId
            });
          case 3:
            res = _context20.sent;
            _context20.next = 6;
            return this._resultFromResponse(GetConversationResponseSchema, res);
          case 6:
            r = _context20.sent;
            if (!r.isErr()) {
              _context20.next = 9;
              break;
            }
            return _context20.abrupt("return", r);
          case 9:
            return _context20.abrupt("return", new Ok(r.value.conversation));
          case 10:
          case "end":
            return _context20.stop();
        }
      }, _callee20, this);
    }));
    function getConversation(_x20) {
      return _getConversation.apply(this, arguments);
    }
    return getConversation;
  }();
  _proto.getConversationFeedback = /*#__PURE__*/function () {
    var _getConversationFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee21(_ref16) {
      var conversationId, res, r;
      return _regeneratorRuntime().wrap(function _callee21$(_context21) {
        while (1) switch (_context21.prev = _context21.next) {
          case 0:
            conversationId = _ref16.conversationId;
            _context21.next = 3;
            return this.request({
              method: "GET",
              path: "assistant/conversations/" + conversationId + "/feedbacks"
            });
          case 3:
            res = _context21.sent;
            _context21.next = 6;
            return this._resultFromResponse(GetFeedbacksResponseSchema, res);
          case 6:
            r = _context21.sent;
            if (!r.isErr()) {
              _context21.next = 9;
              break;
            }
            return _context21.abrupt("return", r);
          case 9:
            return _context21.abrupt("return", new Ok(r.value.feedbacks));
          case 10:
          case "end":
            return _context21.stop();
        }
      }, _callee21, this);
    }));
    function getConversationFeedback(_x21) {
      return _getConversationFeedback.apply(this, arguments);
    }
    return getConversationFeedback;
  }();
  _proto.postFeedback = /*#__PURE__*/function () {
    var _postFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee22(conversationId, messageId, feedback) {
      var res;
      return _regeneratorRuntime().wrap(function _callee22$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return this.request({
              method: "POST",
              path: "assistant/conversations/" + conversationId + "/messages/" + messageId + "/feedbacks",
              body: feedback
            });
          case 2:
            res = _context22.sent;
            return _context22.abrupt("return", this._resultFromResponse(PostMessageFeedbackResponseSchema, res));
          case 4:
          case "end":
            return _context22.stop();
        }
      }, _callee22, this);
    }));
    function postFeedback(_x22, _x23, _x24) {
      return _postFeedback.apply(this, arguments);
    }
    return postFeedback;
  }();
  _proto.deleteFeedback = /*#__PURE__*/function () {
    var _deleteFeedback = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee23(conversationId, messageId) {
      var res;
      return _regeneratorRuntime().wrap(function _callee23$(_context23) {
        while (1) switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return this.request({
              method: "DELETE",
              path: "assistant/conversations/" + conversationId + "/messages/" + messageId + "/feedbacks"
            });
          case 2:
            res = _context23.sent;
            return _context23.abrupt("return", this._resultFromResponse(PostMessageFeedbackResponseSchema, res));
          case 4:
          case "end":
            return _context23.stop();
        }
      }, _callee23, this);
    }));
    function deleteFeedback(_x25, _x26) {
      return _deleteFeedback.apply(this, arguments);
    }
    return deleteFeedback;
  }();
  _proto.tokenize = /*#__PURE__*/function () {
    var _tokenize = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee24(text, dataSourceId) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee24$(_context24) {
        while (1) switch (_context24.prev = _context24.next) {
          case 0:
            _context24.next = 2;
            return this.request({
              method: "POST",
              path: "data_sources/" + dataSourceId + "/tokenize",
              body: {
                text: text
              }
            });
          case 2:
            res = _context24.sent;
            _context24.next = 5;
            return this._resultFromResponse(TokenizeResponseSchema, res);
          case 5:
            r = _context24.sent;
            if (!r.isErr()) {
              _context24.next = 8;
              break;
            }
            return _context24.abrupt("return", r);
          case 8:
            return _context24.abrupt("return", new Ok(r.value.tokens));
          case 9:
          case "end":
            return _context24.stop();
        }
      }, _callee24, this);
    }));
    function tokenize(_x27, _x28) {
      return _tokenize.apply(this, arguments);
    }
    return tokenize;
  }();
  _proto.upsertFolder = /*#__PURE__*/function () {
    var _upsertFolder = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee25(_ref17) {
      var dataSourceId, folderId, timestamp, title, parentId, parents, mimeType, sourceUrl, providerVisibility, res, r;
      return _regeneratorRuntime().wrap(function _callee25$(_context25) {
        while (1) switch (_context25.prev = _context25.next) {
          case 0:
            dataSourceId = _ref17.dataSourceId, folderId = _ref17.folderId, timestamp = _ref17.timestamp, title = _ref17.title, parentId = _ref17.parentId, parents = _ref17.parents, mimeType = _ref17.mimeType, sourceUrl = _ref17.sourceUrl, providerVisibility = _ref17.providerVisibility;
            _context25.next = 3;
            return this.request({
              method: "POST",
              path: "data_sources/" + dataSourceId + "/folders/" + encodeURIComponent(folderId),
              body: {
                timestamp: Math.floor(timestamp),
                title: title,
                parent_id: parentId,
                parents: parents,
                mime_type: mimeType,
                source_url: sourceUrl,
                provider_visibility: providerVisibility
              }
            });
          case 3:
            res = _context25.sent;
            _context25.next = 6;
            return this._resultFromResponse(UpsertFolderResponseSchema, res);
          case 6:
            r = _context25.sent;
            if (!r.isErr()) {
              _context25.next = 9;
              break;
            }
            return _context25.abrupt("return", r);
          case 9:
            return _context25.abrupt("return", new Ok(r.value));
          case 10:
          case "end":
            return _context25.stop();
        }
      }, _callee25, this);
    }));
    function upsertFolder(_x29) {
      return _upsertFolder.apply(this, arguments);
    }
    return upsertFolder;
  }();
  _proto.deleteFolder = /*#__PURE__*/function () {
    var _deleteFolder = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee26(_ref18) {
      var dataSourceId, folderId, res, r;
      return _regeneratorRuntime().wrap(function _callee26$(_context26) {
        while (1) switch (_context26.prev = _context26.next) {
          case 0:
            dataSourceId = _ref18.dataSourceId, folderId = _ref18.folderId;
            _context26.next = 3;
            return this.request({
              method: "DELETE",
              path: "data_sources/" + dataSourceId + "/folders/" + encodeURIComponent(folderId)
            });
          case 3:
            res = _context26.sent;
            _context26.next = 6;
            return this._resultFromResponse(DeleteFolderResponseSchema, res);
          case 6:
            r = _context26.sent;
            if (!r.isErr()) {
              _context26.next = 9;
              break;
            }
            return _context26.abrupt("return", r);
          case 9:
            return _context26.abrupt("return", new Ok(r.value));
          case 10:
          case "end":
            return _context26.stop();
        }
      }, _callee26, this);
    }));
    function deleteFolder(_x30) {
      return _deleteFolder.apply(this, arguments);
    }
    return deleteFolder;
  }();
  _proto.uploadFile = /*#__PURE__*/function () {
    var _uploadFile = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee27(_ref19) {
      var contentType, fileName, fileSize, useCase, useCaseMetadata, fileObject, res, fileRes, file, formData, _yield$axiosNoKeepAli, fileUploaded, _err$response;
      return _regeneratorRuntime().wrap(function _callee27$(_context27) {
        while (1) switch (_context27.prev = _context27.next) {
          case 0:
            contentType = _ref19.contentType, fileName = _ref19.fileName, fileSize = _ref19.fileSize, useCase = _ref19.useCase, useCaseMetadata = _ref19.useCaseMetadata, fileObject = _ref19.fileObject;
            _context27.next = 3;
            return this.request({
              method: "POST",
              path: "files",
              body: {
                contentType: contentType,
                fileName: fileName,
                fileSize: fileSize,
                useCase: useCase,
                useCaseMetadata: useCaseMetadata
              }
            });
          case 3:
            res = _context27.sent;
            _context27.next = 6;
            return this._resultFromResponse(FileUploadRequestResponseSchema, res);
          case 6:
            fileRes = _context27.sent;
            if (!fileRes.isErr()) {
              _context27.next = 9;
              break;
            }
            return _context27.abrupt("return", fileRes);
          case 9:
            file = fileRes.value.file;
            formData = new FormData();
            formData.append("file", fileObject);
            // Upload file to the obtained URL.
            _context27.prev = 12;
            _context27.t0 = axiosNoKeepAlive;
            _context27.t1 = file.uploadUrl;
            _context27.t2 = formData;
            _context27.next = 18;
            return this.baseHeaders();
          case 18:
            _context27.t3 = _context27.sent;
            _context27.t4 = {
              headers: _context27.t3
            };
            _context27.next = 22;
            return _context27.t0.post.call(_context27.t0, _context27.t1, _context27.t2, _context27.t4);
          case 22:
            _yield$axiosNoKeepAli = _context27.sent;
            fileUploaded = _yield$axiosNoKeepAli.data.file;
            return _context27.abrupt("return", new Ok(fileUploaded));
          case 27:
            _context27.prev = 27;
            _context27.t5 = _context27["catch"](12);
            if (!axios.isAxiosError(_context27.t5)) {
              _context27.next = 31;
              break;
            }
            return _context27.abrupt("return", new Err(new Error(((_err$response = _context27.t5.response) == null || (_err$response = _err$response.data) == null || (_err$response = _err$response.error) == null ? void 0 : _err$response.message) || "Failed to upload file")));
          case 31:
            return _context27.abrupt("return", new Err(new Error(_context27.t5 instanceof Error ? _context27.t5.message : "Unknown error")));
          case 32:
          case "end":
            return _context27.stop();
        }
      }, _callee27, this, [[12, 27]]);
    }));
    function uploadFile(_x31) {
      return _uploadFile.apply(this, arguments);
    }
    return uploadFile;
  }();
  _proto.deleteFile = /*#__PURE__*/function () {
    var _deleteFile = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee28(_ref20) {
      var fileID, res;
      return _regeneratorRuntime().wrap(function _callee28$(_context28) {
        while (1) switch (_context28.prev = _context28.next) {
          case 0:
            fileID = _ref20.fileID;
            _context28.next = 3;
            return this.request({
              method: "DELETE",
              path: "files/" + fileID
            });
          case 3:
            res = _context28.sent;
            return _context28.abrupt("return", res);
          case 5:
          case "end":
            return _context28.stop();
        }
      }, _callee28, this);
    }));
    function deleteFile(_x32) {
      return _deleteFile.apply(this, arguments);
    }
    return deleteFile;
  }();
  _proto.getActiveMemberEmailsInWorkspace = /*#__PURE__*/function () {
    var _getActiveMemberEmailsInWorkspace = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee29$(_context29) {
        while (1) switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return this.request({
              method: "GET",
              path: "members/emails",
              query: new URLSearchParams({
                activeOnly: "true"
              })
            });
          case 2:
            res = _context29.sent;
            _context29.next = 5;
            return this._resultFromResponse(GetActiveMemberEmailsInWorkspaceResponseSchema, res);
          case 5:
            r = _context29.sent;
            if (!r.isErr()) {
              _context29.next = 8;
              break;
            }
            return _context29.abrupt("return", r);
          case 8:
            return _context29.abrupt("return", new Ok(r.value.emails));
          case 9:
          case "end":
            return _context29.stop();
        }
      }, _callee29, this);
    }));
    function getActiveMemberEmailsInWorkspace() {
      return _getActiveMemberEmailsInWorkspace.apply(this, arguments);
    }
    return getActiveMemberEmailsInWorkspace;
  }();
  _proto.getWorkspaceVerifiedDomains = /*#__PURE__*/function () {
    var _getWorkspaceVerifiedDomains = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee30$(_context30) {
        while (1) switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return this.request({
              method: "GET",
              path: "verified_domains"
            });
          case 2:
            res = _context30.sent;
            _context30.next = 5;
            return this._resultFromResponse(GetWorkspaceVerifiedDomainsResponseSchema, res);
          case 5:
            r = _context30.sent;
            if (!r.isErr()) {
              _context30.next = 8;
              break;
            }
            return _context30.abrupt("return", r);
          case 8:
            return _context30.abrupt("return", new Ok(r.value.verified_domains));
          case 9:
          case "end":
            return _context30.stop();
        }
      }, _callee30, this);
    }));
    function getWorkspaceVerifiedDomains() {
      return _getWorkspaceVerifiedDomains.apply(this, arguments);
    }
    return getWorkspaceVerifiedDomains;
  }();
  _proto.getWorkspaceFeatureFlags = /*#__PURE__*/function () {
    var _getWorkspaceFeatureFlags = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee31$(_context31) {
        while (1) switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return this.request({
              method: "GET",
              path: "feature_flags"
            });
          case 2:
            res = _context31.sent;
            _context31.next = 5;
            return this._resultFromResponse(GetWorkspaceFeatureFlagsResponseSchema, res);
          case 5:
            r = _context31.sent;
            if (!r.isErr()) {
              _context31.next = 8;
              break;
            }
            return _context31.abrupt("return", r);
          case 8:
            return _context31.abrupt("return", new Ok(r.value.feature_flags));
          case 9:
          case "end":
            return _context31.stop();
        }
      }, _callee31, this);
    }));
    function getWorkspaceFeatureFlags() {
      return _getWorkspaceFeatureFlags.apply(this, arguments);
    }
    return getWorkspaceFeatureFlags;
  }();
  _proto.searchDataSourceViews = /*#__PURE__*/function () {
    var _searchDataSourceViews = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee32(searchParams) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee32$(_context32) {
        while (1) switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return this.request({
              method: "GET",
              path: "data_source_views/search",
              query: searchParams
            });
          case 2:
            res = _context32.sent;
            _context32.next = 5;
            return this._resultFromResponse(SearchDataSourceViewsResponseSchema, res);
          case 5:
            r = _context32.sent;
            if (!r.isErr()) {
              _context32.next = 8;
              break;
            }
            return _context32.abrupt("return", r);
          case 8:
            return _context32.abrupt("return", new Ok(r.value.data_source_views));
          case 9:
          case "end":
            return _context32.stop();
        }
      }, _callee32, this);
    }));
    function searchDataSourceViews(_x33) {
      return _searchDataSourceViews.apply(this, arguments);
    }
    return searchDataSourceViews;
  }();
  _proto.patchDataSourceView = /*#__PURE__*/function () {
    var _patchDataSourceView = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee33(dataSourceView, patch) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee33$(_context33) {
        while (1) switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return this.request({
              method: "PATCH",
              path: "spaces/" + dataSourceView.spaceId + "/data_source_views/" + dataSourceView.sId,
              body: patch
            });
          case 2:
            res = _context33.sent;
            _context33.next = 5;
            return this._resultFromResponse(DataSourceViewResponseSchema, res);
          case 5:
            r = _context33.sent;
            if (!r.isErr()) {
              _context33.next = 8;
              break;
            }
            return _context33.abrupt("return", r);
          case 8:
            return _context33.abrupt("return", new Ok(r.value.dataSourceView));
          case 9:
          case "end":
            return _context33.stop();
        }
      }, _callee33, this);
    }));
    function patchDataSourceView(_x34, _x35) {
      return _patchDataSourceView.apply(this, arguments);
    }
    return patchDataSourceView;
  }();
  _proto.exportApps = /*#__PURE__*/function () {
    var _exportApps = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee34(_ref21) {
      var appSpaceId, res, r;
      return _regeneratorRuntime().wrap(function _callee34$(_context34) {
        while (1) switch (_context34.prev = _context34.next) {
          case 0:
            appSpaceId = _ref21.appSpaceId;
            _context34.next = 3;
            return this.request({
              method: "GET",
              path: "spaces/" + appSpaceId + "/apps/export"
            });
          case 3:
            res = _context34.sent;
            _context34.next = 6;
            return this._resultFromResponse(GetAppsResponseSchema, res);
          case 6:
            r = _context34.sent;
            if (!r.isErr()) {
              _context34.next = 9;
              break;
            }
            return _context34.abrupt("return", r);
          case 9:
            return _context34.abrupt("return", new Ok(r.value.apps));
          case 10:
          case "end":
            return _context34.stop();
        }
      }, _callee34, this);
    }));
    function exportApps(_x36) {
      return _exportApps.apply(this, arguments);
    }
    return exportApps;
  }();
  _proto.checkApps = /*#__PURE__*/function () {
    var _checkApps = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee35(apps, appSpaceId) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee35$(_context35) {
        while (1) switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return this.request({
              method: "POST",
              path: "spaces/" + appSpaceId + "/apps/check",
              body: apps
            });
          case 2:
            res = _context35.sent;
            _context35.next = 5;
            return this._resultFromResponse(AppsCheckResponseSchema, res);
          case 5:
            r = _context35.sent;
            if (!r.isErr()) {
              _context35.next = 8;
              break;
            }
            return _context35.abrupt("return", r);
          case 8:
            return _context35.abrupt("return", new Ok(r.value.apps));
          case 9:
          case "end":
            return _context35.stop();
        }
      }, _callee35, this);
    }));
    function checkApps(_x37, _x38) {
      return _checkApps.apply(this, arguments);
    }
    return checkApps;
  }();
  _proto.getSpaces = /*#__PURE__*/function () {
    var _getSpaces = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee36$(_context36) {
        while (1) switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return this.request({
              method: "GET",
              path: "spaces"
            });
          case 2:
            res = _context36.sent;
            _context36.next = 5;
            return this._resultFromResponse(GetSpacesResponseSchema, res);
          case 5:
            r = _context36.sent;
            if (!r.isErr()) {
              _context36.next = 8;
              break;
            }
            return _context36.abrupt("return", r);
          case 8:
            return _context36.abrupt("return", new Ok(r.value.spaces));
          case 9:
          case "end":
            return _context36.stop();
        }
      }, _callee36, this);
    }));
    function getSpaces() {
      return _getSpaces.apply(this, arguments);
    }
    return getSpaces;
  }();
  _proto.searchNodes = /*#__PURE__*/function () {
    var _searchNodes = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee37(searchParams) {
      var res, r;
      return _regeneratorRuntime().wrap(function _callee37$(_context37) {
        while (1) switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return this.request({
              method: "POST",
              path: "search",
              body: searchParams
            });
          case 2:
            res = _context37.sent;
            _context37.next = 5;
            return this._resultFromResponse(PostWorkspaceSearchResponseBodySchema, res);
          case 5:
            r = _context37.sent;
            if (!r.isErr()) {
              _context37.next = 8;
              break;
            }
            return _context37.abrupt("return", r);
          case 8:
            return _context37.abrupt("return", new Ok(r.value.nodes));
          case 9:
          case "end":
            return _context37.stop();
        }
      }, _callee37, this);
    }));
    function searchNodes(_x39) {
      return _searchNodes.apply(this, arguments);
    }
    return searchNodes;
  }();
  _proto._fetchWithError = /*#__PURE__*/function () {
    var _fetchWithError2 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee38(url, config) {
      var now, res, response, duration, err;
      return _regeneratorRuntime().wrap(function _callee38$(_context38) {
        while (1) switch (_context38.prev = _context38.next) {
          case 0:
            now = Date.now();
            _context38.prev = 1;
            _context38.next = 4;
            return axiosNoKeepAlive(url, _extends({
              validateStatus: function validateStatus() {
                return true;
              },
              responseType: "stream"
            }, config));
          case 4:
            res = _context38.sent;
            response = {
              status: res.status,
              url: res.config.url || url,
              body: res.data,
              ok: res.status >= 200 && res.status < 300
            };
            return _context38.abrupt("return", new Ok({
              response: response,
              duration: Date.now() - now
            }));
          case 9:
            _context38.prev = 9;
            _context38.t0 = _context38["catch"](1);
            duration = Date.now() - now;
            err = {
              type: "unexpected_network_error",
              message: "Unexpected network error from DustAPI: " + _context38.t0
            };
            this._logger.error({
              dustError: err,
              url: url,
              duration: duration,
              connectorsError: err,
              error: sanitizedError(_context38.t0)
            }, "DustAPI error");
            return _context38.abrupt("return", new Err(err));
          case 15:
          case "end":
            return _context38.stop();
        }
      }, _callee38, this, [[1, 9]]);
    }));
    function _fetchWithError(_x40, _x41) {
      return _fetchWithError2.apply(this, arguments);
    }
    return _fetchWithError;
  }();
  _proto._resultFromResponse = /*#__PURE__*/function () {
    var _resultFromResponse2 = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee39(schema, res) {
      var err, text, response, r, rErr, _err, _err2;
      return _regeneratorRuntime().wrap(function _callee39$(_context39) {
        while (1) switch (_context39.prev = _context39.next) {
          case 0:
            if (!res.isErr()) {
              _context39.next = 2;
              break;
            }
            return _context39.abrupt("return", res);
          case 2:
            if (!(res.value.response.status === 413)) {
              _context39.next = 6;
              break;
            }
            err = {
              type: "content_too_large",
              message: "Your request content is too large, please try again with a shorter content."
            };
            this._logger.error({
              dustError: err,
              status: res.value.response.status,
              url: res.value.response.url,
              duration: res.value.duration
            }, "DustAPI error");
            return _context39.abrupt("return", new Err(err));
          case 6:
            _context39.next = 8;
            return textFromResponse(res.value.response);
          case 8:
            text = _context39.sent;
            _context39.prev = 9;
            response = JSON.parse(text);
            r = schema.safeParse(response); // This assume that safe parsing means a 200 status.
            if (!r.success) {
              _context39.next = 16;
              break;
            }
            return _context39.abrupt("return", new Ok(r.data));
          case 16:
            // We couldn't parse the response directly, maybe it's an error
            rErr = APIErrorSchema.safeParse(response["error"]);
            if (!rErr.success) {
              _context39.next = 22;
              break;
            }
            // Successfully parsed an error
            this._logger.error({
              dustError: rErr.data,
              status: res.value.response.status,
              url: res.value.response.url,
              duration: res.value.duration
            }, "DustAPI error");
            return _context39.abrupt("return", new Err(rErr.data));
          case 22:
            // Unexpected response format (neither an error nor a valid response)
            _err = {
              type: "unexpected_response_format",
              message: "Unexpected response format from DustAPI calling " + (res.value.response.url + " : " + r.error.message)
            };
            this._logger.error({
              dustError: _err,
              parseError: r.error.message,
              rawText: text,
              status: res.value.response.status,
              url: res.value.response.url,
              duration: res.value.duration
            }, "DustAPI error");
            return _context39.abrupt("return", new Err(_err));
          case 25:
            _context39.next = 32;
            break;
          case 27:
            _context39.prev = 27;
            _context39.t0 = _context39["catch"](9);
            _err2 = {
              type: "unexpected_response_format",
              message: "Fail to parse response from DustAPI calling " + (res.value.response.url + " : " + _context39.t0)
            };
            this._logger.error({
              dustError: _err2,
              error: _context39.t0,
              rawText: text,
              status: res.value.response.status,
              url: res.value.response.url,
              duration: res.value.duration
            }, "DustAPI error");
            return _context39.abrupt("return", new Err(_err2));
          case 32:
          case "end":
            return _context39.stop();
        }
      }, _callee39, this, [[9, 27]]);
    }));
    function _resultFromResponse(_x42, _x43) {
      return _resultFromResponse2.apply(this, arguments);
    }
    return _resultFromResponse;
  }();
  return DustAPI;
}();

export { ACTION_RUNNING_LABELS, APIErrorSchema, AgentConfigurationViewSchema, AppsCheckRequestSchema, AppsCheckResponseSchema, BaseSearchBodySchema, BrowseActionPublicType, CONTENT_NODE_MIME_TYPES, CancelMessageGenerationRequestSchema, CancelMessageGenerationResponseSchema, ContentNodeSchema, ContentNodeTypeSchema, ContentNodeWithParentSchema, ContentNodesViewTypeSchema, ConversationSchema, CoreAPIErrorSchema, CoreAPITokenTypeSchema, CreateConversationResponseSchema, DataSourceContentNodeSchema, DataSourceSearchQuerySchema, DataSourceViewContentNodeSchema, DataSourceViewResponseSchema, DeleteFolderResponseSchema, DustAPI, DustAppConfigTypeSchema, DustAppRunBlockExecutionEventSchema, DustAppRunBlockStatusEventSchema, DustAppRunErroredEventSchema, DustAppRunFinalEventSchema, DustAppRunFunctionCallArgumentsTokensEventSchema, DustAppRunFunctionCallEventSchema, DustAppRunRunStatusEventSchema, DustAppRunTokensEventSchema, DustAppTypeSchema, Err, FileTypeSchema, FileTypeWithUploadUrlSchema, FileUploadRequestResponseSchema, FileUploadUrlRequestSchema, FileUploadedRequestResponseSchema, GenerationTokensEventSchema, GetActiveMemberEmailsInWorkspaceResponseSchema, GetAgentConfigurationsResponseSchema, GetAppsResponseSchema, GetConversationResponseSchema, GetConversationsResponseSchema, GetDataSourcesResponseSchema, GetFeedbacksResponseSchema, GetFolderResponseSchema, GetFoldersResponseSchema, GetOrPatchAgentConfigurationResponseSchema, GetSpacesResponseSchema, GetWorkspaceFeatureFlagsResponseSchema, GetWorkspaceUsageRequestSchema, GetWorkspaceVerifiedDomainsResponseSchema, INTERNAL_MIME_TYPES, INTERNAL_MIME_TYPES_VALUES, ImportAppsResponseSchema, MeResponseSchema, Ok, PatchAgentConfigurationRequestSchema, PatchDataSourceViewRequestSchema, PostAppsRequestSchema, PostContentFragmentResponseSchema, PostConversationsResponseSchema, PostDataSourceDocumentRequestSchema, PostMessageFeedbackResponseSchema, PostTableParentsRequestSchema, PostUserMessageResponseSchema, PostWorkspaceSearchResponseBodySchema, PublicContentFragmentWithContentSchema, PublicContentFragmentWithFileIdSchema, PublicPostContentFragmentRequestBodySchema, PublicPostConversationsRequestBodySchema, PublicPostEditMessagesRequestBodySchema, PublicPostMessageFeedbackRequestBodySchema, PublicPostMessagesRequestBodySchema, RunAppResponseSchema, SearchDataSourceViewsRequestSchema, SearchDataSourceViewsResponseSchema, SearchRequestBodySchema, SearchWarningCodeSchema, TokenizeResponseSchema, UpsertDataSourceFolderRequestSchema, UpsertDatabaseTableRequestSchema, UpsertFolderResponseSchema, UpsertTableFromCsvRequestSchema, UpsertTableRowsRequestSchema, ValidateMemberRequestSchema, WebsearchResultSchema, WorkspaceDomainSchema, assertNever, getProviderFromRetrievedDocument, getTitleFromRetrievedDocument, isAgentMention, isConnectorProvider, isConnectorsAPIError, isDustAppRunActionType, isDustMimeType, isFolder, isProcessActionType, isReasoningActionType, isRetrievalActionType, isSearchLabelsActionType, isSupportedFileContentType, isSupportedImageContentType, isSupportedPlainTextContentType, isTablesQueryActionType, isWebsearchActionType, isWebsite, removeNulls, supportedFileExtensions, supportedImageFileFormats, supportedOtherFileFormats };
//# sourceMappingURL=client.esm.js.map
