{"version":3,"file":"client.cjs.production.min.js","sources":["../src/types.ts","../src/internal_mime_types.ts","../src/index.ts"],"sourcesContent":["import moment from \"moment-timezone\";\nimport { z } from \"zod\";\n\nimport { INTERNAL_MIME_TYPES_VALUES } from \"./internal_mime_types\";\n\ntype StringLiteral<T> = T extends string\n  ? string extends T\n    ? never\n    : T\n  : never;\n\n// Custom schema to get a string literal type and yet allow any string when parsing\nconst FlexibleEnumSchema = <T extends string>() =>\n  z.custom<StringLiteral<T>>((val) => {\n    return typeof val === \"string\";\n  });\n\nconst ModelProviderIdSchema = FlexibleEnumSchema<\n  | \"openai\"\n  | \"anthropic\"\n  | \"mistral\"\n  | \"google_ai_studio\"\n  | \"togetherai\"\n  | \"deepseek\"\n  | \"fireworks\"\n>();\n\nconst ModelLLMIdSchema = FlexibleEnumSchema<\n  | \"gpt-3.5-turbo\"\n  | \"gpt-4-turbo\"\n  | \"gpt-4o-2024-08-06\"\n  | \"gpt-4o\"\n  | \"gpt-4o-mini\"\n  | \"o1\"\n  | \"o1-mini\"\n  | \"o3-mini\"\n  | \"claude-3-opus-20240229\"\n  | \"claude-3-5-sonnet-20240620\"\n  | \"claude-3-5-sonnet-20241022\"\n  | \"claude-3-7-sonnet-20250219\"\n  | \"claude-3-5-haiku-20241022\"\n  | \"claude-3-haiku-20240307\"\n  | \"claude-2.1\"\n  | \"claude-instant-1.2\"\n  | \"mistral-large-latest\"\n  | \"mistral-medium\"\n  | \"mistral-small-latest\"\n  | \"codestral-latest\"\n  | \"gemini-1.5-pro-latest\"\n  | \"gemini-1.5-flash-latest\"\n  | \"gemini-2.0-flash-exp\"\n  | \"gemini-2.0-flash-thinking-exp-01-21\"\n  | \"gemini-2.0-flash\"\n  | \"gemini-2.0-flash-lite-preview-02-05\"\n  | \"gemini-2.0-pro-exp-02-05\"\n  | \"meta-llama/Llama-3.3-70B-Instruct-Turbo\" // togetherai\n  | \"Qwen/Qwen2.5-Coder-32B-Instruct\" // togetherai\n  | \"Qwen/QwQ-32B-Preview\" // togetherai\n  | \"Qwen/Qwen2-72B-Instruct\" // togetherai\n  | \"deepseek-ai/DeepSeek-V3\" // togetherai\n  | \"deepseek-ai/DeepSeek-R1\" // togetherai\n  | \"deepseek-chat\" // deepseek api\n  | \"deepseek-reasoner\" // deepseek api\n  | \"accounts/fireworks/models/deepseek-r1\" // fireworks\n>();\n\nconst EmbeddingProviderIdSchema = FlexibleEnumSchema<\"openai\" | \"mistral\">();\n\nconst ConnectorsAPIErrorTypeSchema = FlexibleEnumSchema<\n  | \"authorization_error\"\n  | \"not_found\"\n  | \"internal_server_error\"\n  | \"unexpected_error_format\"\n  | \"unexpected_response_format\"\n  | \"unexpected_network_error\"\n  | \"unknown_connector_provider\"\n  | \"invalid_request_error\"\n  | \"connector_authorization_error\"\n  | \"connector_not_found\"\n  | \"connector_configuration_not_found\"\n  | \"connector_update_error\"\n  | \"connector_update_unauthorized\"\n  | \"connector_oauth_target_mismatch\"\n  | \"connector_oauth_error\"\n  | \"slack_channel_not_found\"\n  | \"connector_rate_limit_error\"\n  | \"slack_configuration_not_found\"\n  | \"google_drive_webhook_not_found\"\n>();\n\nconst ConnectorsAPIErrorSchema = z.object({\n  type: ConnectorsAPIErrorTypeSchema,\n  message: z.string(),\n});\n\nexport type ConnectorsAPIError = z.infer<typeof ConnectorsAPIErrorSchema>;\n\nconst ModelIdSchema = z.number();\n\nexport type ConnectorsAPIErrorType = z.infer<\n  typeof ConnectorsAPIErrorTypeSchema\n>;\n\nexport function isConnectorsAPIError(obj: unknown): obj is ConnectorsAPIError {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"message\" in obj &&\n    typeof obj.message === \"string\" &&\n    \"type\" in obj &&\n    typeof obj.type === \"string\" &&\n    ConnectorsAPIErrorSchema.safeParse(obj).success\n  );\n}\n\n// Supported content types that are plain text and can be sent as file-less content fragment.\nexport const supportedOtherFileFormats = {\n  \"application/msword\": [\".doc\", \".docx\"],\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": [\n    \".doc\",\n    \".docx\",\n  ],\n  \"application/vnd.ms-powerpoint\": [\".ppt\", \".pptx\"],\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": [\n    \".ppt\",\n    \".pptx\",\n  ],\n  \"application/vnd.google-apps.document\": [],\n  \"application/vnd.google-apps.presentation\": [],\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": [\n    \".xlsx\",\n  ],\n  \"application/vnd.google-apps.spreadsheet\": [],\n  \"application/vnd.ms-excel\": [\".xls\"],\n  \"application/pdf\": [\".pdf\"],\n  \"application/vnd.dust.section.json\": [\".json\"],\n  \"text/comma-separated-values\": [\".csv\"],\n  \"text/csv\": [\".csv\"],\n  \"text/markdown\": [\".md\", \".markdown\"],\n  \"text/plain\": [\".txt\", \".log\", \".cfg\", \".conf\"],\n  \"text/tab-separated-values\": [\".tsv\"],\n  \"text/tsv\": [\".tsv\"],\n  \"text/vnd.dust.attachment.slack.thread\": [\".txt\"],\n  \"text/html\": [\".html\", \".htm\", \".xhtml\", \".xhtml+xml\"],\n  \"text/xml\": [\".xml\"],\n  \"text/calendar\": [\".ics\"],\n  \"text/css\": [\".css\"],\n  \"text/javascript\": [\".js\", \".mjs\", \".jsx\"],\n  \"text/typescript\": [\".ts\", \".tsx\"],\n  \"application/json\": [\".json\"],\n  \"application/xml\": [\".xml\"],\n  \"application/x-sh\": [\".sh\"],\n  \"text/x-sh\": [\".sh\"],\n  \"text/x-python\": [\".py\"],\n  \"text/x-python-script\": [\".py\"],\n  \"application/x-yaml\": [\".yaml\", \".yml\"],\n  \"text/yaml\": [\".yaml\", \".yml\"],\n  \"text/vnd.yaml\": [\".yaml\", \".yml\"],\n  \"text/x-c\": [\".c\", \".cc\", \".cpp\", \".cxx\", \".dic\", \".h\", \".hh\"],\n  \"text/x-csharp\": [\".cs\"],\n  \"text/x-java-source\": [\".java\"],\n  \"text/x-php\": [\".php\"],\n  \"text/x-ruby\": [\".rb\"],\n  \"text/x-sql\": [\".sql\"],\n  \"text/x-swift\": [\".swift\"],\n  \"text/x-rust\": [\".rs\"],\n  \"text/x-go\": [\".go\"],\n  \"text/x-kotlin\": [\".kt\", \".kts\"],\n  \"text/x-scala\": [\".scala\"],\n  \"text/x-groovy\": [\".groovy\"],\n  \"text/x-perl\": [\".pl\", \".pm\"],\n  \"text/x-perl-script\": [\".pl\", \".pm\"],\n} as const;\n\n// Supported content types for images.\nexport const supportedImageFileFormats = {\n  \"image/jpeg\": [\".jpg\", \".jpeg\"],\n  \"image/png\": [\".png\"],\n  \"image/gif\": [\".gif\"],\n  \"image/webp\": [\".webp\"],\n} as const;\n\ntype OtherContentType = keyof typeof supportedOtherFileFormats;\ntype ImageContentType = keyof typeof supportedImageFileFormats;\n\nconst supportedOtherContentTypes = Object.keys(\n  supportedOtherFileFormats\n) as OtherContentType[];\nconst supportedImageContentTypes = Object.keys(\n  supportedImageFileFormats\n) as ImageContentType[];\n\nexport const supportedFileExtensions = [\n  ...Object.keys(supportedOtherFileFormats),\n  ...Object.keys(supportedImageFileFormats),\n];\n\nexport type SupportedFileContentType = OtherContentType | ImageContentType;\nconst supportedUploadableContentType = [\n  ...supportedOtherContentTypes,\n  ...supportedImageContentTypes,\n] as SupportedFileContentType[];\n\nconst SupportedContentFragmentTypeSchema = FlexibleEnumSchema<\n  | keyof typeof supportedOtherFileFormats\n  | keyof typeof supportedImageFileFormats\n  | (typeof INTERNAL_MIME_TYPES_VALUES)[number]\n  // Legacy content types still retuned by the API when rendering old messages.\n  | \"dust-application/slack\"\n>();\n\nconst SupportedFileContentFragmentTypeSchema = FlexibleEnumSchema<\n  | keyof typeof supportedOtherFileFormats\n  | keyof typeof supportedImageFileFormats\n>();\n\nexport function isSupportedFileContentType(\n  contentType: string\n): contentType is SupportedFileContentType {\n  return supportedUploadableContentType.includes(\n    contentType as SupportedFileContentType\n  );\n}\n\nexport function isSupportedPlainTextContentType(\n  contentType: string\n): contentType is OtherContentType {\n  return supportedOtherContentTypes.includes(contentType as OtherContentType);\n}\n\nexport function isSupportedImageContentType(\n  contentType: string\n): contentType is ImageContentType {\n  return supportedImageContentTypes.includes(contentType as ImageContentType);\n}\n\nconst UserMessageOriginSchema = FlexibleEnumSchema<\n  | \"slack\"\n  | \"web\"\n  | \"api\"\n  | \"gsheet\"\n  | \"zapier\"\n  | \"n8n\"\n  | \"make\"\n  | \"zendesk\"\n  | \"raycast\"\n  | \"github-copilot-chat\"\n  | \"extension\"\n  | \"email\"\n>()\n  .or(z.null())\n  .or(z.undefined());\n\nconst VisibilitySchema = FlexibleEnumSchema<\"visible\" | \"deleted\">();\n\nconst RankSchema = z.object({\n  rank: z.number(),\n});\n\nexport class Ok<T> {\n  constructor(public value: T) {}\n\n  isOk(): this is Ok<T> {\n    return true;\n  }\n\n  isErr(): this is Err<never> {\n    return false;\n  }\n}\n\nexport class Err<E> {\n  constructor(public error: E) {}\n\n  isOk(): this is Ok<never> {\n    return false;\n  }\n\n  isErr(): this is Err<E> {\n    return true;\n  }\n}\n\nexport type Result<T, E> = Ok<T> | Err<E>;\n\n// Custom codec to validate the timezone\nconst Timezone = z.string().refine((s) => moment.tz.names().includes(s), {\n  message: \"Invalid timezone\",\n});\n\nconst ConnectorProvidersSchema = FlexibleEnumSchema<\n  | \"confluence\"\n  | \"github\"\n  | \"google_drive\"\n  | \"intercom\"\n  | \"notion\"\n  | \"slack\"\n  | \"microsoft\"\n  | \"webcrawler\"\n  | \"snowflake\"\n  | \"zendesk\"\n  | \"bigquery\"\n  | \"salesforce\"\n  | \"gong\"\n>();\nexport type ConnectorProvider = z.infer<typeof ConnectorProvidersSchema>;\n\nexport const isConnectorProvider = (\n  provider: string\n): provider is ConnectorProvider =>\n  ConnectorProvidersSchema.safeParse(provider).success;\n\nconst EditedByUserSchema = z.object({\n  editedAt: z.number().nullable(),\n  fullName: z.string().nullable(),\n  imageUrl: z.string().nullable(),\n  email: z.string().nullable(),\n  userId: z.string().nullable(),\n});\n\nconst DataSourceTypeSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  createdAt: z.number(),\n  name: z.string(),\n  description: z.string().nullable(),\n  assistantDefaultSelected: z.boolean(),\n  dustAPIProjectId: z.string(),\n  dustAPIDataSourceId: z.string(),\n  connectorId: z.string().nullable(),\n  connectorProvider: ConnectorProvidersSchema.nullable(),\n  editedByUser: EditedByUserSchema.nullable().optional(),\n});\n\nexport type DataSourceType = z.infer<typeof DataSourceTypeSchema>;\n\nexport function isFolder(\n  ds: DataSourceType\n): ds is DataSourceType & { connectorProvider: null } {\n  // If there is no connectorProvider, it's a folder.\n  return !ds.connectorProvider;\n}\n\nexport function isWebsite(\n  ds: DataSourceType\n): ds is DataSourceType & { connectorProvider: \"webcrawler\" } {\n  return ds.connectorProvider === \"webcrawler\";\n}\n\nconst CoreAPIDocumentChunkSchema = z.object({\n  text: z.string(),\n  hash: z.string(),\n  offset: z.number(),\n  vector: z.array(z.number()).nullable().optional(),\n  score: z.number().nullable().optional(),\n});\n\nconst CoreAPIDocumentSchema = z.object({\n  data_source_id: z.string(),\n  created: z.number(),\n  document_id: z.string(),\n  timestamp: z.number(),\n  parent_id: z.string().nullable().optional(),\n  tags: z.array(z.string()),\n  source_url: z.string().nullable().optional(),\n  hash: z.string(),\n  text_size: z.number(),\n  chunk_count: z.number(),\n  chunks: z.array(CoreAPIDocumentChunkSchema),\n  text: z.string().nullable().optional(),\n});\n\nconst CoreAPILightDocumentSchema = z.object({\n  hash: z.string(),\n  text_size: z.number(),\n  chunk_count: z.number(),\n  token_count: z.number(),\n  created: z.number(),\n});\n\nconst CoreAPIRowValueSchema = z.union([\n  z.number(),\n  z.string(),\n  z.boolean(),\n  z.object({\n    type: z.literal(\"datetime\"),\n    epoch: z.number(),\n    string_value: z.string().optional(),\n  }),\n  z.null(),\n]);\n\nconst CoreAPIRowSchema = z.object({\n  row_id: z.string(),\n  value: z.record(CoreAPIRowValueSchema),\n});\n\nexport type CoreAPIRowType = z.infer<typeof CoreAPIRowSchema>;\n\nconst CoreAPITableSchema = z.array(\n  z.object({\n    name: z.string(),\n    value_type: z.enum([\"int\", \"float\", \"text\", \"bool\", \"datetime\"]),\n    possible_values: z.array(z.string()).nullable().optional(),\n  })\n);\n\nconst CoreAPITablePublicSchema = z.object({\n  table_id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  schema: CoreAPITableSchema.nullable(),\n  timestamp: z.number(),\n  tags: z.array(z.string()),\n  parents: z.array(z.string()),\n  parent_id: z.string().nullable().optional(),\n  mime_type: z.string().optional(),\n  title: z.string().optional(),\n});\n\nexport type CoreAPITablePublic = z.infer<typeof CoreAPITablePublicSchema>;\n\nexport interface LoggerInterface {\n  error: (args: Record<string, unknown>, message: string) => void;\n  info: (args: Record<string, unknown>, message: string) => void;\n  trace: (args: Record<string, unknown>, message: string) => void;\n  warn: (args: Record<string, unknown>, message: string) => void;\n}\n\nconst DataSourceViewCategoriesSchema = FlexibleEnumSchema<\n  \"managed\" | \"folder\" | \"website\" | \"apps\"\n>();\n\nconst BlockTypeSchema = FlexibleEnumSchema<\n  | \"input\"\n  | \"data\"\n  | \"data_source\"\n  | \"code\"\n  | \"llm\"\n  | \"chat\"\n  | \"map\"\n  | \"reduce\"\n  | \"while\"\n  | \"end\"\n  | \"search\"\n  | \"curl\"\n  | \"browser\"\n  | \"database_schema\"\n  | \"database\"\n>();\n\nconst StatusSchema = z.enum([\"running\", \"succeeded\", \"errored\"]);\n\nconst BlockRunConfigSchema = z.record(z.any());\n\nconst BlockStatusSchema = z.object({\n  block_type: BlockTypeSchema,\n  name: z.string(),\n  status: StatusSchema,\n  success_count: z.number(),\n  error_count: z.number(),\n});\n\nconst RunConfigSchema = z.object({\n  blocks: BlockRunConfigSchema,\n});\n\nconst TraceTypeSchema = z.object({\n  value: z.unknown().nullable(),\n  error: z.string().nullable(),\n  meta: z.unknown().nullable(),\n});\n\nconst RunStatusSchema = z.object({\n  run: StatusSchema,\n  blocks: z.array(BlockStatusSchema),\n});\n\nconst RunTypeSchema = z.object({\n  run_id: z.string(),\n  created: z.number(),\n  run_type: z.enum([\"deploy\", \"local\", \"execute\"]),\n  app_hash: z.string().nullable().optional(),\n  specification_hash: z.string().nullable().optional(),\n  config: RunConfigSchema,\n  status: RunStatusSchema,\n  traces: z.array(\n    z.tuple([\n      z.tuple([BlockTypeSchema, z.string()]),\n      z.array(z.array(TraceTypeSchema)),\n    ])\n  ),\n  results: z\n    .array(\n      z.array(\n        z.object({\n          value: z.unknown().nullable().optional(),\n          error: z.string().nullable().optional(),\n        })\n      )\n    )\n    .nullable()\n    .optional(),\n});\n\nconst TokensClassificationSchema = FlexibleEnumSchema<\n  \"tokens\" | \"chain_of_thought\"\n>();\n\nexport const GenerationTokensEventSchema = z.object({\n  type: z.literal(\"generation_tokens\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  text: z.string(),\n  classification: z.union([\n    TokensClassificationSchema,\n    z.enum([\"opening_delimiter\", \"closing_delimiter\"]),\n  ]),\n  delimiterClassification: TokensClassificationSchema.nullable().optional(),\n});\nexport type GenerationTokensEvent = z.infer<typeof GenerationTokensEventSchema>;\n\nconst BaseActionTypeSchema = FlexibleEnumSchema<\n  | \"dust_app_run_action\"\n  | \"tables_query_action\"\n  | \"retrieval_action\"\n  | \"process_action\"\n  | \"websearch_action\"\n  | \"browse_action\"\n  | \"reasoning_action\"\n  | \"visualization_action\"\n>();\n\nconst BaseActionSchema = z.object({\n  id: ModelIdSchema,\n  type: BaseActionTypeSchema,\n});\n\nconst BrowseActionOutputSchema = z.object({\n  results: z.array(\n    z.object({\n      requestedUrl: z.string(),\n      browsedUrl: z.string(),\n      content: z.string(),\n      responseCode: z.string(),\n      errorMessage: z.string(),\n    })\n  ),\n});\n\nconst BrowseActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  urls: z.array(z.string()),\n  output: BrowseActionOutputSchema.nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"browse_action\"),\n});\ntype BrowseActionPublicType = z.infer<typeof BrowseActionTypeSchema>;\n\nconst SearchLabelsActionOutputSchema = z.object({\n  tags: z.array(\n    z.object({\n      tag: z.string(),\n      match_count: z.number(),\n      data_sources: z.array(z.string()),\n    })\n  ),\n});\n\nconst SearchLabelsActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  output: SearchLabelsActionOutputSchema.nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"search_labels_action\"),\n});\ntype SearchLabelsActionPublicType = z.infer<\n  typeof SearchLabelsActionTypeSchema\n>;\n\nconst ReasoningActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  output: z.string().nullable(),\n  thinking: z.string().nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"reasoning_action\"),\n});\ntype ReasoningActionPublicType = z.infer<typeof ReasoningActionTypeSchema>;\n\nconst ConversationIncludeFileActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  params: z.object({\n    fileId: z.string(),\n  }),\n  tokensCount: z.number().nullable(),\n  fileTitle: z.string().nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"conversation_include_file_action\"),\n});\n\nconst ConversationAttachmentTypeSchema = z.union([\n  // File case\n  z.object({\n    fileId: z.string(),\n    contentFragmentId: z.undefined(),\n    nodeDataSourceViewId: z.undefined(),\n    title: z.string(),\n    contentType: SupportedContentFragmentTypeSchema,\n  }),\n  // Node case\n  z.object({\n    fileId: z.undefined(),\n    contentFragmentId: z.string(),\n    nodeDataSourceViewId: z.string(),\n    title: z.string(),\n    contentType: SupportedContentFragmentTypeSchema,\n  }),\n]);\n\nconst ConversationListFilesActionTypeSchema = BaseActionSchema.extend({\n  files: z.array(ConversationAttachmentTypeSchema),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  agentMessageId: ModelIdSchema,\n  step: z.number(),\n  type: z.literal(\"conversation_list_files_action\"),\n});\n\nconst DustAppParametersSchema = z.record(\n  z.union([z.string(), z.number(), z.boolean()])\n);\n\nconst DustAppRunActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  appWorkspaceId: z.string(),\n  appId: z.string(),\n  appName: z.string(),\n  params: DustAppParametersSchema,\n  runningBlock: z\n    .object({\n      type: z.string(),\n      name: z.string(),\n      status: z.enum([\"running\", \"succeeded\", \"errored\"]),\n    })\n    .nullable(),\n  output: z.unknown().nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"dust_app_run_action\"),\n}).transform((o) => ({\n  ...o,\n  output: o.output,\n}));\ntype DustAppRunActionPublicType = z.infer<typeof DustAppRunActionTypeSchema>;\n\nconst DataSourceViewKindSchema = FlexibleEnumSchema<\"default\" | \"custom\">();\n\nconst DataSourceViewSchema = z.object({\n  category: DataSourceViewCategoriesSchema,\n  createdAt: z.number(),\n  dataSource: DataSourceTypeSchema,\n  editedByUser: EditedByUserSchema.nullable().optional(),\n  id: ModelIdSchema,\n  kind: DataSourceViewKindSchema,\n  parentsIn: z.array(z.string()).nullable(),\n  sId: z.string(),\n  updatedAt: z.number(),\n  spaceId: z.string(),\n});\nexport type DataSourceViewType = z.infer<typeof DataSourceViewSchema>;\n\nconst TIME_FRAME_UNITS = [\"hour\", \"day\", \"week\", \"month\", \"year\"] as const;\nconst TimeframeUnitSchema = z.enum(TIME_FRAME_UNITS);\n\nconst TimeFrameSchema = z.object({\n  duration: z.number(),\n  unit: TimeframeUnitSchema,\n});\n\nconst DataSourceFilterSchema = z.object({\n  parents: z\n    .object({\n      in: z.array(z.string()),\n      not: z.array(z.string()),\n    })\n    .nullable(),\n});\n\nconst DataSourceConfigurationSchema = z.object({\n  workspaceId: z.string(),\n  dataSourceViewId: z.string(),\n  filter: DataSourceFilterSchema,\n});\n\nconst RetrievalDocumentChunkTypeSchema = z.object({\n  offset: z.number(),\n  score: z.number().nullable(),\n  text: z.string(),\n});\n\nconst RetrievalDocumentTypeSchema = z.object({\n  chunks: z.array(RetrievalDocumentChunkTypeSchema),\n  documentId: z.string(),\n  dataSourceView: DataSourceViewSchema.nullable(),\n  id: ModelIdSchema,\n  reference: z.string(),\n  score: z.number().nullable(),\n  sourceUrl: z.string().nullable(),\n  tags: z.array(z.string()),\n  timestamp: z.number(),\n});\n\nexport type RetrievalDocumentPublicType = z.infer<\n  typeof RetrievalDocumentTypeSchema\n>;\n\nconst RetrievalActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  params: z.object({\n    relativeTimeFrame: TimeFrameSchema.nullable(),\n    query: z.string().nullable(),\n    topK: z.number(),\n  }),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  documents: z.array(RetrievalDocumentTypeSchema).nullable(),\n  step: z.number(),\n  type: z.literal(\"retrieval_action\"),\n});\n\nexport type RetrievalActionPublicType = z.infer<\n  typeof RetrievalActionTypeSchema\n>;\n\nconst ProcessSchemaAllowedTypesSchema = z.enum([\"string\", \"number\", \"boolean\"]);\n\nconst ProcessSchemaPropertySchema = z.object({\n  name: z.string(),\n  type: ProcessSchemaAllowedTypesSchema,\n  description: z.string(),\n});\n\nconst ProcessActionOutputsSchema = z.object({\n  data: z.array(z.unknown()),\n  min_timestamp: z.number(),\n  total_documents: z.number(),\n  total_chunks: z.number(),\n  total_tokens: z.number(),\n});\n\nconst ProcessActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  params: z.object({\n    relativeTimeFrame: TimeFrameSchema.nullable(),\n  }),\n  schema: z.array(ProcessSchemaPropertySchema),\n  outputs: ProcessActionOutputsSchema.nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"process_action\"),\n});\ntype ProcessActionPublicType = z.infer<typeof ProcessActionTypeSchema>;\n\nconst TablesQueryActionTypeSchema = BaseActionSchema.extend({\n  params: DustAppParametersSchema,\n  output: z.record(z.union([z.string(), z.number(), z.boolean()])).nullable(),\n  resultsFileId: z.string().nullable(),\n  resultsFileSnippet: z.string().nullable(),\n  sectionFileId: z.string().nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  agentMessageId: ModelIdSchema,\n  step: z.number(),\n  type: z.literal(\"tables_query_action\"),\n});\ntype TablesQueryActionPublicType = z.infer<typeof TablesQueryActionTypeSchema>;\n\nconst WhitelistableFeaturesSchema = FlexibleEnumSchema<\n  | \"usage_data_api\"\n  | \"okta_enterprise_connection\"\n  | \"labs_transcripts\"\n  | \"labs_trackers\"\n  | \"document_tracker\"\n  | \"openai_o1_feature\"\n  | \"openai_o1_mini_feature\"\n  | \"openai_o1_high_reasoning_feature\"\n  | \"openai_o1_custom_assistants_feature\"\n  | \"openai_o1_high_reasoning_custom_assistants_feature\"\n  | \"deepseek_feature\"\n  | \"google_ai_studio_experimental_models_feature\"\n  | \"snowflake_connector_feature\"\n  | \"index_private_slack_channel\"\n  | \"disable_run_logs\"\n  | \"show_debug_tools\"\n  | \"labs_github_actions\"\n  | \"deepseek_r1_global_agent_feature\"\n  | \"salesforce_feature\"\n  | \"advanced_notion_management\"\n  | \"search_knowledge_builder\"\n  | \"attach_from_datasources\"\n  | \"force_gdrive_labels_scope\"\n  | \"claude_3_7_reasoning\"\n  | \"mcp_actions\"\n>();\n\nexport type WhitelistableFeature = z.infer<typeof WhitelistableFeaturesSchema>;\n\nconst WorkspaceSegmentationSchema =\n  FlexibleEnumSchema<\"interesting\">().nullable();\n\nconst RoleSchema = z.enum([\"admin\", \"builder\", \"user\", \"none\"]);\n\nconst LightWorkspaceSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  name: z.string(),\n  role: RoleSchema,\n  segmentation: WorkspaceSegmentationSchema,\n  whiteListedProviders: ModelProviderIdSchema.array().nullable(),\n  defaultEmbeddingProvider: EmbeddingProviderIdSchema.nullable(),\n});\n\nexport type LightWorkspaceType = z.infer<typeof LightWorkspaceSchema>;\nexport type WorkspaceType = z.infer<typeof WorkspaceSchema>;\nexport type ExtensionWorkspaceType = z.infer<typeof ExtensionWorkspaceSchema>;\n\nconst WorkspaceSchema = LightWorkspaceSchema.extend({\n  ssoEnforced: z.boolean().optional(),\n});\n\nconst ExtensionWorkspaceSchema = WorkspaceSchema.extend({\n  blacklistedDomains: z.array(z.string()).nullable(),\n});\n\nconst UserProviderSchema = FlexibleEnumSchema<\n  \"auth0\" | \"github\" | \"google\" | \"okta\" | \"samlp\" | \"waad\"\n>().nullable();\n\nconst UserSchema = z.object({\n  sId: z.string(),\n  id: ModelIdSchema,\n  createdAt: z.number(),\n  provider: UserProviderSchema,\n  username: z.string(),\n  email: z.string(),\n  firstName: z.string(),\n  lastName: z.string().nullable(),\n  fullName: z.string(),\n  image: z.string().nullable(),\n});\n\nexport type UserType = z.infer<typeof UserSchema>;\n\nexport const WebsearchResultSchema = z.object({\n  title: z.string(),\n  snippet: z.string(),\n  link: z.string(),\n  reference: z.string(),\n});\n\nexport type WebsearchResultPublicType = z.infer<typeof WebsearchResultSchema>;\n\nconst WebsearchActionOutputSchema = z.union([\n  z.object({\n    results: z.array(WebsearchResultSchema),\n  }),\n  z.object({\n    results: z.array(WebsearchResultSchema),\n    error: z.string(),\n  }),\n]);\n\nconst WebsearchActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  query: z.string(),\n  output: WebsearchActionOutputSchema.nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"websearch_action\"),\n});\n\nexport type WebsearchActionPublicType = z.infer<\n  typeof WebsearchActionTypeSchema\n>;\n\nconst MCPActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  params: z.unknown(),\n  type: z.literal(\"tool_action\"),\n});\n\nconst GlobalAgentStatusSchema = FlexibleEnumSchema<\n  | \"active\"\n  | \"disabled_by_admin\"\n  | \"disabled_missing_datasource\"\n  | \"disabled_free_workspace\"\n>();\n\nconst AgentStatusSchema = FlexibleEnumSchema<\"active\" | \"archived\" | \"draft\">();\n\nconst AgentConfigurationStatusSchema = z.union([\n  AgentStatusSchema,\n  GlobalAgentStatusSchema,\n]);\n\nconst AgentConfigurationScopeSchema = FlexibleEnumSchema<\n  \"global\" | \"workspace\" | \"published\" | \"private\"\n>();\n\nexport const AgentConfigurationViewSchema = FlexibleEnumSchema<\n  \"all\" | \"list\" | \"workspace\" | \"published\" | \"global\" | \"favorites\"\n>();\n\nexport type AgentConfigurationViewType = z.infer<\n  typeof AgentConfigurationViewSchema\n>;\n\nconst AgentUsageTypeSchema = z.object({\n  messageCount: z.number(),\n  conversationCount: z.number(),\n  userCount: z.number(),\n  timePeriodSec: z.number(),\n});\n\nconst AgentRecentAuthorsSchema = z.array(z.string()).readonly();\n\nconst AgentModelConfigurationSchema = z.object({\n  providerId: ModelProviderIdSchema,\n  modelId: ModelLLMIdSchema,\n  temperature: z.number(),\n});\n\nconst LightAgentConfigurationSchema = z.object({\n  id: ModelIdSchema,\n  versionCreatedAt: z.string().nullable(),\n  sId: z.string(),\n  version: z.number(),\n  versionAuthorId: ModelIdSchema.nullable(),\n  instructions: z.string().nullable(),\n  model: AgentModelConfigurationSchema,\n  status: AgentConfigurationStatusSchema,\n  scope: AgentConfigurationScopeSchema,\n  userFavorite: z.boolean(),\n  name: z.string(),\n  description: z.string(),\n  pictureUrl: z.string(),\n  lastAuthors: AgentRecentAuthorsSchema.optional(),\n  usage: AgentUsageTypeSchema.optional(),\n  maxStepsPerRun: z.number(),\n  visualizationEnabled: z.boolean(),\n  templateId: z.string().nullable(),\n  groupIds: z.array(z.string()).optional(),\n  requestedGroupIds: z.array(z.array(z.string())),\n});\n\nexport type LightAgentConfigurationType = z.infer<\n  typeof LightAgentConfigurationSchema\n>;\n\nconst ContentFragmentContextSchema = z.object({\n  username: z.string().optional().nullable(),\n  fullName: z.string().optional().nullable(),\n  email: z.string().optional().nullable(),\n  profilePictureUrl: z.string().optional().nullable(),\n});\n\nconst ContentFragmentSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  fileId: z.string().nullable(),\n  created: z.number(),\n  type: z.literal(\"content_fragment\"),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  sourceUrl: z.string().nullable(),\n  textUrl: z.string(),\n  textBytes: z.number().nullable(),\n  title: z.string(),\n  contentType: SupportedContentFragmentTypeSchema,\n  context: ContentFragmentContextSchema,\n  contentFragmentId: z.string(),\n  contentFragmentVersion: z.union([\n    z.literal(\"latest\"),\n    z.literal(\"superseded\"),\n  ]),\n});\nexport type ContentFragmentType = z.infer<typeof ContentFragmentSchema>;\n\nexport type UploadedContentFragmentType = {\n  fileId: string;\n  title: string;\n  url?: string;\n};\n\nconst AgentMentionSchema = z.object({\n  configurationId: z.string(),\n});\n\nexport type AgentMentionType = z.infer<typeof AgentMentionSchema>;\n\nconst UserMessageContextSchema = z.object({\n  username: z.string(),\n  timezone: Timezone,\n  fullName: z.string().optional().nullable(),\n  email: z.string().optional().nullable(),\n  profilePictureUrl: z.string().optional().nullable(),\n  origin: UserMessageOriginSchema,\n});\n\nconst UserMessageSchema = z.object({\n  id: ModelIdSchema,\n  created: z.number(),\n  type: z.literal(\"user_message\"),\n  sId: z.string(),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  user: UserSchema.nullable(),\n  mentions: z.array(AgentMentionSchema),\n  content: z.string(),\n  context: UserMessageContextSchema,\n});\nexport type UserMessageType = z.infer<typeof UserMessageSchema>;\n\nconst UserMessageWithRankTypeSchema = UserMessageSchema.and(RankSchema);\n\nexport type UserMessageWithRankType = z.infer<\n  typeof UserMessageWithRankTypeSchema\n>;\n\nconst AgentActionTypeSchema = z.union([\n  RetrievalActionTypeSchema,\n  DustAppRunActionTypeSchema,\n  TablesQueryActionTypeSchema,\n  ProcessActionTypeSchema,\n  WebsearchActionTypeSchema,\n  BrowseActionTypeSchema,\n  ConversationListFilesActionTypeSchema,\n  ConversationIncludeFileActionTypeSchema,\n  ReasoningActionTypeSchema,\n  SearchLabelsActionTypeSchema,\n  MCPActionTypeSchema,\n]);\nexport type AgentActionPublicType = z.infer<typeof AgentActionTypeSchema>;\n\nconst AgentMessageStatusSchema = FlexibleEnumSchema<\n  \"created\" | \"succeeded\" | \"failed\" | \"cancelled\"\n>();\n\nconst AgentMessageTypeSchema = z.object({\n  id: ModelIdSchema,\n  agentMessageId: ModelIdSchema,\n  created: z.number(),\n  type: z.literal(\"agent_message\"),\n  sId: z.string(),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  parentMessageId: z.string().nullable(),\n  configuration: LightAgentConfigurationSchema,\n  status: AgentMessageStatusSchema,\n  actions: z.array(AgentActionTypeSchema),\n  content: z.string().nullable(),\n  chainOfThought: z.string().nullable(),\n  rawContents: z.array(\n    z.object({\n      step: z.number(),\n      content: z.string(),\n    })\n  ),\n  error: z\n    .object({\n      code: z.string(),\n      message: z.string(),\n    })\n    .nullable(),\n});\nexport type AgentMessagePublicType = z.infer<typeof AgentMessageTypeSchema>;\n\nconst AgentMesssageFeedbackSchema = z.object({\n  messageId: z.string(),\n  agentMessageId: z.number(),\n  userId: z.number(),\n  thumbDirection: z.union([z.literal(\"up\"), z.literal(\"down\")]),\n  content: z.string().nullable(),\n  createdAt: z.number(),\n  agentConfigurationId: z.string(),\n  agentConfigurationVersion: z.number(),\n  isConversationShared: z.boolean(),\n});\n\nconst ConversationVisibilitySchema = FlexibleEnumSchema<\n  \"unlisted\" | \"workspace\" | \"deleted\" | \"test\"\n>();\n\nexport type ConversationVisibility = z.infer<\n  typeof ConversationVisibilitySchema\n>;\n\nconst ConversationWithoutContentSchema = z.object({\n  id: ModelIdSchema,\n  created: z.number(),\n  updated: z.number().optional(),\n  owner: WorkspaceSchema,\n  sId: z.string(),\n  title: z.string().nullable(),\n  visibility: ConversationVisibilitySchema,\n  groupIds: z.array(z.string()).optional(),\n  requestedGroupIds: z.array(z.array(z.string())),\n});\n\nexport const ConversationSchema = ConversationWithoutContentSchema.extend({\n  content: z.array(\n    z.union([\n      z.array(UserMessageSchema),\n      z.array(AgentMessageTypeSchema),\n      z.array(ContentFragmentSchema),\n    ])\n  ),\n});\n\nexport type ConversationWithoutContentPublicType = z.infer<\n  typeof ConversationWithoutContentSchema\n>;\nexport type ConversationPublicType = z.infer<typeof ConversationSchema>;\n\nconst ConversationMessageReactionsSchema = z.array(\n  z.object({\n    messageId: z.string(),\n    reactions: z.array(\n      z.object({\n        emoji: z.string(),\n        users: z.array(\n          z.object({\n            userId: ModelIdSchema.nullable(),\n            username: z.string(),\n            fullName: z.string().nullable(),\n          })\n        ),\n      })\n    ),\n  })\n);\n\nexport type ConversationMessageReactionsType = z.infer<\n  typeof ConversationMessageReactionsSchema\n>;\n\nconst BrowseParamsEventSchema = z.object({\n  type: z.literal(\"browse_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: BrowseActionTypeSchema,\n});\n\nconst ConversationIncludeFileParamsEventSchema = z.object({\n  type: z.literal(\"conversation_include_file_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: ConversationIncludeFileActionTypeSchema,\n});\n\nconst DustAppRunParamsEventSchema = z.object({\n  type: z.literal(\"dust_app_run_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: DustAppRunActionTypeSchema,\n});\n\nconst DustAppRunBlockEventSchema = z.object({\n  type: z.literal(\"dust_app_run_block\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: DustAppRunActionTypeSchema,\n});\n\nconst ProcessParamsEventSchema = z.object({\n  type: z.literal(\"process_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  dataSources: z.array(DataSourceConfigurationSchema),\n  action: ProcessActionTypeSchema,\n});\n\nconst RetrievalParamsEventSchema = z.object({\n  type: z.literal(\"retrieval_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  dataSources: z.array(DataSourceConfigurationSchema),\n  action: RetrievalActionTypeSchema,\n});\n\nconst TablesQueryStartedEventSchema = z.object({\n  type: z.literal(\"tables_query_started\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: TablesQueryActionTypeSchema,\n});\n\nconst TablesQueryModelOutputEventSchema = z.object({\n  type: z.literal(\"tables_query_model_output\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: TablesQueryActionTypeSchema,\n});\n\nconst TablesQueryOutputEventSchema = z.object({\n  type: z.literal(\"tables_query_output\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: TablesQueryActionTypeSchema,\n});\n\nconst WebsearchParamsEventSchema = z.object({\n  type: z.literal(\"websearch_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: WebsearchActionTypeSchema,\n});\n\nconst ReasoningStartedEventSchema = z.object({\n  type: z.literal(\"reasoning_started\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: ReasoningActionTypeSchema,\n});\n\nconst ReasoningThinkingEventSchema = z.object({\n  type: z.literal(\"reasoning_thinking\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: ReasoningActionTypeSchema,\n});\n\nconst ReasoningTokensEventSchema = z.object({\n  type: z.literal(\"reasoning_tokens\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: ReasoningActionTypeSchema,\n  content: z.string(),\n  classification: TokensClassificationSchema,\n});\n\nconst SearchLabelsParamsEventSchema = z.object({\n  type: z.literal(\"search_labels_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: SearchLabelsActionTypeSchema,\n});\n\nconst MCPParamsEventSchema = z.object({\n  type: z.literal(\"tool_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: MCPActionTypeSchema,\n});\n\nconst AgentErrorEventSchema = z.object({\n  type: z.literal(\"agent_error\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n  }),\n});\nexport type AgentErrorEvent = z.infer<typeof AgentErrorEventSchema>;\n\nconst AgentActionSpecificEventSchema = z.union([\n  BrowseParamsEventSchema,\n  ConversationIncludeFileParamsEventSchema,\n  DustAppRunBlockEventSchema,\n  DustAppRunParamsEventSchema,\n  ProcessParamsEventSchema,\n  ReasoningStartedEventSchema,\n  ReasoningThinkingEventSchema,\n  ReasoningTokensEventSchema,\n  RetrievalParamsEventSchema,\n  SearchLabelsParamsEventSchema,\n  TablesQueryModelOutputEventSchema,\n  TablesQueryOutputEventSchema,\n  TablesQueryStartedEventSchema,\n  WebsearchParamsEventSchema,\n  MCPParamsEventSchema,\n]);\nexport type AgentActionSpecificEvent = z.infer<\n  typeof AgentActionSpecificEventSchema\n>;\n\nconst AgentActionSuccessEventSchema = z.object({\n  type: z.literal(\"agent_action_success\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: AgentActionTypeSchema,\n});\nexport type AgentActionSuccessEvent = z.infer<\n  typeof AgentActionSuccessEventSchema\n>;\n\nconst AgentMessageSuccessEventSchema = z.object({\n  type: z.literal(\"agent_message_success\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  message: AgentMessageTypeSchema,\n  runIds: z.array(z.string()),\n});\nexport type AgentMessageSuccessEvent = z.infer<\n  typeof AgentMessageSuccessEventSchema\n>;\n\nconst AgentGenerationCancelledEventSchema = z.object({\n  type: z.literal(\"agent_generation_cancelled\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n});\nexport type AgentGenerationCancelledEvent = z.infer<\n  typeof AgentGenerationCancelledEventSchema\n>;\n\nconst UserMessageErrorEventSchema = z.object({\n  type: z.literal(\"user_message_error\"),\n  created: z.number(),\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n  }),\n});\nexport type UserMessageErrorEvent = z.infer<typeof UserMessageErrorEventSchema>;\n\n// Event sent when the user message is created.\nconst UserMessageNewEventSchema = z.object({\n  type: z.literal(\"user_message_new\"),\n  created: z.number(),\n  messageId: z.string(),\n  message: UserMessageSchema.and(RankSchema),\n});\nexport type UserMessageNewEvent = z.infer<typeof UserMessageNewEventSchema>;\n\n// Event sent when a new message is created (empty) and the agent is about to be executed.\nconst AgentMessageNewEventSchema = z.object({\n  type: z.literal(\"agent_message_new\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  message: AgentMessageTypeSchema.and(RankSchema),\n});\nexport type AgentMessageNewEvent = z.infer<typeof AgentMessageNewEventSchema>;\n\n// Event sent when the conversation title is updated.\nconst ConversationTitleEventSchema = z.object({\n  type: z.literal(\"conversation_title\"),\n  created: z.number(),\n  title: z.string(),\n});\nexport type ConversationTitleEvent = z.infer<\n  typeof ConversationTitleEventSchema\n>;\n\nconst ConversationEventTypeSchema = z.object({\n  eventId: z.string(),\n  data: z.union([\n    UserMessageNewEventSchema,\n    AgentMessageNewEventSchema,\n    AgentGenerationCancelledEventSchema,\n    ConversationTitleEventSchema,\n  ]),\n});\n\nexport type ConversationEventType = z.infer<typeof ConversationEventTypeSchema>;\n\nconst AgentMessageEventTypeSchema = z.object({\n  eventId: z.string(),\n  data: z.union([\n    AgentErrorEventSchema,\n    AgentActionSpecificEventSchema,\n    AgentActionSuccessEventSchema,\n    AgentGenerationCancelledEventSchema,\n    GenerationTokensEventSchema,\n  ]),\n});\n\nexport type AgentMessageEventType = z.infer<typeof AgentMessageEventTypeSchema>;\n\nexport const CoreAPIErrorSchema = z.object({\n  message: z.string(),\n  code: z.string(),\n});\n\nexport type CoreAPIError = z.infer<typeof CoreAPIErrorSchema>;\n\nexport const CoreAPITokenTypeSchema = z.tuple([z.number(), z.string()]);\nexport type CoreAPITokenType = z.infer<typeof CoreAPITokenTypeSchema>;\n\nconst APIErrorTypeSchema = FlexibleEnumSchema<\n  | \"action_api_error\"\n  | \"action_failed\"\n  | \"action_unknown_error\"\n  | \"agent_configuration_not_found\"\n  | \"agent_message_error\"\n  | \"app_auth_error\"\n  | \"app_not_found\"\n  | \"assistant_saving_error\"\n  | \"chat_message_not_found\"\n  | \"connector_credentials_error\"\n  | \"connector_not_found_error\"\n  | \"connector_oauth_target_mismatch\"\n  | \"connector_provider_not_supported\"\n  | \"connector_update_error\"\n  | \"connector_update_unauthorized\"\n  | \"content_too_large\"\n  | \"conversation_access_restricted\"\n  | \"conversation_not_found\"\n  | \"data_source_auth_error\"\n  | \"data_source_document_not_found\"\n  | \"data_source_error\"\n  | \"data_source_not_found\"\n  | \"data_source_not_managed\"\n  | \"data_source_quota_error\"\n  | \"data_source_view_not_found\"\n  | \"dataset_not_found\"\n  | \"dust_app_secret_not_found\"\n  | \"expired_oauth_token_error\"\n  | \"feature_flag_already_exists\"\n  | \"feature_flag_not_found\"\n  | \"file_not_found\"\n  | \"file_too_large\"\n  | \"file_type_not_supported\"\n  | \"global_agent_error\"\n  | \"group_not_found\"\n  | \"internal_server_error\"\n  | \"invalid_api_key_error\"\n  | \"invalid_oauth_token_error\"\n  | \"invalid_pagination_parameters\"\n  | \"invalid_request_error\"\n  | \"invalid_rows_request_error\"\n  | \"invitation_already_sent_recently\"\n  | \"invitation_not_found\"\n  | \"key_not_found\"\n  | \"malformed_authorization_header_error\"\n  | \"membership_not_found\"\n  | \"message_not_found\"\n  | \"method_not_supported_error\"\n  | \"missing_authorization_header_error\"\n  | \"not_authenticated\"\n  | \"personal_workspace_not_found\"\n  | \"plan_limit_error\"\n  | \"plan_message_limit_exceeded\"\n  | \"plugin_execution_failed\"\n  | \"plugin_not_found\"\n  | \"provider_auth_error\"\n  | \"provider_not_found\"\n  | \"rate_limit_error\"\n  | \"run_error\"\n  | \"run_not_found\"\n  | \"space_already_exists\"\n  | \"space_not_found\"\n  | \"stripe_invalid_product_id_error\"\n  | \"subscription_not_found\"\n  | \"subscription_payment_failed\"\n  | \"subscription_state_invalid\"\n  | \"table_not_found\"\n  | \"template_not_found\"\n  | \"template_not_found\"\n  | \"transcripts_configuration_already_exists\"\n  | \"transcripts_configuration_default_not_allowed\"\n  | \"transcripts_configuration_not_found\"\n  | \"unexpected_action_response\"\n  | \"unexpected_error_format\"\n  | \"unexpected_network_error\"\n  | \"unexpected_response_format\"\n  | \"user_not_found\"\n  | \"workspace_auth_error\"\n  | \"workspace_not_found\"\n  | \"workspace_not_found\"\n  | \"workspace_user_not_found\"\n>();\n\nexport const APIErrorSchema = z.object({\n  type: APIErrorTypeSchema,\n  message: z.string(),\n  data_source_error: CoreAPIErrorSchema.optional(),\n  run_error: CoreAPIErrorSchema.optional(),\n  app_error: CoreAPIErrorSchema.optional(),\n  connectors_error: ConnectorsAPIErrorSchema.optional(),\n});\nexport type APIError = z.infer<typeof APIErrorSchema>;\n\nexport const WorkspaceDomainSchema = z.object({\n  domain: z.string(),\n  domainAutoJoinEnabled: z.boolean(),\n});\n\nexport type WorkspaceDomainType = z.infer<typeof WorkspaceDomainSchema>;\n\nexport const DustAppTypeSchema = z.object({\n  appHash: z.string(),\n  appId: z.string(),\n  workspaceId: z.string(),\n});\n\nexport type DustAppType = z.infer<typeof DustAppTypeSchema>;\n\nexport const DustAppConfigTypeSchema = z.record(z.unknown());\nexport type DustAppConfigType = z.infer<typeof DustAppConfigTypeSchema>;\n\nexport const DustAppRunErroredEventSchema = z.object({\n  type: z.literal(\"error\"),\n  content: z.object({\n    code: z.string(),\n    message: z.string(),\n  }),\n});\nexport type DustAppRunErroredEvent = z.infer<\n  typeof DustAppRunErroredEventSchema\n>;\n\nexport const DustAppRunRunStatusEventSchema = z.object({\n  type: z.literal(\"run_status\"),\n  content: z.object({\n    status: z.enum([\"running\", \"succeeded\", \"errored\"]),\n    run_id: z.string(),\n  }),\n});\nexport type DustAppRunRunStatusEvent = z.infer<\n  typeof DustAppRunRunStatusEventSchema\n>;\n\nexport const DustAppRunBlockStatusEventSchema = z.object({\n  type: z.literal(\"block_status\"),\n  content: z.object({\n    block_type: BlockTypeSchema,\n    name: z.string(),\n    status: StatusSchema,\n    success_count: z.number(),\n    error_count: z.number(),\n  }),\n});\nexport type DustAppRunBlockStatusEvent = z.infer<\n  typeof DustAppRunBlockStatusEventSchema\n>;\n\nexport const DustAppRunBlockExecutionEventSchema = z.object({\n  type: z.literal(\"block_execution\"),\n  content: z.object({\n    block_type: BlockTypeSchema,\n    block_name: z.string(),\n    execution: z.array(\n      z.array(\n        z.object({\n          value: z.unknown().nullable(),\n          error: z.string().nullable(),\n          meta: z.unknown().nullable(),\n        })\n      )\n    ),\n  }),\n});\nexport type DustAppRunBlockExecutionEvent = z.infer<\n  typeof DustAppRunBlockExecutionEventSchema\n>;\nexport const DustAppRunFinalEventSchema = z.object({\n  type: z.literal(\"final\"),\n});\nexport type DustAppRunFinalEvent = z.infer<typeof DustAppRunFinalEventSchema>;\n\nexport const DustAppRunTokensEventSchema = z.object({\n  type: z.literal(\"tokens\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    tokens: z.object({\n      text: z.string(),\n      tokens: z.array(z.string()).optional(),\n      logprobs: z.array(z.number()).optional(),\n    }),\n  }),\n});\nexport type DustAppRunTokensEvent = z.infer<typeof DustAppRunTokensEventSchema>;\n\nexport const DustAppRunFunctionCallEventSchema = z.object({\n  type: z.literal(\"function_call\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    function_call: z.object({\n      name: z.string(),\n    }),\n  }),\n});\nexport type DustAppRunFunctionCallEvent = z.infer<\n  typeof DustAppRunFunctionCallEventSchema\n>;\n\nexport const DustAppRunFunctionCallArgumentsTokensEventSchema = z.object({\n  type: z.literal(\"function_call_arguments_tokens\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    tokens: z.object({\n      text: z.string(),\n    }),\n  }),\n});\nexport type DustAppRunFunctionCallArgumentsTokensEvent = z.infer<\n  typeof DustAppRunFunctionCallArgumentsTokensEventSchema\n>;\nexport type DustAPICredentials = {\n  apiKey: string | (() => string | null | Promise<string | null>);\n  workspaceId: string;\n  extraHeaders?: Record<string, string>;\n};\n\nconst SpaceKindSchema = FlexibleEnumSchema<\n  \"regular\" | \"global\" | \"system\" | \"public\" | \"conversations\"\n>();\n\nconst SpaceTypeSchema = z.object({\n  createdAt: z.number(),\n  groupIds: z.array(z.string()),\n  isRestricted: z.boolean(),\n  kind: SpaceKindSchema,\n  name: z.string(),\n  sId: z.string(),\n  updatedAt: z.number(),\n});\n\nexport type SpaceType = z.infer<typeof SpaceTypeSchema>;\n\nconst DatasetSchemaEntryType = FlexibleEnumSchema<\n  \"string\" | \"number\" | \"boolean\" | \"json\"\n>();\n\nconst DatasetSchema = z.object({\n  name: z.string(),\n  description: z.string().nullable(),\n  data: z.array(z.record(z.any())).nullable().optional(),\n  schema: z\n    .array(\n      z.object({\n        key: z.string(),\n        type: DatasetSchemaEntryType,\n        description: z.string().nullable(),\n      })\n    )\n    .nullable()\n    .optional(),\n});\n\nconst AppTypeSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  name: z.string(),\n  description: z.string().nullable(),\n  savedSpecification: z.string().nullable(),\n  savedConfig: z.string().nullable(),\n  savedRun: z.string().nullable(),\n  dustAPIProjectId: z.string(),\n  space: SpaceTypeSchema,\n  datasets: z.array(DatasetSchema).optional(),\n  coreSpecifications: z.record(z.string()).optional(),\n});\n\nexport type ApiAppType = z.infer<typeof AppTypeSchema>;\n\nexport const RunAppResponseSchema = z.object({\n  run: RunTypeSchema,\n});\n\nexport type RunAppResponseType = z.infer<typeof RunAppResponseSchema>;\n\nexport const GetDataSourcesResponseSchema = z.object({\n  data_sources: DataSourceTypeSchema.array(),\n});\n\nexport type GetDataSourcesResponseType = z.infer<\n  typeof GetDataSourcesResponseSchema\n>;\n\nexport const GetOrPatchAgentConfigurationResponseSchema = z.object({\n  agentConfiguration: LightAgentConfigurationSchema,\n});\n\nexport type GetOrPatchAgentConfigurationResponseType = z.infer<\n  typeof GetOrPatchAgentConfigurationResponseSchema\n>;\n\nexport const PatchAgentConfigurationRequestSchema = z.object({\n  userFavorite: z.boolean().optional(),\n});\n\nexport type PatchAgentConfigurationRequestType = z.infer<\n  typeof PatchAgentConfigurationRequestSchema\n>;\n\nexport const GetAgentConfigurationsResponseSchema = z.object({\n  agentConfigurations: LightAgentConfigurationSchema.array(),\n});\n\nexport type GetAgentConfigurationsResponseType = z.infer<\n  typeof GetAgentConfigurationsResponseSchema\n>;\n\nexport const PostContentFragmentResponseSchema = z.object({\n  contentFragment: ContentFragmentSchema,\n});\n\nexport type PostContentFragmentResponseType = z.infer<\n  typeof PostContentFragmentResponseSchema\n>;\n\nexport const CreateConversationResponseSchema = z.object({\n  conversation: ConversationSchema,\n  message: UserMessageSchema,\n});\n\nexport type CreateConversationResponseType = z.infer<\n  typeof CreateConversationResponseSchema\n>;\n\nexport const GetFeedbacksResponseSchema = z.object({\n  feedbacks: z.array(AgentMesssageFeedbackSchema),\n});\n\nexport type GetFeedbacksResponseType = z.infer<\n  typeof GetFeedbacksResponseSchema\n>;\n\nexport const PublicPostMessageFeedbackRequestBodySchema = z.object({\n  thumbDirection: z.string(),\n  feedbackContent: z.string().nullable().optional(),\n  isConversationShared: z.boolean().optional(),\n});\n\nexport type PublicPostMessageFeedbackRequestBody = z.infer<\n  typeof PublicPostMessageFeedbackRequestBodySchema\n>;\n\nexport const PostMessageFeedbackResponseSchema = z.object({\n  success: z.literal(true),\n});\n\nexport const PostUserMessageResponseSchema = z.object({\n  message: UserMessageSchema,\n});\n\nexport type PostUserMessageResponseType = z.infer<\n  typeof PostUserMessageResponseSchema\n>;\n\nexport const GetConversationResponseSchema = z.object({\n  conversation: ConversationSchema,\n});\n\nexport type GetConversationResponseType = z.infer<\n  typeof GetConversationResponseSchema\n>;\n\nexport const TokenizeResponseSchema = z.object({\n  tokens: CoreAPITokenTypeSchema.array(),\n});\n\nexport type TokenizeResponseType = z.infer<typeof TokenizeResponseSchema>;\n\nexport const GetActiveMemberEmailsInWorkspaceResponseSchema = z.object({\n  emails: z.array(z.string()),\n});\n\nexport type GetActiveMemberEmailsInWorkspaceResponseType = z.infer<\n  typeof GetActiveMemberEmailsInWorkspaceResponseSchema\n>;\n\nexport const GetWorkspaceVerifiedDomainsResponseSchema = z.object({\n  verified_domains: WorkspaceDomainSchema.array(),\n});\n\nexport type GetWorkspaceVerifiedDomainsResponseType = z.infer<\n  typeof GetWorkspaceVerifiedDomainsResponseSchema\n>;\n\nexport const GetWorkspaceFeatureFlagsResponseSchema = z.object({\n  feature_flags: WhitelistableFeaturesSchema.array(),\n});\n\nexport type GetWorkspaceFeatureFlagsResponseType = z.infer<\n  typeof GetWorkspaceFeatureFlagsResponseSchema\n>;\n\nexport const PublicPostMessagesRequestBodySchema = z.intersection(\n  z.object({\n    content: z.string().min(1),\n    mentions: z.array(\n      z.object({\n        configurationId: z.string(),\n      })\n    ),\n    context: UserMessageContextSchema,\n  }),\n  z\n    .object({\n      blocking: z.boolean().optional(),\n    })\n    .partial()\n);\n\nexport type PublicPostMessagesRequestBody = z.infer<\n  typeof PublicPostMessagesRequestBodySchema\n>;\n\nexport type PostMessagesResponseBody = {\n  message: UserMessageType;\n  agentMessages?: AgentMessagePublicType[];\n};\n\nexport const PublicPostEditMessagesRequestBodySchema = z.object({\n  content: z.string(),\n  mentions: z.array(\n    z.object({\n      configurationId: z.string(),\n    })\n  ),\n});\n\nexport type PublicPostEditMessagesRequestBody = z.infer<\n  typeof PublicPostEditMessagesRequestBodySchema\n>;\n\nexport const PublicContentFragmentWithContentSchema = z.object({\n  title: z.string(),\n  url: z.string().optional().nullable(),\n  content: z.string(),\n  contentType: z.string(),\n  fileId: z.undefined().nullable(),\n  nodeId: z.undefined().nullable(),\n  nodeDataSourceViewId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  // Undocumented for now -- allows to supersede an existing content fragment.\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport type PublicContentFragmentWithContent = z.infer<\n  typeof PublicContentFragmentWithContentSchema\n>;\n\nexport const PublicContentFragmentWithFileIdSchema = z.object({\n  title: z.string(),\n  fileId: z.string(),\n  url: z.string().optional().nullable(),\n  content: z.undefined().nullable(),\n  contentType: z.undefined().nullable(),\n  nodeId: z.undefined().nullable(),\n  nodeDataSourceViewId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  // Undocumented for now -- allows to supersede an existing content fragment.\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport type PublicContentFragmentWithFileId = z.infer<\n  typeof PublicContentFragmentWithFileIdSchema\n>;\n\nconst PublicContentFragmentWithContentNodeSchema = z.object({\n  title: z.string(),\n  nodeId: z.string(),\n  nodeDataSourceViewId: z.string(),\n  url: z.undefined().nullable(),\n  content: z.undefined().nullable(),\n  contentType: z.undefined().nullable(),\n  fileId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport const PublicPostContentFragmentRequestBodySchema = z.union([\n  PublicContentFragmentWithContentSchema,\n  PublicContentFragmentWithFileIdSchema,\n  PublicContentFragmentWithContentNodeSchema,\n]);\n\nexport type PublicPostContentFragmentRequestBody = z.infer<\n  typeof PublicPostContentFragmentRequestBodySchema\n>;\n\nexport const PublicPostConversationsRequestBodySchema = z.intersection(\n  z.object({\n    title: z.string().nullable().optional(),\n    visibility: z\n      .enum([\"unlisted\", \"workspace\", \"deleted\", \"test\"])\n      .optional()\n      .default(\"unlisted\"),\n    message: z.union([\n      z.intersection(\n        z.object({\n          content: z.string().min(1),\n          mentions: z.array(\n            z.object({\n              configurationId: z.string(),\n            })\n          ),\n          context: UserMessageContextSchema,\n        }),\n        z\n          .object({\n            blocking: z.boolean().optional(),\n          })\n          .partial()\n      ),\n      z.undefined(),\n    ]),\n    contentFragment: z.union([\n      PublicContentFragmentWithContentSchema,\n      PublicContentFragmentWithFileIdSchema,\n      PublicContentFragmentWithContentNodeSchema,\n      z.undefined(),\n    ]),\n    contentFragments: z.union([\n      z\n        .union([\n          PublicContentFragmentWithContentSchema,\n          PublicContentFragmentWithFileIdSchema,\n          PublicContentFragmentWithContentNodeSchema,\n        ])\n        .array(),\n      z.undefined(),\n    ]),\n  }),\n  z\n    .object({\n      blocking: z.boolean().optional(),\n    })\n    .partial()\n);\n\nexport type PublicPostConversationsRequestBody = z.infer<\n  typeof PublicPostConversationsRequestBodySchema\n>;\n\nexport const PostConversationsResponseSchema = z.object({\n  conversation: ConversationSchema,\n  message: UserMessageSchema.optional(),\n  contentFragment: ContentFragmentSchema.optional(),\n});\n\nexport type PostConversationsResponseType = z.infer<\n  typeof PostConversationsResponseSchema\n>;\n\nexport const GetConversationsResponseSchema = z.object({\n  conversations: ConversationWithoutContentSchema.array(),\n});\nexport type GetConversationsResponseType = z.infer<\n  typeof GetConversationsResponseSchema\n>;\n\nexport const SearchDataSourceViewsRequestSchema = z.object({\n  dataSourceId: z.string().optional(),\n  kind: z.string().optional(),\n  vaultId: z.string().optional(),\n  vaultKind: z.string().optional(),\n});\n\nexport const SearchDataSourceViewsResponseSchema = z.object({\n  data_source_views: DataSourceViewSchema.array(),\n});\n\nexport type SearchDataSourceViewsResponseType = z.infer<\n  typeof SearchDataSourceViewsResponseSchema\n>;\n\nconst ListMemberEmailsResponseSchema = z.object({\n  emails: z.array(z.string()),\n});\n\nexport type ListMemberEmailsResponseType = z.infer<\n  typeof ListMemberEmailsResponseSchema\n>;\n\nexport const ValidateMemberRequestSchema = z.object({\n  email: z.string(),\n});\n\nconst ValidateMemberResponseSchema = z.object({\n  valid: z.boolean(),\n});\n\nexport type ValidateMemberResponseType = z.infer<\n  typeof ValidateMemberResponseSchema\n>;\n\nexport const GetAppsResponseSchema = z.object({\n  apps: AppTypeSchema.array(),\n});\n\nexport const PostAppsRequestSchema = z.object({\n  apps: AppTypeSchema.array(),\n});\n\nexport type GetAppsResponseType = z.infer<typeof GetAppsResponseSchema>;\n\nexport const ImportAppsResponseSchema = z.object({\n  apps: z\n    .object({\n      sId: z.string(),\n      name: z.string(),\n      error: z.string().optional(),\n    })\n    .array(),\n});\n\nexport type ImportAppsResponseType = z.infer<typeof ImportAppsResponseSchema>;\n\nexport const DataSourceViewResponseSchema = z.object({\n  dataSourceView: DataSourceViewSchema,\n});\n\nexport type DataSourceViewResponseType = z.infer<\n  typeof DataSourceViewResponseSchema\n>;\n\nexport const PatchDataSourceViewRequestSchema = z.union([\n  z\n    .object({\n      parentsToAdd: z.union([z.array(z.string()), z.undefined()]),\n      parentsToRemove: z.array(z.string()).optional(),\n    })\n    // For the fields to be not optional, see https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field\n    .transform((o) => ({\n      parentsToAdd: o.parentsToAdd,\n      parentsToRemove: o.parentsToRemove,\n    })),\n  z.object({\n    parentsIn: z.array(z.string()),\n  }),\n]);\n\nexport type PatchDataSourceViewRequestType = z.infer<\n  typeof PatchDataSourceViewRequestSchema\n>;\n\nexport const DataSourceSearchQuerySchema = z.object({\n  query: z.string(),\n  top_k: z.coerce.number(),\n  full_text: z.coerce.boolean(),\n  target_document_tokens: z.coerce.number().optional(),\n  timestamp_gt: z.coerce.number().optional(),\n  timestamp_lt: z.coerce.number().optional(),\n  tags_in: z.array(z.string()).optional(),\n  tags_not: z.array(z.string()).optional(),\n  parents_in: z.array(z.string()).optional(),\n  parents_not: z.array(z.string()).optional(),\n});\n\nexport type DataSourceSearchQuery = z.infer<typeof DataSourceSearchQuerySchema>;\n\nconst DataSourceSearchResponseSchema = z.object({\n  documents: CoreAPIDocumentSchema.array(),\n});\n\nexport type DataSourceSearchResponseType = z.infer<\n  typeof DataSourceSearchResponseSchema\n>;\n\nconst DataSourceViewsListResponseSchema = z.object({\n  dataSourceViews: DataSourceViewSchema.array(),\n});\n\nexport type DataSourceViewsListResponseType = z.infer<\n  typeof DataSourceViewsListResponseSchema\n>;\n\ntype FrontDataSourceDocumentSection = {\n  prefix: string | null;\n  content: string | null;\n  sections: FrontDataSourceDocumentSection[];\n};\n\nconst FrontDataSourceDocumentSectionSchema: z.ZodSchema<FrontDataSourceDocumentSection> =\n  z.lazy(() =>\n    z.object({\n      prefix: z.string().nullable(),\n      content: z.string().nullable(),\n      sections: z.array(FrontDataSourceDocumentSectionSchema),\n    })\n  );\n\nexport const PostDataSourceDocumentRequestSchema = z.object({\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  source_url: z.string().nullable().optional(),\n  upsert_context: z\n    .object({\n      sync_type: z.union([z.enum([\"batch\", \"incremental\"]), z.undefined()]),\n    }) // For the fields to be not optional, see https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field\n    .transform((o) => ({\n      sync_type: o.sync_type,\n    }))\n    .optional(),\n  text: z.string().nullable().optional(),\n  section: FrontDataSourceDocumentSectionSchema.nullable().optional(),\n  light_document_output: z.boolean().optional(),\n  async: z.boolean().nullable().optional(),\n  mime_type: z.string().nullable().optional(),\n  title: z.string().nullable().optional(),\n});\n\nexport type PostDataSourceDocumentRequestType = z.infer<\n  typeof PostDataSourceDocumentRequestSchema\n>;\n\nconst GetDocumentResponseSchema = z.object({\n  document: CoreAPIDocumentSchema,\n});\nexport type GetDocumentResponseType = z.infer<typeof GetDocumentResponseSchema>;\n\nconst DeleteDocumentResponseSchema = z.object({\n  document: z.object({\n    document_id: z.string(),\n  }),\n});\nexport type DeleteDocumentResponseType = z.infer<\n  typeof DeleteDocumentResponseSchema\n>;\n\nconst UpsertDocumentResponseSchema = z.object({\n  document: z.union([\n    CoreAPIDocumentSchema,\n    CoreAPILightDocumentSchema,\n    z.object({\n      document_id: z.string(),\n    }),\n  ]),\n  data_source: DataSourceTypeSchema,\n});\nexport type UpsertDocumentResponseType = z.infer<\n  typeof UpsertDocumentResponseSchema\n>;\n\nconst PostParentsResponseSchema = z.object({\n  updated: z.boolean(),\n});\nexport type PostParentsResponseType = z.infer<typeof PostParentsResponseSchema>;\n\nconst GetDocumentsResponseSchema = z.object({\n  documents: z.array(CoreAPIDocumentSchema),\n  total: z.number(),\n});\n\nexport type GetDocumentsResponseType = z.infer<\n  typeof GetDocumentsResponseSchema\n>;\n\nconst GetTableRowsResponseSchema = z.object({\n  row: CoreAPIRowSchema,\n});\n\nexport type GetTableRowsResponseType = z.infer<\n  typeof GetTableRowsResponseSchema\n>;\nexport const UpsertTableRowsRequestSchema = z.object({\n  rows: z.array(\n    z.object({\n      row_id: z.string(),\n      value: z.record(\n        z\n          .union([\n            z.string(),\n            z.number(),\n            z.boolean(),\n            z.object({\n              type: z.literal(\"datetime\"),\n              epoch: z.number(),\n            }),\n          ])\n          .nullable()\n      ),\n    })\n  ),\n  truncate: z.boolean().optional(),\n});\n\nexport type CellValueType = z.infer<\n  typeof UpsertTableRowsRequestSchema\n>[\"rows\"][number][\"value\"][string];\n\nconst UpsertTableRowsResponseSchema = z.object({\n  table: z.object({\n    name: z.string(),\n    table_id: z.string(),\n    description: z.string(),\n    schema: CoreAPITableSchema.nullable(),\n  }),\n});\n\nexport type UpsertTableRowsResponseType = z.infer<\n  typeof UpsertTableRowsResponseSchema\n>;\n\nconst ListTableRowsResponseSchema = z.object({\n  rows: z.array(CoreAPIRowSchema),\n  offset: z.number(),\n  limit: z.number(),\n  total: z.number(),\n});\nexport type ListTableRowsResponseType = z.infer<\n  typeof ListTableRowsResponseSchema\n>;\n\nconst GetTableResponseSchema = z.object({\n  table: CoreAPITablePublicSchema,\n});\nexport type GetTableResponseType = z.infer<typeof GetTableResponseSchema>;\n\nexport const PostTableParentsRequestSchema = z.object({\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()),\n});\n\nconst PostTableParentsResponseSchema = z.object({\n  updated: z.literal(true),\n});\nexport type PostTableParentsResponseType = z.infer<\n  typeof PostTableParentsResponseSchema\n>;\n\nexport const UpsertTableFromCsvRequestSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parentId: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  truncate: z.boolean(),\n  async: z.boolean().optional(),\n  title: z.string(),\n  mimeType: z.string(),\n  sourceUrl: z.string().nullable().optional(),\n  tableId: z.string(),\n  fileId: z.string(),\n});\n\nexport type UpsertTableFromCsvRequestType = z.infer<\n  typeof UpsertTableFromCsvRequestSchema\n>;\n\nconst PostTableCSVAsyncResponseSchema = z.object({\n  table: z.object({\n    table_id: z.string(),\n  }),\n});\nexport type PostTableCSVAsyncResponseType = z.infer<\n  typeof PostTableCSVAsyncResponseSchema\n>;\n\nconst PostTableCSVResponseSchema = z.object({\n  table: CoreAPITableSchema,\n});\nexport type PostTableCSVResponseType = z.infer<\n  typeof PostTableCSVResponseSchema\n>;\n\nconst ListTablesResponseSchema = z.object({\n  tables: z.array(CoreAPITablePublicSchema),\n});\nexport type ListTablesResponseType = z.infer<typeof ListTablesResponseSchema>;\n\nexport const UpsertDatabaseTableRequestSchema = z.object({\n  table_id: z.string().optional(),\n  name: z.string(),\n  description: z.string(),\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  remote_database_table_id: z.string().nullable().optional(),\n  remote_database_secret_id: z.string().nullable().optional(),\n  title: z.string(),\n  mime_type: z.string().nullable().optional(),\n  source_url: z.string().nullable().optional(),\n});\n\nexport type UpsertDatabaseTableRequestType = z.infer<\n  typeof UpsertDatabaseTableRequestSchema\n>;\n\nconst UpsertTableResponseSchema = z.object({\n  table: CoreAPITablePublicSchema,\n});\nexport type UpsertTableResponseType = z.infer<typeof UpsertTableResponseSchema>;\n\nconst SupportedUsageTablesSchema = FlexibleEnumSchema<\n  | \"users\"\n  | \"assistant_messages\"\n  | \"builders\"\n  | \"assistants\"\n  | \"feedbacks\"\n  | \"all\"\n>();\n\nexport type UsageTableType = z.infer<typeof SupportedUsageTablesSchema>;\n\n// Folders\nconst CoreAPIFolderSchema = z.object({\n  data_source_id: z.string(),\n  folder_id: z.string(),\n  title: z.string(),\n  parents: z.array(z.string()),\n  timestamp: z.number(),\n});\n\nexport const GetFoldersResponseSchema = z.object({\n  folders: z.array(CoreAPIFolderSchema),\n  total: z.number(),\n});\nexport type GetFoldersResponseType = z.infer<typeof GetFoldersResponseSchema>;\n\nexport const GetFolderResponseSchema = z.object({\n  folder: CoreAPIFolderSchema,\n});\nexport type GetFolderResponseType = z.infer<typeof GetFolderResponseSchema>;\n\nexport const DeleteFolderResponseSchema = z.object({\n  folder: z.object({\n    folder_id: z.string(),\n  }),\n});\nexport type DeleteFolderResponseType = z.infer<\n  typeof DeleteFolderResponseSchema\n>;\nexport const UpsertFolderResponseSchema = z.object({\n  folder: CoreAPIFolderSchema,\n  data_source: DataSourceTypeSchema,\n});\nexport type UpsertFolderResponseType = z.infer<\n  typeof UpsertFolderResponseSchema\n>;\n\nconst ProviderVisibilitySchema = FlexibleEnumSchema<\"public\" | \"private\">();\n\nexport const UpsertDataSourceFolderRequestSchema = z.object({\n  timestamp: z.number(),\n  parents: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  title: z.string(),\n  mime_type: z.string(),\n  source_url: z.string().nullable().optional(),\n  provider_visibility: ProviderVisibilitySchema.nullable().optional(),\n});\nexport type UpsertDataSourceFolderRequestType = z.infer<\n  typeof UpsertDataSourceFolderRequestSchema\n>;\n\nconst DateSchema = z\n  .string()\n  .refine(\n    (s): s is string => /^\\d{4}-(0[1-9]|1[0-2])(-([0-2]\\d|3[01]))?$/.test(s),\n    \"YYYY-MM or YYYY-MM-DD\"\n  );\n\nexport const GetWorkspaceUsageRequestSchema = z.union([\n  z.object({\n    start: DateSchema,\n    end: z.undefined(),\n    mode: z.literal(\"month\"),\n    table: SupportedUsageTablesSchema,\n    format: z.enum([\"csv\", \"json\"]).optional().default(\"csv\"),\n  }),\n  z.object({\n    start: DateSchema,\n    end: DateSchema,\n    mode: z.literal(\"range\"),\n    table: SupportedUsageTablesSchema,\n    format: z.enum([\"csv\", \"json\"]).optional().default(\"csv\"),\n  }),\n]);\n\nexport type GetWorkspaceUsageRequestType = z.infer<\n  typeof GetWorkspaceUsageRequestSchema\n>;\n\nexport const FileUploadUrlRequestSchema = z.object({\n  contentType: SupportedFileContentFragmentTypeSchema,\n  fileName: z.string().max(4096, \"File name must be less than 4096 characters\"),\n  fileSize: z.number(),\n  useCase: z.union([z.literal(\"conversation\"), z.literal(\"upsert_table\")]),\n  useCaseMetadata: z\n    .object({\n      conversationId: z.string(),\n    })\n    .optional(),\n});\nexport type FileUploadUrlRequestType = z.infer<\n  typeof FileUploadUrlRequestSchema\n>;\n\nconst FileTypeStatusSchema = FlexibleEnumSchema<\n  \"created\" | \"failed\" | \"ready\"\n>();\n\nconst FileTypeUseCaseSchema = FlexibleEnumSchema<\n  \"conversation\" | \"avatar\" | \"tool_output\" | \"upsert_document\" | \"upsert_table\"\n>();\n\nexport const FileTypeSchema = z.object({\n  // TODO(spolu): move this to ModelIdSchema\n  id: z.string(),\n  sId: z.string(),\n  contentType: z.string(),\n  downloadUrl: z.string().optional(),\n  fileName: z.string(),\n  fileSize: z.number(),\n  status: FileTypeStatusSchema,\n  uploadUrl: z.string().optional(),\n  publicUrl: z.string().optional(),\n  useCase: FileTypeUseCaseSchema,\n});\nexport type FileType = z.infer<typeof FileTypeSchema>;\n\nexport const FileTypeWithUploadUrlSchema = FileTypeSchema.extend({\n  uploadUrl: z.string(),\n});\n\nexport const FileUploadRequestResponseSchema = z.object({\n  file: FileTypeWithUploadUrlSchema,\n});\nexport type FileUploadRequestResponseType = z.infer<\n  typeof FileUploadRequestResponseSchema\n>;\nexport const FileUploadedRequestResponseSchema = z.object({\n  file: FileTypeSchema,\n});\nexport type FileUploadedRequestResponseType = z.infer<\n  typeof FileUploadedRequestResponseSchema\n>;\n\nexport const MeResponseSchema = z.object({\n  user: UserSchema.and(\n    z.object({\n      workspaces: WorkspaceSchema.array().or(ExtensionWorkspaceSchema.array()),\n    })\n  ),\n});\n\nexport type MeResponseType = z.infer<typeof MeResponseSchema>;\n\nexport const CancelMessageGenerationResponseSchema = z.object({\n  success: z.literal(true),\n});\n\nexport type CancelMessageGenerationResponseType = z.infer<\n  typeof CancelMessageGenerationResponseSchema\n>;\n\nexport const CancelMessageGenerationRequestSchema = z.object({\n  messageIds: z.array(z.string()),\n});\n\nexport type CancelMessageGenerationRequestType = z.infer<\n  typeof CancelMessageGenerationRequestSchema\n>;\n\n// Typeguards.\n\nexport function isRetrievalActionType(\n  action: AgentActionPublicType\n): action is RetrievalActionPublicType {\n  return action.type === \"retrieval_action\";\n}\n\nexport function isWebsearchActionType(\n  action: AgentActionPublicType\n): action is WebsearchActionPublicType {\n  return action.type === \"websearch_action\";\n}\n\nexport function isTablesQueryActionType(\n  action: AgentActionPublicType\n): action is TablesQueryActionPublicType {\n  return action.type === \"tables_query_action\";\n}\n\nexport function isDustAppRunActionType(\n  action: AgentActionPublicType\n): action is DustAppRunActionPublicType {\n  return action.type === \"dust_app_run_action\";\n}\n\nexport function isProcessActionType(\n  action: AgentActionPublicType\n): action is ProcessActionPublicType {\n  return action.type === \"process_action\";\n}\n\nexport function BrowseActionPublicType(\n  action: AgentActionPublicType\n): action is BrowseActionPublicType {\n  return action.type === \"browse_action\";\n}\n\nexport function isReasoningActionType(\n  action: AgentActionPublicType\n): action is ReasoningActionPublicType {\n  return action.type === \"reasoning_action\";\n}\n\nexport function isSearchLabelsActionType(\n  action: AgentActionPublicType\n): action is SearchLabelsActionPublicType {\n  return action.type === \"search_labels_action\";\n}\n\nexport function isAgentMention(arg: AgentMentionType): arg is AgentMentionType {\n  return (arg as AgentMentionType).configurationId !== undefined;\n}\n\nexport function assertNever(x: never): never {\n  throw new Error(\n    `${\n      typeof x === \"object\" ? JSON.stringify(x) : x\n    } is not of type never. This should never happen.`\n  );\n}\n\nexport function removeNulls<T>(arr: (T | null | undefined)[]): T[] {\n  return arr.filter((v): v is T => v !== null && v !== undefined);\n}\n\ntype ConnectorProviderDocumentType =\n  | Exclude<ConnectorProvider, \"webcrawler\">\n  | \"document\";\n\nexport function getProviderFromRetrievedDocument(\n  document: RetrievalDocumentPublicType\n): ConnectorProviderDocumentType {\n  if (document.dataSourceView) {\n    if (document.dataSourceView.dataSource.connectorProvider === \"webcrawler\") {\n      return \"document\";\n    }\n    return document.dataSourceView.dataSource.connectorProvider || \"document\";\n  }\n  return \"document\";\n}\n\nexport function getTitleFromRetrievedDocument(\n  document: RetrievalDocumentPublicType\n): string {\n  const provider = getProviderFromRetrievedDocument(document);\n\n  if (provider === \"slack\") {\n    for (const t of document.tags) {\n      if (t.startsWith(\"channelName:\")) {\n        return `#${t.substring(12)}`;\n      }\n    }\n  }\n\n  for (const t of document.tags) {\n    if (t.startsWith(\"title:\")) {\n      return t.substring(6);\n    }\n  }\n\n  return document.documentId;\n}\n\nexport const AppsCheckRequestSchema = z.object({\n  apps: z.array(\n    z.object({\n      appId: z.string(),\n      appHash: z.string(),\n    })\n  ),\n});\n\nexport type AppsCheckRequestType = z.infer<typeof AppsCheckRequestSchema>;\n\nexport const AppsCheckResponseSchema = z.object({\n  apps: z.array(\n    z.object({\n      appId: z.string(),\n      appHash: z.string(),\n      deployed: z.boolean(),\n    })\n  ),\n});\n\nexport type AppsCheckResponseType = z.infer<typeof AppsCheckResponseSchema>;\n\nexport const GetSpacesResponseSchema = z.object({\n  spaces: z.array(SpaceTypeSchema),\n});\n\nexport type GetSpacesResponseType = z.infer<typeof GetSpacesResponseSchema>;\n\nexport const ContentNodeTypeSchema = z.union([\n  z.literal(\"document\"),\n  z.literal(\"table\"),\n  z.literal(\"folder\"),\n]);\n\nexport const ContentNodesViewTypeSchema = z.union([\n  z.literal(\"table\"),\n  z.literal(\"document\"),\n  z.literal(\"all\"),\n]);\n\nexport type ContentNodesViewType = z.infer<typeof ContentNodesViewTypeSchema>;\n\nexport const BaseSearchBodySchema = z.object({\n  viewType: ContentNodesViewTypeSchema,\n  spaceIds: z.array(z.string()),\n  includeDataSources: z.boolean(),\n  limit: z.number(),\n});\n\nconst TextSearchBodySchema = z.intersection(\n  BaseSearchBodySchema,\n  z.object({\n    query: z.string(),\n    nodeIds: z.undefined().optional(),\n  })\n);\n\nconst NodeIdSearchBodySchema = z.intersection(\n  BaseSearchBodySchema,\n  z.object({\n    nodeIds: z.array(z.string()),\n    query: z.undefined().optional(),\n  })\n);\n\nexport const SearchRequestBodySchema = z.union([\n  TextSearchBodySchema,\n  NodeIdSearchBodySchema,\n]);\n\nexport type SearchRequestBodyType = z.infer<typeof SearchRequestBodySchema>;\n\nexport const ContentNodeSchema = z.object({\n  expandable: z.boolean(),\n  internalId: z.string(),\n  lastUpdatedAt: z.number().nullable(),\n  mimeType: z.string(),\n  // The direct parent ID of this content node\n  parentInternalId: z.string().nullable(),\n  // permission: ConnectorPermissionSchema,\n  preventSelection: z.boolean().optional(),\n  providerVisibility: ProviderVisibilitySchema.nullable().optional(),\n  sourceUrl: z.string().nullable().optional(),\n  title: z.string(),\n  type: ContentNodeTypeSchema,\n});\n\nexport type ContentNodeType = z.infer<typeof ContentNodeSchema>;\n\nexport const ContentNodeWithParentSchema = z.intersection(\n  ContentNodeSchema,\n  z.object({\n    parentsInternalIds: z.array(z.string()).optional(),\n    parentTitle: z.string().optional().nullable(),\n  })\n);\n\nexport const DataSourceContentNodeSchema = z.intersection(\n  ContentNodeWithParentSchema,\n  z.object({\n    dataSource: DataSourceTypeSchema,\n    dataSourceViews: DataSourceViewSchema.array(),\n  })\n);\n\nexport type DataSourceContentNodeType = z.infer<\n  typeof DataSourceContentNodeSchema\n>;\n\nexport const DataSourceViewContentNodeSchema = z.intersection(\n  ContentNodeWithParentSchema,\n  z.object({\n    dataSourceView: DataSourceViewSchema,\n  })\n);\n\nexport type DataSourceViewContentNodeType = z.infer<\n  typeof DataSourceViewContentNodeSchema\n>;\n\nexport const SearchWarningCodeSchema = z.literal(\"truncated-query-clauses\");\n\nexport type SearchWarningCode = z.infer<typeof SearchWarningCodeSchema>;\n\nexport const PostWorkspaceSearchResponseBodySchema = z.object({\n  nodes: DataSourceContentNodeSchema.array(),\n  warningCode: SearchWarningCodeSchema.optional().nullable(),\n});\n\nexport type PostWorkspaceSearchResponseBodyType = z.infer<\n  typeof PostWorkspaceSearchResponseBodySchema\n>;\n\n// TODO(mcp) move somewhere else as we'll need dynamic labels for MCP.\nexport const ACTION_RUNNING_LABELS: Record<\n  AgentActionPublicType[\"type\"],\n  string\n> = {\n  browse_action: \"Browsing page\",\n  conversation_include_file_action: \"Reading file\",\n  conversation_list_files_action: \"Listing files\",\n  dust_app_run_action: \"Running App\",\n  process_action: \"Extracting data\",\n  reasoning_action: \"Reasoning\",\n  retrieval_action: \"Searching data\",\n  search_labels_action: \"Searching labels\",\n  tables_query_action: \"Querying tables\",\n  websearch_action: \"Searching the web\",\n  tool_action: \"Calling MCP Server\",\n};\n","import { ConnectorProvider } from \"./types\";\n\n/**\n * This is a utility type that indicates that we removed all underscores from a string.\n * This is used because we don't want underscores in mime types and remove them from connector providers.\n */\ntype WithoutUnderscores<T extends string> = T extends `${infer A}_${infer B}`\n  ? WithoutUnderscores<`${A}${B}`> // operates recursively to remove all underscores\n  : T;\n\n/**\n * This is a utility type that indicates that we replaced all underscores with dashes in a string.\n * We don't want underscores in mime types but want to type out the type with one: MIME_TYPE.CAT.SOU_PI_NOU\n */\ntype UnderscoreToDash<T extends string> = T extends `${infer A}_${infer B}`\n  ? UnderscoreToDash<`${A}-${B}`> // operates recursively to replace all underscores\n  : T;\n\n/**\n * This function generates mime types for a given provider and resource types.\n * The mime types are in the format `application/vnd.dust.PROVIDER.RESOURCE_TYPE`.\n * Notes:\n * - The underscores in the provider name are stripped in the generated mime type.\n * - The underscores in the resource type are replaced with dashes in the generated mime type.\n */\nfunction generateConnectorRelativeMimeTypes<\n  P extends ConnectorProvider,\n  T extends Uppercase<string>[]\n>({\n  provider,\n  resourceTypes,\n}: {\n  provider: P;\n  resourceTypes: T;\n}): {\n  [K in T[number]]: `application/vnd.dust.${WithoutUnderscores<P>}.${Lowercase<\n    UnderscoreToDash<K>\n  >}`;\n} {\n  return resourceTypes.reduce(\n    (acc, s) => ({\n      ...acc,\n      [s]: `application/vnd.dust.${provider.replace(\"_\", \"\")}.${s\n        .replace(\"_\", \"-\")\n        .toLowerCase()}`,\n    }),\n    {} as {\n      [K in T[number]]: `application/vnd.dust.${WithoutUnderscores<P>}.${Lowercase<\n        UnderscoreToDash<K>\n      >}`;\n    }\n  );\n}\n\nexport const CONTENT_NODE_MIME_TYPES = {\n  CONFLUENCE: generateConnectorRelativeMimeTypes({\n    provider: \"confluence\",\n    resourceTypes: [\"SPACE\", \"PAGE\"],\n  }),\n  GITHUB: generateConnectorRelativeMimeTypes({\n    provider: \"github\",\n    resourceTypes: [\n      \"REPOSITORY\",\n      \"CODE_ROOT\",\n      \"CODE_DIRECTORY\",\n      \"CODE_FILE\",\n      // ISSUES is the folder containing all issues.\n      \"ISSUES\",\n      // ISSUE is a single issue.\n      \"ISSUE\",\n      // DISCUSSIONS is the folder containing all discussions.\n      \"DISCUSSIONS\",\n      // DISCUSSION is a single discussion.\n      \"DISCUSSION\",\n    ],\n  }),\n  GOOGLE_DRIVE: generateConnectorRelativeMimeTypes({\n    provider: \"google_drive\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are stored as such, but with\n    // the special mimeType below.  For files and sheets, we keep Google's mime types.\n    resourceTypes: [\"SHARED_WITH_ME\", \"FOLDER\", \"SPREADSHEET\"],\n  }),\n  INTERCOM: generateConnectorRelativeMimeTypes({\n    provider: \"intercom\",\n    resourceTypes: [\n      \"COLLECTION\",\n      \"TEAMS_FOLDER\",\n      \"CONVERSATION\",\n      \"TEAM\",\n      \"ARTICLE\",\n      \"HELP_CENTER\",\n    ],\n  }),\n  MICROSOFT: generateConnectorRelativeMimeTypes({\n    provider: \"microsoft\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are\n    // stored as such, but with the special mimeType below.\n    // For files and sheets, we keep Microsoft's mime types.\n    resourceTypes: [\"FOLDER\", \"SPREADSHEET\"],\n  }),\n  NOTION: generateConnectorRelativeMimeTypes({\n    provider: \"notion\",\n    resourceTypes: [\"UNKNOWN_FOLDER\", \"SYNCING_FOLDER\", \"DATABASE\", \"PAGE\"],\n  }),\n  SLACK: generateConnectorRelativeMimeTypes({\n    provider: \"slack\",\n    resourceTypes: [\"CHANNEL\", \"THREAD\", \"MESSAGES\"],\n  }),\n  SNOWFLAKE: generateConnectorRelativeMimeTypes({\n    provider: \"snowflake\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  WEBCRAWLER: generateConnectorRelativeMimeTypes({\n    provider: \"webcrawler\",\n    resourceTypes: [\"FOLDER\"], // pages are upserted as text/html, not an internal mime type\n  }),\n  ZENDESK: generateConnectorRelativeMimeTypes({\n    provider: \"zendesk\",\n    resourceTypes: [\n      \"BRAND\",\n      \"HELP_CENTER\",\n      \"CATEGORY\",\n      \"ARTICLE\",\n      // TICKETS is the folder containing all tickets.\n      \"TICKETS\",\n      // TICKET is a single ticket.\n      \"TICKET\",\n    ],\n  }),\n  BIGQUERY: generateConnectorRelativeMimeTypes({\n    provider: \"bigquery\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  SALESFORCE: generateConnectorRelativeMimeTypes({\n    provider: \"salesforce\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  GONG: generateConnectorRelativeMimeTypes({\n    provider: \"gong\",\n    resourceTypes: [\"TRANSCRIPT\", \"TRANSCRIPT_FOLDER\"],\n  }),\n};\n\nconst TOOL_INPUT_MIME_TYPES = {\n  // If we get other similar mime types we'll add an util function just like above.\n  CONFIGURATION: {\n    DATA_SOURCE: \"application/vnd.dust.data-source-configuration\",\n  },\n};\n\nexport const INTERNAL_MIME_TYPES = {\n  ...CONTENT_NODE_MIME_TYPES,\n  ...TOOL_INPUT_MIME_TYPES,\n};\n\nexport const INTERNAL_MIME_TYPES_VALUES = Object.values(CONTENT_NODE_MIME_TYPES).flatMap(\n  (value) => Object.values(value).map((v) => v)\n);\n\nexport type BigQueryMimeType =\n  (typeof INTERNAL_MIME_TYPES.BIGQUERY)[keyof typeof INTERNAL_MIME_TYPES.BIGQUERY];\n\nexport type ConfluenceMimeType =\n  (typeof INTERNAL_MIME_TYPES.CONFLUENCE)[keyof typeof INTERNAL_MIME_TYPES.CONFLUENCE];\n\nexport type GithubMimeType =\n  (typeof INTERNAL_MIME_TYPES.GITHUB)[keyof typeof INTERNAL_MIME_TYPES.GITHUB];\n\nexport type GoogleDriveMimeType =\n  (typeof INTERNAL_MIME_TYPES.GOOGLE_DRIVE)[keyof typeof INTERNAL_MIME_TYPES.GOOGLE_DRIVE];\n\nexport type IntercomMimeType =\n  (typeof INTERNAL_MIME_TYPES.INTERCOM)[keyof typeof INTERNAL_MIME_TYPES.INTERCOM];\n\nexport type MicrosoftMimeType =\n  (typeof INTERNAL_MIME_TYPES.MICROSOFT)[keyof typeof INTERNAL_MIME_TYPES.MICROSOFT];\n\nexport type NotionMimeType =\n  (typeof INTERNAL_MIME_TYPES.NOTION)[keyof typeof INTERNAL_MIME_TYPES.NOTION];\n\nexport type SlackMimeType =\n  (typeof INTERNAL_MIME_TYPES.SLACK)[keyof typeof INTERNAL_MIME_TYPES.SLACK];\n\nexport type SnowflakeMimeType =\n  (typeof INTERNAL_MIME_TYPES.SNOWFLAKE)[keyof typeof INTERNAL_MIME_TYPES.SNOWFLAKE];\n\nexport type WebcrawlerMimeType =\n  (typeof INTERNAL_MIME_TYPES.WEBCRAWLER)[keyof typeof INTERNAL_MIME_TYPES.WEBCRAWLER];\n\nexport type ZendeskMimeType =\n  (typeof INTERNAL_MIME_TYPES.ZENDESK)[keyof typeof INTERNAL_MIME_TYPES.ZENDESK];\n\nexport type SalesforceMimeType =\n  (typeof INTERNAL_MIME_TYPES.SALESFORCE)[keyof typeof INTERNAL_MIME_TYPES.SALESFORCE];\n\nexport type GongMimeType =\n  (typeof INTERNAL_MIME_TYPES.GONG)[keyof typeof INTERNAL_MIME_TYPES.GONG];\n\nexport type DustMimeType =\n  | BigQueryMimeType\n  | ConfluenceMimeType\n  | GithubMimeType\n  | GoogleDriveMimeType\n  | IntercomMimeType\n  | MicrosoftMimeType\n  | NotionMimeType\n  | SlackMimeType\n  | SnowflakeMimeType\n  | WebcrawlerMimeType\n  | ZendeskMimeType\n  | SalesforceMimeType\n  | GongMimeType;\n\nexport function isDustMimeType(mimeType: string): mimeType is DustMimeType {\n  return (INTERNAL_MIME_TYPES_VALUES as string[]).includes(mimeType);\n}\n","import type { AxiosRequestConfig } from \"axios\";\nimport axios from \"axios\";\nimport { createParser } from \"eventsource-parser\";\nimport http from \"http\";\nimport https from \"https\";\nimport { Readable } from \"stream\";\nimport { z } from \"zod\";\n\nimport type {\n  AgentActionSpecificEvent,\n  AgentActionSuccessEvent,\n  AgentConfigurationViewType,\n  AgentErrorEvent,\n  AgentMessagePublicType,\n  AgentMessageSuccessEvent,\n  APIError,\n  AppsCheckRequestType,\n  CancelMessageGenerationRequestType,\n  ConversationPublicType,\n  DataSourceViewType,\n  DustAPICredentials,\n  DustAppConfigType,\n  DustAppRunBlockExecutionEvent,\n  DustAppRunBlockStatusEvent,\n  DustAppRunErroredEvent,\n  DustAppRunFinalEvent,\n  DustAppRunFunctionCallArgumentsTokensEvent,\n  DustAppRunFunctionCallEvent,\n  DustAppRunRunStatusEvent,\n  DustAppRunTokensEvent,\n  FileUploadedRequestResponseType,\n  FileUploadUrlRequestType,\n  GenerationTokensEvent,\n  LoggerInterface,\n  PatchDataSourceViewRequestType,\n  PublicPostContentFragmentRequestBody,\n  PublicPostConversationsRequestBody,\n  PublicPostMessageFeedbackRequestBody,\n  PublicPostMessagesRequestBody,\n  SearchRequestBodyType,\n  UserMessageErrorEvent,\n} from \"./types\";\nimport {\n  APIErrorSchema,\n  AppsCheckResponseSchema,\n  CancelMessageGenerationResponseSchema,\n  CreateConversationResponseSchema,\n  DataSourceViewResponseSchema,\n  DeleteFolderResponseSchema,\n  Err,\n  FileUploadRequestResponseSchema,\n  GetActiveMemberEmailsInWorkspaceResponseSchema,\n  GetAgentConfigurationsResponseSchema,\n  GetAppsResponseSchema,\n  GetConversationResponseSchema,\n  GetConversationsResponseSchema,\n  GetDataSourcesResponseSchema,\n  GetFeedbacksResponseSchema,\n  GetSpacesResponseSchema,\n  GetWorkspaceFeatureFlagsResponseSchema,\n  GetWorkspaceVerifiedDomainsResponseSchema,\n  MeResponseSchema,\n  Ok,\n  PostContentFragmentResponseSchema,\n  PostMessageFeedbackResponseSchema,\n  PostUserMessageResponseSchema,\n  PostWorkspaceSearchResponseBodySchema,\n  Result,\n  RunAppResponseSchema,\n  SearchDataSourceViewsResponseSchema,\n  TokenizeResponseSchema,\n  UpsertFolderResponseSchema,\n} from \"./types\";\n\nexport * from \"./internal_mime_types\";\nexport * from \"./types\";\ninterface DustResponse {\n  status: number;\n  ok: boolean;\n  url: string;\n  body: Readable | string;\n}\n\nconst textFromResponse = async (response: DustResponse): Promise<string> => {\n  if (typeof response.body === \"string\") {\n    return response.body;\n  }\n\n  const stream = response.body;\n\n  return new Promise((resolve, reject) => {\n    const chunks: Buffer[] = [];\n    stream.on(\"data\", (chunk) => chunks.push(Buffer.from(chunk)));\n    stream.on(\"end\", () => resolve(Buffer.concat(chunks).toString(\"utf-8\")));\n    stream.on(\"error\", reject);\n  });\n};\n\nconst axiosNoKeepAlive = axios.create({\n  httpAgent: new http.Agent({ keepAlive: false }),\n  httpsAgent: new https.Agent({ keepAlive: false }),\n});\n\nconst sanitizedError = (e: unknown) => {\n  if (axios.isAxiosError(e)) {\n    return {\n      ...e,\n      config: undefined,\n    };\n  }\n  return e;\n};\n\ntype RequestArgsType = {\n  method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n  path: string;\n  query?: URLSearchParams;\n  body?: Record<string, unknown>;\n  overrideWorkspaceId?: string;\n  signal?: AbortSignal;\n};\n\nexport class DustAPI {\n  _url: string;\n  _credentials: DustAPICredentials;\n  _logger: LoggerInterface;\n  _urlOverride: string | undefined | null;\n\n  /**\n   * @param credentials DustAPICrededentials\n   */\n  constructor(\n    config: {\n      url: string;\n    },\n    credentials: DustAPICredentials,\n    logger: LoggerInterface,\n    urlOverride?: string | undefined | null\n  ) {\n    this._url = config.url;\n    this._credentials = credentials;\n    this._logger = logger;\n    this._urlOverride = urlOverride;\n  }\n\n  workspaceId(): string {\n    return this._credentials.workspaceId;\n  }\n\n  setWorkspaceId(workspaceId: string) {\n    this._credentials.workspaceId = workspaceId;\n  }\n\n  apiUrl(): string {\n    return this._urlOverride ? this._urlOverride : this._url;\n  }\n\n  async getApiKey(): Promise<string | null> {\n    if (typeof this._credentials.apiKey === \"function\") {\n      return this._credentials.apiKey();\n    }\n    return this._credentials.apiKey;\n  }\n\n  async baseHeaders() {\n    const headers: RequestInit[\"headers\"] = {\n      Authorization: `Bearer ${await this.getApiKey()}`,\n    };\n    if (this._credentials.extraHeaders) {\n      Object.assign(headers, this._credentials.extraHeaders);\n    }\n    return headers;\n  }\n\n  /**\n   * Fetches the current user's information from the API.\n   *\n   * This method sends a GET request to the `/api/v1/me` endpoint with the necessary authorization\n   * headers. It then processes the response to extract the user information.  Note that this will\n   * only work if you are using an OAuth2 token. It will always fail with a workspace API key.\n   *\n   * @returns {Promise<Result<User, Error>>} A promise that resolves to a Result object containing\n   * either the user information or an error.\n   */\n  async me() {\n    // This method call directly _fetchWithError and _resultFromResponse as it's a little special:\n    // it doesn't live under the workspace resource.\n    const headers: RequestInit[\"headers\"] = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await this.getApiKey()}`,\n    };\n\n    const res = await this._fetchWithError(`${this.apiUrl()}/api/v1/me`, {\n      method: \"GET\",\n      headers,\n    });\n\n    const r = await this._resultFromResponse(MeResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.user);\n  }\n\n  async request(args: RequestArgsType) {\n    // Conveniently clean path from any leading \"/\" just in case\n    args.path = args.path.replace(/^\\/+/, \"\");\n\n    let url = `${this.apiUrl()}/api/v1/w/${\n      args.overrideWorkspaceId ?? this.workspaceId()\n    }/${args.path}`;\n\n    if (args.query) {\n      url += `?${args.query.toString()}`;\n    }\n\n    const headers = await this.baseHeaders();\n    headers[\"Content-Type\"] = \"application/json\";\n\n    const res = await this._fetchWithError(url, {\n      method: args.method,\n      headers,\n      data: args.body ? JSON.stringify(args.body) : undefined,\n      signal: args.signal,\n    });\n\n    return res;\n  }\n\n  /**\n   * This functions talks directly to the Dust production API to create a run.\n   *\n   * @param app DustAppType the app to run streamed\n   * @param config DustAppConfigType the app config\n   * @param inputs any[] the app inputs\n   */\n  async runApp(\n    {\n      workspaceId,\n      appId,\n      appHash,\n      appSpaceId,\n    }: {\n      workspaceId: string;\n      appId: string;\n      appSpaceId: string;\n      appHash: string;\n    },\n    config: DustAppConfigType,\n    inputs: unknown[],\n    { useWorkspaceCredentials }: { useWorkspaceCredentials: boolean } = {\n      useWorkspaceCredentials: false,\n    }\n  ) {\n    const res = await this.request({\n      overrideWorkspaceId: workspaceId,\n      path: `spaces/${appSpaceId}/apps/${appId}/runs`,\n      query: new URLSearchParams({\n        use_workspace_credentials: useWorkspaceCredentials ? \"true\" : \"false\",\n      }),\n      method: \"POST\",\n      body: {\n        specification_hash: appHash,\n        config,\n        stream: false,\n        blocking: true,\n        inputs,\n      },\n    });\n\n    const r = await this._resultFromResponse(RunAppResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.run);\n  }\n\n  /**\n   * This functions talks directly to the Dust production API to create a streamed run.\n   *\n   * @param app DustAppType the app to run streamed\n   * @param config DustAppConfigType the app config\n   * @param inputs any[] the app inputs\n   */\n  async runAppStreamed(\n    {\n      workspaceId,\n      appId,\n      appHash,\n      appSpaceId,\n    }: {\n      workspaceId: string;\n      appId: string;\n      appSpaceId: string;\n      appHash: string;\n    },\n    config: DustAppConfigType,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    inputs: any[],\n    { useWorkspaceCredentials }: { useWorkspaceCredentials: boolean } = {\n      useWorkspaceCredentials: false,\n    }\n  ) {\n    const res = await this.request({\n      overrideWorkspaceId: workspaceId,\n      path: `spaces/${appSpaceId}/apps/${appId}/runs`,\n      query: new URLSearchParams({\n        use_workspace_credentials: useWorkspaceCredentials ? \"true\" : \"false\",\n      }),\n      method: \"POST\",\n      body: {\n        specification_hash: appHash,\n        config,\n        stream: true,\n        blocking: false,\n        inputs,\n      },\n    });\n\n    if (res.isErr()) {\n      return res;\n    }\n\n    /**\n     * This help functions process a streamed response in the format of the Dust API for running\n     * streamed apps.\n     *\n     * @param res an HTTP response ready to be consumed as a stream\n     */\n    async function processStreamedRunResponse(\n      res: DustResponse,\n      logger: LoggerInterface\n    ) {\n      if (!res.ok || !res.body) {\n        return new Err({\n          type: \"dust_api_error\",\n          message: `Error running streamed app: status_code=${res.status}`,\n        });\n      }\n\n      let hasRunId = false;\n      let rejectDustRunIdPromise: (err: Error) => void;\n      let resolveDustRunIdPromise: (runId: string) => void;\n      const dustRunIdPromise = new Promise<string>((resolve, reject) => {\n        rejectDustRunIdPromise = reject;\n        resolveDustRunIdPromise = resolve;\n      });\n\n      let pendingEvents: (\n        | DustAppRunErroredEvent\n        | DustAppRunRunStatusEvent\n        | DustAppRunBlockStatusEvent\n        | DustAppRunBlockExecutionEvent\n        | DustAppRunTokensEvent\n        | DustAppRunFunctionCallEvent\n        | DustAppRunFunctionCallArgumentsTokensEvent\n        | DustAppRunFinalEvent\n      )[] = [];\n\n      const parser = createParser((event) => {\n        if (event.type === \"event\") {\n          if (event.data) {\n            try {\n              const data = JSON.parse(event.data);\n\n              switch (data.type) {\n                case \"error\": {\n                  pendingEvents.push({\n                    type: \"error\",\n                    content: {\n                      code: data.content.code,\n                      message: data.content.message,\n                    },\n                  } as DustAppRunErroredEvent);\n                  break;\n                }\n                case \"run_status\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"block_status\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"block_execution\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"tokens\": {\n                  pendingEvents.push({\n                    type: \"tokens\",\n                    content: data.content,\n                  } as DustAppRunTokensEvent);\n                  break;\n                }\n                case \"function_call\": {\n                  pendingEvents.push({\n                    type: \"function_call\",\n                    content: data.content,\n                  } as DustAppRunFunctionCallEvent);\n                  break;\n                }\n                case \"function_call_arguments_tokens\": {\n                  pendingEvents.push({\n                    type: \"function_call_arguments_tokens\",\n                    content: data.content,\n                  } as DustAppRunFunctionCallArgumentsTokensEvent);\n                  break;\n                }\n                case \"final\": {\n                  pendingEvents.push({\n                    type: \"final\",\n                  } as DustAppRunFinalEvent);\n                }\n              }\n              if (data.content?.run_id && !hasRunId) {\n                hasRunId = true;\n                resolveDustRunIdPromise(data.content.run_id);\n              }\n            } catch (err) {\n              logger.error(\n                { error: err },\n                \"Failed parsing chunk from Dust API\"\n              );\n            }\n          }\n        }\n      });\n\n      const reader = res.body;\n\n      const streamEvents = async function* () {\n        try {\n          for await (const chunk of reader) {\n            parser.feed(new TextDecoder().decode(chunk));\n            for (const event of pendingEvents) {\n              yield event;\n            }\n            pendingEvents = [];\n          }\n          // while (true) {\n          //   const { done, value } = await reader.read();\n          //   if (done) {\n          //     break;\n          //   }\n          //   parser.feed(new TextDecoder().decode(value));\n          //   for (const event of pendingEvents) {\n          //     yield event;\n          //   }\n          //   pendingEvents = [];\n          // }\n          if (!hasRunId) {\n            // Once the stream is entirely consumed, if we haven't received a run id, reject the\n            // promise.\n            setImmediate(() => {\n              logger.error({}, \"No run id received.\");\n              rejectDustRunIdPromise(new Error(\"No run id received\"));\n            });\n          }\n        } catch (e) {\n          logger.error(\n            {\n              error: e,\n              errorStr: JSON.stringify(e),\n              errorSource: \"processStreamedRunResponse\",\n            },\n            \"DustAPI error: streaming chunks\"\n          );\n          yield {\n            type: \"error\",\n            content: {\n              code: \"stream_error\",\n              message: \"Error streaming chunks\",\n            },\n          } as DustAppRunErroredEvent;\n        }\n      };\n\n      return new Ok({\n        eventStream: streamEvents(),\n        dustRunId: dustRunIdPromise,\n      });\n    }\n\n    return processStreamedRunResponse(res.value.response, this._logger);\n  }\n\n  /**\n   * This actions talks to the Dust production API to retrieve the list of data sources of the\n   * current workspace.\n   */\n  async getDataSources() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"data_sources\",\n    });\n\n    const r = await this._resultFromResponse(GetDataSourcesResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.data_sources);\n  }\n\n  async getAgentConfigurations({\n    view,\n    includes = [],\n  }: {\n    view?: AgentConfigurationViewType;\n    includes?: \"authors\"[];\n  }) {\n    // Function to generate query parameters.\n    function getQueryString() {\n      const params = new URLSearchParams();\n      if (typeof view === \"string\") {\n        params.append(\"view\", view);\n      }\n      if (includes.includes(\"authors\")) {\n        params.append(\"withAuthors\", \"true\");\n      }\n\n      return params.toString();\n    }\n\n    const queryString = view || includes.length > 0 ? getQueryString() : null;\n    const path = queryString\n      ? `assistant/agent_configurations?${queryString}`\n      : \"assistant/agent_configurations\";\n\n    const res = await this.request({\n      path,\n      method: \"GET\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetAgentConfigurationsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.agentConfigurations);\n  }\n\n  async postContentFragment({\n    conversationId,\n    contentFragment,\n  }: {\n    conversationId: string;\n    contentFragment: PublicPostContentFragmentRequestBody;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/content_fragments`,\n      body: { ...contentFragment },\n    });\n\n    const r = await this._resultFromResponse(\n      PostContentFragmentResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.contentFragment);\n  }\n\n  // When creating a conversation with a user message, the API returns only after the user message\n  // was created (and if applicable the associated agent messages).\n  async createConversation({\n    title,\n    visibility,\n    message,\n    contentFragment,\n    contentFragments,\n    blocking = false,\n  }: PublicPostConversationsRequestBody) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"assistant/conversations\",\n      body: {\n        title,\n        visibility,\n        message,\n        contentFragment,\n        contentFragments,\n        blocking,\n      },\n    });\n\n    return this._resultFromResponse(CreateConversationResponseSchema, res);\n  }\n\n  async postUserMessage({\n    conversationId,\n    message,\n  }: {\n    conversationId: string;\n    message: PublicPostMessagesRequestBody;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages`,\n      body: { ...message },\n    });\n\n    const r = await this._resultFromResponse(\n      PostUserMessageResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.message);\n  }\n\n  async streamAgentAnswerEvents({\n    conversation,\n    userMessageId,\n    signal,\n  }: {\n    conversation: ConversationPublicType;\n    userMessageId: string;\n    signal?: AbortSignal;\n  }) {\n    // find the agent message with the parentMessageId equal to the user message id\n    const agentMessages = conversation.content\n      .map((versions) => {\n        const m = versions[versions.length - 1];\n        return m;\n      })\n      .filter((m): m is AgentMessagePublicType => {\n        return (\n          m && m.type === \"agent_message\" && m.parentMessageId === userMessageId\n        );\n      });\n    if (agentMessages.length === 0) {\n      return new Err(new Error(\"Failed to retrieve agent message\"));\n    }\n\n    const agentMessage = agentMessages[0];\n    return this.streamAgentMessageEvents({\n      conversation,\n      agentMessage,\n      signal,\n    });\n  }\n\n  async streamAgentMessageEvents({\n    conversation,\n    agentMessage,\n    signal,\n  }: {\n    conversation: ConversationPublicType;\n    agentMessage: AgentMessagePublicType;\n    signal?: AbortSignal;\n  }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversation.sId}/messages/${agentMessage.sId}/events`,\n      signal,\n    });\n\n    if (res.isErr()) {\n      return res;\n    }\n\n    if (!res.value.response.ok || !res.value.response.body) {\n      return new Err({\n        type: \"dust_api_error\",\n        message: `Error running streamed app: status_code=${\n          res.value.response.status\n        }  - message=${await textFromResponse(res.value.response)}`,\n      });\n    }\n\n    let pendingEvents: (\n      | UserMessageErrorEvent\n      | AgentErrorEvent\n      | AgentActionSuccessEvent\n      | GenerationTokensEvent\n      | AgentMessageSuccessEvent\n      | AgentActionSpecificEvent\n    )[] = [];\n\n    const parser = createParser((event) => {\n      if (event.type === \"event\") {\n        if (event.data) {\n          try {\n            const data = JSON.parse(event.data).data;\n            // TODO: shall we use the schema to validate the data?\n            switch (data.type) {\n              case \"user_message_error\": {\n                pendingEvents.push(data as UserMessageErrorEvent);\n                break;\n              }\n              case \"agent_error\": {\n                pendingEvents.push(data as AgentErrorEvent);\n                break;\n              }\n              case \"agent_action_success\": {\n                pendingEvents.push(data as AgentActionSuccessEvent);\n                break;\n              }\n              case \"generation_tokens\": {\n                pendingEvents.push(data as GenerationTokensEvent);\n                break;\n              }\n              case \"agent_message_success\": {\n                pendingEvents.push(data as AgentMessageSuccessEvent);\n                break;\n              }\n              case \"browse_params\":\n              case \"dust_app_run_block\":\n              case \"dust_app_run_params\":\n              case \"process_params\":\n              case \"retrieval_params\":\n              case \"search_labels_params\":\n              case \"tables_query_output\":\n              case \"tables_query_params\":\n              case \"websearch_params\":\n                pendingEvents.push(data as AgentActionSpecificEvent);\n                break;\n            }\n          } catch (err) {\n            this._logger.error(\n              { error: err },\n              \"Failed parsing chunk from Dust API\"\n            );\n          }\n        }\n      }\n    });\n\n    const reader = res.value.response.body;\n    const logger = this._logger;\n\n    const streamEvents = async function* () {\n      try {\n        for await (const chunk of reader) {\n          parser.feed(new TextDecoder().decode(chunk));\n          for (const event of pendingEvents) {\n            yield event;\n          }\n          pendingEvents = [];\n        }\n      } catch (e) {\n        logger.error(\n          {\n            error: e,\n            errorStr: JSON.stringify(e),\n            errorSource: \"streamAgentAnswerEvents\",\n          },\n          \"DustAPI error: streaming chunks\"\n        );\n        yield {\n          type: \"error\",\n          content: {\n            code: \"stream_error\",\n            message: \"Error streaming chunks\",\n          },\n        } as DustAppRunErroredEvent;\n      }\n    };\n\n    return new Ok({ eventStream: streamEvents() });\n  }\n\n  async cancelMessageGeneration({\n    conversationId,\n    messageIds,\n  }: {\n    conversationId: string;\n    messageIds: string[];\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/cancel`,\n      body: {\n        messageIds,\n      } as CancelMessageGenerationRequestType,\n    });\n\n    const r = await this._resultFromResponse(\n      CancelMessageGenerationResponseSchema,\n      res\n    );\n\n    if (r.isErr()) {\n      return r;\n    } else {\n      return new Ok(r.value);\n    }\n  }\n\n  async getConversations() {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations`,\n    });\n\n    const r = await this._resultFromResponse(\n      GetConversationsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.conversations);\n  }\n\n  async getConversation({ conversationId }: { conversationId: string }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversationId}`,\n    });\n\n    const r = await this._resultFromResponse(\n      GetConversationResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.conversation);\n  }\n\n  async getConversationFeedback({\n    conversationId,\n  }: {\n    conversationId: string;\n  }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversationId}/feedbacks`,\n    });\n\n    const r = await this._resultFromResponse(GetFeedbacksResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.feedbacks);\n  }\n\n  async postFeedback(\n    conversationId: string,\n    messageId: string,\n    feedback: PublicPostMessageFeedbackRequestBody\n  ) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/feedbacks`,\n      body: feedback,\n    });\n\n    return this._resultFromResponse(PostMessageFeedbackResponseSchema, res);\n  }\n\n  async deleteFeedback(conversationId: string, messageId: string) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/feedbacks`,\n    });\n\n    return this._resultFromResponse(PostMessageFeedbackResponseSchema, res);\n  }\n\n  async tokenize(text: string, dataSourceId: string) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `data_sources/${dataSourceId}/tokenize`,\n      body: { text },\n    });\n\n    const r = await this._resultFromResponse(TokenizeResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.tokens);\n  }\n\n  async upsertFolder({\n    dataSourceId,\n    folderId,\n    timestamp,\n    title,\n    parentId,\n    parents,\n    mimeType,\n    sourceUrl,\n    providerVisibility,\n  }: {\n    dataSourceId: string;\n    folderId: string;\n    timestamp: number;\n    title: string;\n    parentId: string | null;\n    parents: string[];\n    mimeType: string;\n    sourceUrl: string | null;\n    providerVisibility: \"public\" | \"private\" | null;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `data_sources/${dataSourceId}/folders/${encodeURIComponent(\n        folderId\n      )}`,\n      body: {\n        timestamp: Math.floor(timestamp),\n        title,\n        parent_id: parentId,\n        parents,\n        mime_type: mimeType,\n        source_url: sourceUrl,\n        provider_visibility: providerVisibility,\n      },\n    });\n\n    const r = await this._resultFromResponse(UpsertFolderResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value);\n  }\n\n  async deleteFolder({\n    dataSourceId,\n    folderId,\n  }: {\n    dataSourceId: string;\n    folderId: string;\n  }) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `data_sources/${dataSourceId}/folders/${encodeURIComponent(\n        folderId\n      )}`,\n    });\n\n    const r = await this._resultFromResponse(DeleteFolderResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value);\n  }\n\n  async uploadFile({\n    contentType,\n    fileName,\n    fileSize,\n    useCase,\n    useCaseMetadata,\n    fileObject,\n  }: FileUploadUrlRequestType & { fileObject: File }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"files\",\n      body: {\n        contentType,\n        fileName,\n        fileSize,\n        useCase,\n        useCaseMetadata,\n      },\n    });\n\n    const fileRes = await this._resultFromResponse(\n      FileUploadRequestResponseSchema,\n      res\n    );\n\n    if (fileRes.isErr()) {\n      return fileRes;\n    }\n\n    const { file } = fileRes.value;\n\n    const formData = new FormData();\n    formData.append(\"file\", fileObject);\n\n    // Upload file to the obtained URL.\n    try {\n      const {\n        data: { file: fileUploaded },\n      } = await axiosNoKeepAlive.post<FileUploadedRequestResponseType>(\n        file.uploadUrl,\n        formData,\n        { headers: await this.baseHeaders() }\n      );\n      return new Ok(fileUploaded);\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        return new Err(\n          new Error(\n            err.response?.data?.error?.message || \"Failed to upload file\"\n          )\n        );\n      }\n      return new Err(\n        new Error(err instanceof Error ? err.message : \"Unknown error\")\n      );\n    }\n  }\n\n  async deleteFile({ fileID }: { fileID: string }) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `files/${fileID}`,\n    });\n\n    return res;\n  }\n\n  async getActiveMemberEmailsInWorkspace() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"members/emails\",\n      query: new URLSearchParams({ activeOnly: \"true\" }),\n    });\n\n    const r = await this._resultFromResponse(\n      GetActiveMemberEmailsInWorkspaceResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.emails);\n  }\n\n  async getWorkspaceVerifiedDomains() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"verified_domains\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetWorkspaceVerifiedDomainsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.verified_domains);\n  }\n\n  async getWorkspaceFeatureFlags() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"feature_flags\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetWorkspaceFeatureFlagsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.feature_flags);\n  }\n\n  async searchDataSourceViews(searchParams: URLSearchParams) {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"data_source_views/search\",\n      query: searchParams,\n    });\n\n    const r = await this._resultFromResponse(\n      SearchDataSourceViewsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.data_source_views);\n  }\n\n  async patchDataSourceView(\n    dataSourceView: DataSourceViewType,\n    patch: PatchDataSourceViewRequestType\n  ) {\n    const res = await this.request({\n      method: \"PATCH\",\n      path: `spaces/${dataSourceView.spaceId}/data_source_views/${dataSourceView.sId}`,\n      body: patch,\n    });\n\n    const r = await this._resultFromResponse(DataSourceViewResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.dataSourceView);\n  }\n\n  async exportApps({ appSpaceId }: { appSpaceId: string }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `spaces/${appSpaceId}/apps/export`,\n    });\n\n    const r = await this._resultFromResponse(GetAppsResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.apps);\n  }\n\n  async checkApps(apps: AppsCheckRequestType, appSpaceId: string) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `spaces/${appSpaceId}/apps/check`,\n      body: apps,\n    });\n\n    const r = await this._resultFromResponse(AppsCheckResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.apps);\n  }\n\n  async getSpaces() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"spaces\",\n    });\n\n    const r = await this._resultFromResponse(GetSpacesResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.spaces);\n  }\n\n  async searchNodes(searchParams: SearchRequestBodyType) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"search\",\n      body: searchParams,\n    });\n\n    const r = await this._resultFromResponse(\n      PostWorkspaceSearchResponseBodySchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.nodes);\n  }\n\n  private async _fetchWithError(\n    url: string,\n    config?: AxiosRequestConfig\n  ): Promise<Result<{ response: DustResponse; duration: number }, APIError>> {\n    const now = Date.now();\n    try {\n      const res = await axiosNoKeepAlive<Readable | string>(url, {\n        validateStatus: () => true,\n        responseType: \"stream\",\n        ...config,\n      });\n      const response: DustResponse = {\n        status: res.status,\n        url: res.config.url || url,\n        body: res.data,\n        ok: res.status >= 200 && res.status < 300,\n      };\n      return new Ok({ response, duration: Date.now() - now });\n    } catch (e) {\n      const duration = Date.now() - now;\n      const err: APIError = {\n        type: \"unexpected_network_error\",\n        message: `Unexpected network error from DustAPI: ${e}`,\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          url,\n          duration,\n          connectorsError: err,\n          error: sanitizedError(e),\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n\n  private async _resultFromResponse<T extends z.ZodTypeAny>(\n    schema: T,\n    res: Result<\n      {\n        response: DustResponse;\n        duration: number;\n      },\n      APIError\n    >\n  ): Promise<Result<z.infer<T>, APIError>> {\n    if (res.isErr()) {\n      return res;\n    }\n\n    if (res.value.response.status === 413) {\n      const err: APIError = {\n        type: \"content_too_large\",\n        message:\n          \"Your request content is too large, please try again with a shorter content.\",\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n\n    // We get the text and attempt to parse so that we can log the raw text in case of error (the\n    // body is already consumed by response.json() if used otherwise).\n    const text = await textFromResponse(res.value.response);\n\n    try {\n      const response = JSON.parse(text);\n      const r = schema.safeParse(response);\n      // This assume that safe parsing means a 200 status.\n      if (r.success) {\n        return new Ok(r.data as z.infer<T>);\n      } else {\n        // We couldn't parse the response directly, maybe it's an error\n        const rErr = APIErrorSchema.safeParse(response[\"error\"]);\n        if (rErr.success) {\n          // Successfully parsed an error\n          this._logger.error(\n            {\n              dustError: rErr.data,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration,\n            },\n            \"DustAPI error\"\n          );\n          return new Err(rErr.data);\n        } else {\n          // Unexpected response format (neither an error nor a valid response)\n          const err: APIError = {\n            type: \"unexpected_response_format\",\n            message:\n              `Unexpected response format from DustAPI calling ` +\n              `${res.value.response.url} : ${r.error.message}`,\n          };\n          this._logger.error(\n            {\n              dustError: err,\n              parseError: r.error.message,\n              rawText: text,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration,\n            },\n            \"DustAPI error\"\n          );\n          return new Err(err);\n        }\n      }\n    } catch (e) {\n      const err: APIError = {\n        type: \"unexpected_response_format\",\n        message:\n          `Fail to parse response from DustAPI calling ` +\n          `${res.value.response.url} : ${e}`,\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          error: e,\n          rawText: text,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n}\n"],"names":["FlexibleEnumSchema","z","custom","val","ModelProviderIdSchema","ModelLLMIdSchema","EmbeddingProviderIdSchema","ConnectorsAPIErrorSchema","object","type","message","string","ModelIdSchema","number","supportedOtherFileFormats","supportedImageFileFormats","supportedOtherContentTypes","Object","keys","supportedImageContentTypes","supportedFileExtensions","concat","supportedUploadableContentType","SupportedContentFragmentTypeSchema","SupportedFileContentFragmentTypeSchema","UserMessageOriginSchema","or","undefined","VisibilitySchema","Ok","value","this","_proto","prototype","isOk","isErr","Err","error","_proto2","Timezone","refine","s","moment","tz","names","includes","ConnectorProvidersSchema","EditedByUserSchema","editedAt","nullable","fullName","imageUrl","email","userId","DataSourceTypeSchema","id","sId","createdAt","name","description","assistantDefaultSelected","dustAPIProjectId","dustAPIDataSourceId","connectorId","connectorProvider","editedByUser","optional","DataSourceViewCategoriesSchema","BlockTypeSchema","StatusSchema","BlockRunConfigSchema","record","any","BlockStatusSchema","block_type","status","success_count","error_count","RunConfigSchema","blocks","TraceTypeSchema","unknown","meta","RunStatusSchema","run","array","RunTypeSchema","run_id","created","run_type","app_hash","specification_hash","config","traces","tuple","results","TokensClassificationSchema","GenerationTokensEventSchema","literal","configurationId","messageId","text","classification","union","delimiterClassification","BaseActionSchema","BrowseActionOutputSchema","requestedUrl","browsedUrl","content","responseCode","errorMessage","BrowseActionTypeSchema","extend","agentMessageId","urls","output","functionCallId","functionCallName","step","SearchLabelsActionTypeSchema","tags","tag","match_count","data_sources","ReasoningActionTypeSchema","thinking","ConversationIncludeFileActionTypeSchema","params","fileId","tokensCount","fileTitle","ConversationListFilesActionTypeSchema","files","contentFragmentId","nodeDataSourceViewId","title","contentType","DustAppParametersSchema","DustAppRunActionTypeSchema","appWorkspaceId","appId","appName","runningBlock","transform","o","_extends","DataSourceViewKindSchema","DataSourceViewSchema","category","dataSource","kind","parentsIn","updatedAt","spaceId","TimeframeUnitSchema","TimeFrameSchema","duration","unit","RetrievalDocumentTypeSchema","chunks","offset","score","documentId","dataSourceView","reference","sourceUrl","timestamp","RetrievalActionTypeSchema","relativeTimeFrame","query","topK","documents","ProcessSchemaAllowedTypesSchema","ProcessSchemaPropertySchema","ProcessActionOutputsSchema","data","min_timestamp","total_documents","total_chunks","total_tokens","ProcessActionTypeSchema","schema","outputs","TablesQueryActionTypeSchema","resultsFileId","resultsFileSnippet","sectionFileId","WhitelistableFeaturesSchema","WorkspaceSegmentationSchema","RoleSchema","WorkspaceSchema","role","segmentation","whiteListedProviders","defaultEmbeddingProvider","ssoEnforced","ExtensionWorkspaceSchema","blacklistedDomains","UserProviderSchema","UserSchema","provider","username","firstName","lastName","image","WebsearchResultSchema","snippet","link","WebsearchActionOutputSchema","WebsearchActionTypeSchema","MCPActionTypeSchema","GlobalAgentStatusSchema","AgentConfigurationStatusSchema","AgentConfigurationScopeSchema","AgentConfigurationViewSchema","AgentUsageTypeSchema","messageCount","conversationCount","userCount","timePeriodSec","AgentRecentAuthorsSchema","readonly","AgentModelConfigurationSchema","providerId","modelId","temperature","LightAgentConfigurationSchema","versionCreatedAt","version","versionAuthorId","instructions","model","scope","userFavorite","pictureUrl","lastAuthors","usage","maxStepsPerRun","visualizationEnabled","templateId","groupIds","requestedGroupIds","ContentFragmentContextSchema","profilePictureUrl","ContentFragmentSchema","visibility","textUrl","textBytes","context","contentFragmentVersion","AgentMentionSchema","UserMessageContextSchema","timezone","origin","UserMessageSchema","user","mentions","AgentActionTypeSchema","AgentMessageStatusSchema","AgentMessageTypeSchema","parentMessageId","configuration","actions","chainOfThought","rawContents","code","AgentMesssageFeedbackSchema","thumbDirection","agentConfigurationId","agentConfigurationVersion","isConversationShared","ConversationVisibilitySchema","ConversationWithoutContentSchema","updated","owner","ConversationSchema","CoreAPIErrorSchema","CoreAPITokenTypeSchema","APIErrorSchema","data_source_error","run_error","app_error","connectors_error","WorkspaceDomainSchema","domain","domainAutoJoinEnabled","DustAppTypeSchema","appHash","workspaceId","DustAppConfigTypeSchema","DustAppRunErroredEventSchema","DustAppRunRunStatusEventSchema","DustAppRunBlockStatusEventSchema","DustAppRunBlockExecutionEventSchema","block_name","execution","DustAppRunFinalEventSchema","DustAppRunTokensEventSchema","input_index","map","iteration","tokens","logprobs","DustAppRunFunctionCallEventSchema","function_call","DustAppRunFunctionCallArgumentsTokensEventSchema","SpaceKindSchema","SpaceTypeSchema","isRestricted","DatasetSchemaEntryType","DatasetSchema","key","AppTypeSchema","savedSpecification","savedConfig","savedRun","space","datasets","coreSpecifications","RunAppResponseSchema","GetDataSourcesResponseSchema","GetOrPatchAgentConfigurationResponseSchema","agentConfiguration","PatchAgentConfigurationRequestSchema","GetAgentConfigurationsResponseSchema","agentConfigurations","PostContentFragmentResponseSchema","contentFragment","CreateConversationResponseSchema","conversation","GetFeedbacksResponseSchema","feedbacks","PublicPostMessageFeedbackRequestBodySchema","feedbackContent","PostMessageFeedbackResponseSchema","success","PostUserMessageResponseSchema","GetConversationResponseSchema","TokenizeResponseSchema","GetActiveMemberEmailsInWorkspaceResponseSchema","emails","GetWorkspaceVerifiedDomainsResponseSchema","verified_domains","GetWorkspaceFeatureFlagsResponseSchema","feature_flags","PublicPostMessagesRequestBodySchema","intersection","min","blocking","partial","PublicPostEditMessagesRequestBodySchema","PublicContentFragmentWithContentSchema","url","nodeId","supersededContentFragmentId","PublicContentFragmentWithFileIdSchema","PublicContentFragmentWithContentNodeSchema","PublicPostContentFragmentRequestBodySchema","PublicPostConversationsRequestBodySchema","contentFragments","PostConversationsResponseSchema","GetConversationsResponseSchema","conversations","SearchDataSourceViewsRequestSchema","dataSourceId","vaultId","vaultKind","SearchDataSourceViewsResponseSchema","data_source_views","ValidateMemberRequestSchema","GetAppsResponseSchema","apps","PostAppsRequestSchema","ImportAppsResponseSchema","DataSourceViewResponseSchema","PatchDataSourceViewRequestSchema","parentsToAdd","parentsToRemove","DataSourceSearchQuerySchema","top_k","coerce","full_text","target_document_tokens","timestamp_gt","timestamp_lt","tags_in","tags_not","parents_in","parents_not","FrontDataSourceDocumentSectionSchema","lazy","prefix","sections","PostDataSourceDocumentRequestSchema","parent_id","parents","source_url","upsert_context","sync_type","section","light_document_output","async","mime_type","UpsertTableRowsRequestSchema","rows","row_id","epoch","truncate","PostTableParentsRequestSchema","UpsertTableFromCsvRequestSchema","parentId","mimeType","tableId","UpsertDatabaseTableRequestSchema","table_id","remote_database_table_id","remote_database_secret_id","SupportedUsageTablesSchema","CoreAPIFolderSchema","data_source_id","folder_id","GetFoldersResponseSchema","folders","total","GetFolderResponseSchema","folder","DeleteFolderResponseSchema","UpsertFolderResponseSchema","data_source","ProviderVisibilitySchema","UpsertDataSourceFolderRequestSchema","provider_visibility","DateSchema","test","GetWorkspaceUsageRequestSchema","start","end","mode","table","format","FileUploadUrlRequestSchema","fileName","max","fileSize","useCase","useCaseMetadata","conversationId","FileTypeStatusSchema","FileTypeUseCaseSchema","FileTypeSchema","downloadUrl","uploadUrl","publicUrl","FileTypeWithUploadUrlSchema","FileUploadRequestResponseSchema","file","FileUploadedRequestResponseSchema","MeResponseSchema","and","workspaces","CancelMessageGenerationResponseSchema","CancelMessageGenerationRequestSchema","messageIds","getProviderFromRetrievedDocument","document","AppsCheckRequestSchema","AppsCheckResponseSchema","deployed","GetSpacesResponseSchema","spaces","ContentNodeTypeSchema","ContentNodesViewTypeSchema","BaseSearchBodySchema","viewType","spaceIds","includeDataSources","limit","SearchRequestBodySchema","nodeIds","ContentNodeSchema","expandable","internalId","lastUpdatedAt","parentInternalId","preventSelection","providerVisibility","ContentNodeWithParentSchema","parentsInternalIds","parentTitle","DataSourceContentNodeSchema","dataSourceViews","DataSourceViewContentNodeSchema","SearchWarningCodeSchema","PostWorkspaceSearchResponseBodySchema","nodes","warningCode","generateConnectorRelativeMimeTypes","_ref","resourceTypes","reduce","acc","_extends2","replace","toLowerCase","CONTENT_NODE_MIME_TYPES","CONFLUENCE","GITHUB","GOOGLE_DRIVE","INTERCOM","MICROSOFT","NOTION","SLACK","SNOWFLAKE","WEBCRAWLER","ZENDESK","BIGQUERY","SALESFORCE","GONG","INTERNAL_MIME_TYPES","CONFIGURATION","DATA_SOURCE","INTERNAL_MIME_TYPES_VALUES","values","flatMap","v","textFromResponse","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","stream","wrap","_context","prev","next","body","abrupt","Promise","resolve","reject","on","chunk","push","Buffer","from","toString","stop","_x","apply","arguments","axiosNoKeepAlive","axios","create","httpAgent","http","Agent","keepAlive","httpsAgent","https","DustAPI","credentials","logger","urlOverride","_url","_credentials","_logger","_urlOverride","setWorkspaceId","apiUrl","getApiKey","_getApiKey","_callee2","_context2","apiKey","baseHeaders","_baseHeaders","_callee3","headers","_context3","t0","sent","t1","Authorization","extraHeaders","assign","me","_me","_callee4","res","r","_context4","_fetchWithError","method","_resultFromResponse","request","_request","_callee5","args","_args$overrideWorkspa","_context5","path","overrideWorkspaceId","JSON","stringify","signal","_x2","runApp","_runApp","_callee6","_ref4","inputs","_temp","appSpaceId","useWorkspaceCredentials","_context6","URLSearchParams","use_workspace_credentials","_x3","_x4","_x5","_x6","runAppStreamed","_runAppStreamed","_callee9","_ref6","_temp2","processStreamedRunResponse","_processStreamedRunResponse","_context9","_callee8","hasRunId","rejectDustRunIdPromise","resolveDustRunIdPromise","dustRunIdPromise","pendingEvents","parser","reader","streamEvents","_context8","ok","createParser","event","_data$content","parse","err","_wrapAsyncGenerator","_callee7","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_i","_pendingEvents","_context7","_asyncIterator","_awaitAsyncGenerator","done","feed","TextDecoder","decode","length","finish","setImmediate","Error","errorStr","errorSource","eventStream","dustRunId","_processStreamedRunRe","_x11","_x12","_x7","_x8","_x9","_x10","getDataSources","_getDataSources","_callee10","_context10","getAgentConfigurations","_getAgentConfigurations","_callee11","_ref8","view","_ref8$includes","getQueryString","queryString","_context11","append","_x13","postContentFragment","_postContentFragment","_callee12","_ref9","_context12","_x14","createConversation","_createConversation","_callee13","_ref10","_ref10$blocking","_context13","_x15","postUserMessage","_postUserMessage","_callee14","_ref11","_context14","_x16","streamAgentAnswerEvents","_streamAgentAnswerEvents","_callee15","_ref12","userMessageId","agentMessages","_context15","versions","filter","m","streamAgentMessageEvents","agentMessage","_x17","_streamAgentMessageEvents","_callee17","_ref13","_this","_context17","t2","t3","t4","_ref2","_callee16","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_i2","_pendingEvents2","_context16","_x18","cancelMessageGeneration","_cancelMessageGeneration","_callee18","_ref14","_context18","_x19","getConversations","_getConversations","_callee19","_context19","getConversation","_getConversation","_callee20","_ref15","_context20","_x20","getConversationFeedback","_getConversationFeedback","_callee21","_ref16","_context21","_x21","postFeedback","_postFeedback","_callee22","feedback","_context22","_x22","_x23","_x24","deleteFeedback","_deleteFeedback","_callee23","_context23","_x25","_x26","tokenize","_tokenize","_callee24","_context24","_x27","_x28","upsertFolder","_upsertFolder","_callee25","_ref17","folderId","_context25","encodeURIComponent","Math","floor","_x29","deleteFolder","_deleteFolder","_callee26","_ref18","_context26","_x30","uploadFile","_uploadFile","_callee27","_ref19","fileObject","fileRes","formData","_err$response","_context27","FormData","post","call","t5","isAxiosError","_x31","deleteFile","_deleteFile","_callee28","_ref20","fileID","_context28","_x32","getActiveMemberEmailsInWorkspace","_getActiveMemberEmailsInWorkspace","_callee29","_context29","activeOnly","getWorkspaceVerifiedDomains","_getWorkspaceVerifiedDomains","_callee30","_context30","getWorkspaceFeatureFlags","_getWorkspaceFeatureFlags","_callee31","_context31","searchDataSourceViews","_searchDataSourceViews","_callee32","searchParams","_context32","_x33","patchDataSourceView","_patchDataSourceView","_callee33","patch","_context33","_x34","_x35","exportApps","_exportApps","_callee34","_ref21","_context34","_x36","checkApps","_checkApps","_callee35","_context35","_x37","_x38","getSpaces","_getSpaces","_callee36","_context36","searchNodes","_searchNodes","_callee37","_context37","_x39","_fetchWithError2","_callee38","now","_context38","Date","validateStatus","responseType","dustError","connectorsError","e","_x40","_x41","_resultFromResponse2","_callee39","rErr","_err","_err2","_context39","safeParse","parseError","rawText","_x42","_x43","browse_action","conversation_include_file_action","conversation_list_files_action","dust_app_run_action","process_action","reasoning_action","retrieval_action","search_labels_action","tables_query_action","websearch_action","tool_action","action","x","_createForOfIteratorHelperLoose","t","startsWith","substring","arg","obj","ds","arr"],"mappings":"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"}